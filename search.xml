<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[集群调度架构的发展]]></title>
      <url>http://blog.jetmuffin.com/2017/01/02/The-evoolution-of-cluster-scheduler-architectures/</url>
      <content type="html"><![CDATA[<p>文章翻译自<a href="http://firmament.io/blog/scheduler-architectures.html" target="_blank" rel="external">《The evolution of cluster scheduler architectures》</a>，原作者为 Cambridge 的 Sys@Scale 实验室。</p>
<a id="more"></a>
<blockquote>
<p>集群调度器作为当今基础设施架构中重要的组件，在近几年中发展非常迅速。它们的结构从整体化的设计逐渐松散化，分布式化，变得更为灵活。然而，许多现在的开源实现要么仍然采用整体化设计，要么缺少重要的功能，而这些功能则正是关系到现实世界的用户所关心的问题，即他们要求实现的高利用。</p>
</blockquote>
<p>这篇文章是我们撰写的一个系列中的第一篇。这个系列阐述关于如何在大型集群调度任务，像那些互联网公司如 Amazon，Google，Facebook，Microsoft，Yahoo!等所在生产实践中所做的那样。调度是一个重要的主题，因为它直接影响着操作一个集群的代价。例如一个差的调度器会导致集群的使用率低下，这就意味着昂贵的服务器大部分在空闲着，必然造成经济上的损失。然而集群高使用率不仅仅是针对单个任务而言，因为任务之间往往会相互影响，这也就要求调度器在决策上更加地细致，小心。</p>
<h2 id="架构发展"><a href="#架构发展" class="headerlink" title="架构发展"></a>架构发展</h2><p>这篇文章讨论调度器的结构在近几年来是如何发展的，以及为什么这么发展。如图一所示，当前的调度器主要有以下几种不同的调度模式。其中灰色的正方形表示机器节点，彩色的圆形表示任务，而带有“S”的圆角矩形则代表调度器。箭头显示了调度器的调度决策，而三种不同的颜色（红黄蓝）则表示了不同的任务类型（例如 web 服务，批处理分析以及机器学习任务）。</p>
<p><img src="http://cdn.jetmuffin.com/posts/scheduler-arch-sharestate.png" alt="图1"></p>
<h3 id="中央调度架构"><a href="#中央调度架构" class="headerlink" title="中央调度架构"></a>中央调度架构</h3><p>许多集群调度器是<strong>中央调度架构</strong>的，例如大多数的高性能计算中的调度器，<a href="#">Borg 调度器</a>，一些早期的 Hadoop 中的调度器以及现在 Kubernetes 中的调度器。这种模式会在集群的某台机器上允许一个单独的调度进程（例如 Hadoop v1 中的 <code>JobTracker</code> 和 Kubernetes 中的 <code>kube-scheduler</code>），而这个调度进程负责分配任务到每台机器节点上。所有任务都是由一个调度器处理，也就是说所有的任务均是由一个调度逻辑进行分配的（如图 1a 所示）。这种架构简单一致，在许多越来越复杂的调度器中采用。例如 <a href="#">Paragon</a> 和 <a href="#">Quasar</a>，使用机器学习的方法来防止任务之间的资源竞争的调度器，也使用了这种调度模式。</p>
<p>相比于早些时候的 Hadoop 上的 MapReduce 任务，当前的集群允许的应用种类越来越多，不再针对单一的任务。然而，维护一个中央调度器来处理多类型混合任务是相当棘手的，原因有以下几点：</p>
<ol>
<li>很明显调度器在应该用不同方式处理长时间服务作业（Long-running service jobs）和批处理作业（batch jobs）。</li>
<li>不同的应用有不同的需求，需要满足他们所有的需求相当于不断在调度器上增加功能，这也使得调度器的逻辑和实现越来越复杂。</li>
<li>调度器处理任务的顺序也会成为一个问题，队列的影响（例如 head-of-line blocking）和任务存储将难以处理，除非调度器是精心设计的。</li>
</ol>
<p>总之，这些问题将造成工程上的噩梦，调度器的维护者将收到源源不断的功能需求而没法实现它。</p>
<h3 id="两层调度架构"><a href="#两层调度架构" class="headerlink" title="两层调度架构"></a>两层调度架构</h3><p><strong>两层调度架构</strong>通过分离<em>资源分配</em>和<em>任务调度</em>这两部分来解决了这个问题。它上层允许针对不同的应用定制不同的任务分配逻辑，同时维持他们共用集群的能力。<a href="#">Mesos</a>最先使用了这种架构，<a href="#">YARN</a>也在某个版本之后开始支持。在 Mesos 中，底层资源管理器将资源以 <code>offer</code> 的形式提供给应用级的调度器，这些调度器可以在其中选择适合的 <code>offer</code> 并使用它来运行任务。而 YARN 中则允许应用级的调度器向底层资源管理器请求资源。图 1b 显示了这种架构模式：针对任务定制的调度器（S0-S2）和资源管理器进行交互，动态地对资源进行分片，分配给各个任务。总体而言，这是一种灵活的，允许根据任务类型进行定制的架构模式。</p>
<p>但是，两层调度框架分层的思想也存在着缺陷。应用层的调度器无法获得上帝视角，例如他们无法看到<em>所有</em>可能的调度选项。相反，他们仅仅能够看到通过资源管理器提供的资源对应的调度选项。这就存在着一些缺点：</p>
<ol>
<li>优先级将难以实现：在基于 <code>offer</code> 的调度模型（Mesos）中，上层调度器无法看到分配给正在运行的任务的资源；在基于请求（YARN）的调度模型中，底层的资源管理器必须知道优先级策略（这和两层调度模式相矛盾）。</li>
<li>因为调度器无法看到所有的资源，它无法确认运行任务是否会影响降低资源的质量。</li>
<li>根据应用定制的调度器可能需要关注来自下层的资源中的许多不同的方面的信息，而他们仅仅能通过和底层资源管理器的接口获知这些内容，这也就导致这些接口可能会变得十分复杂。</li>
</ol>
<h3 id="共享状态架构"><a href="#共享状态架构" class="headerlink" title="共享状态架构"></a>共享状态架构</h3><p><strong>共享状态架构</strong>采用了一种半分布式的模型来解决上述的这些问题。在这个架构中，每个应用层的调度器相互独立地更新集群状态的多个副本，如图 1c 中所示。在这些变化在本地进行以后，调度器会进行启动一个乐观一致的事物去更新共享集群状态。当然这个事物也会失败，不同的调度器在同一时间进行了进行的变动可能会存在矛盾。</p>
<p>共享状态架构最典型的设计例子就是 Google 的 <a href="#">Omega</a> 了，其次就是微软的 <a href="#">Apollo</a>，以及 Hashicorp 的 [Nomad] 容器调度器。这些调度器都是将集群的共享状态储存在单个位置上，例如 Omega 中的 <code>cell state</code>，Apollo 中的 <code>resource monitor</code> 以及 Nomad 中的 <code>plan queue</code>。区别于其他两个调度框架，Apollo 中共享状态是只读的，同时调度事务是直接通过集群机器提交的。这些机器会自己确认是否存在矛盾，以及接受和拒绝这些变动。这也使得 Apollo 在集群共享状态暂时不可访问时也能短暂工作。</p>
<p>逻辑上的共享状态架构设计允许不在整个集群上实现完全的状态共享。在这种设计中（类似 Apollo 的设计），每台机器维护它自己的状态，发送要更新的状态到不同的 agent 上，例如调度器，机器的健康监控器，以及资源监控系统。每台机器局部的共享状态构成了整个集群的全局共享状态。</p>
<p>然而共享状态架构同样也有缺陷。和中央调度不同的是，共享状态总是处理着旧的集群状态信息，而不是实时的信息。这可能在高并发的场景下会降低调度器的性能。</p>
<h3 id="完全分布式架构"><a href="#完全分布式架构" class="headerlink" title="完全分布式架构"></a>完全分布式架构</h3><p><strong>完全分布式架构</strong>则将结构分解的更加彻底，如图 1d 所示，它甚至在调度器中没有协调者，仅仅是使用各个独立的调度器来对任务提供调度服务。这种架构中，每个调度器只是处理它本地的，部分的，常常过时的集群信息。作业可以提交到任意的调度器上，每个调度器可以调配任务到集群中的任意一个位置。和两层调度架构不同的是，它的调度器不负责对集群资源进行分片。相反，所有的调度和资源分片是任务在统计学上的多元性和随机性以及调度器的决策形成的结果。</p>
<p>虽然在之前有关于相关概念（利用多元随机决策）<a href="#">在1996年发表</a>，最近的关于完全分布式架构的调度器的文章大概是从 <a href="#">Sparrow</a> 的文章开始的。Sparrow 的主要前提是基于一个假设，即我们在集群中运行的任务在执行时间上在不断缩短，因为任务的划分粒度变得更加细粒度了。因此，作者假设瞬时任务数量变得更加庞大，这也就意味着调度器的决策吞吐量将会变得很大。而单个调度器可能支撑不了这么大的吞吐量（可能达到每秒百万个任务），Sparrow 想要将负载分配到多个调度器上。</p>
<p>这可能带来一些完美的作用，从概念上可以显示省去了中央的控制，同时它非常满足一些任务的需求——在之后的文章中会提到。在这里，以下一些原因足以显示这种分布式的，无中心协调的调度模式，在逻辑上相比比中央控制的，两层调度的，或共享状态的调度器，过于简单。例如：</p>
<ol>
<li>分布式的调度器通常基于简单的 <code>&quot;slot&quot;</code> 概念，把每台机器细分成 n 个一致的 slot，在其中运行 n 个并行的任务。这简化了任务的资源需求不一致的问题，然而在现实中这个不一致的问题是存在的。</li>
<li>它同样会在 worker 上使用一些特定的队列（例如 Sparrow 中的 FIFO），这会限制调度的灵活性，因为这种架构下的调度器只能从集群中选择一台机器来讲一个任务入队。</li>
<li>因为分布式调度器没有中心控制，它在使用全局约束上回存在问题（例如要求公平性策略或者严格的优先级顺序时）</li>
<li>由于它是为了基于最少的信息来做快速的决策而设计的，分布式调度器难以支持复杂的或者应用指定的调度策略。换言之，这种调度目前能架构处理的任务相对比较简单。例如对相互影响的任务它在处理上将会十分棘手。</li>
</ol>
<h3 id="混合式架构"><a href="#混合式架构" class="headerlink" title="混合式架构"></a>混合式架构</h3><p>最近在学术上提出了<strong>混合式架构</strong>，为了解决完全分布式架构的问题，它将中央调度和共享状态调度设计相结合。它的工作方式是，将所有任务通过两种途径进行调度，对于短任务和低优先级批处理任务通过分布式调度来进行分配，而其他的任务则通过中央调度来分配，例如 <a href="#">Tarcil</a>，<a href="#">Mercury</a> 和 <a href="#">Hawk</a>，图 1e 显示了这种设计模式的工作原理。这种设计的好处是，混合调度器混用了上述几种调度架构模式来避免各自的缺点。但据笔者所知，目前没有这种调度器用于生产实践中。</p>
<h2 id="在实践中的结果"><a href="#在实践中的结果" class="headerlink" title="在实践中的结果"></a>在实践中的结果</h2><p>讨论不同调度架构之间相对的优缺点不仅仅是学术上的话题，同样需要在工业界生产实践中去考虑考虑诸如 Borg，Mesos 和 Omega 之类的文章。更进一步的是，许多上面讨论到的系统已经在许多大企业中投入生产使用，例如微软的 Apollo，谷歌的 Borg 和 Apple 的 Mesos，它们同样启示其他的系统可能作为开源项目在生产中使用也是可行的。</p>
<p>最近几年，许多集群允许容器华的任务，导致了许多不同的基于容器的“编排框架”开始出现。这也和谷歌以及其他公司声称的“集群管理者”相类似。然而，集群调度器上仍然有许多细节需要讨论，例如他们的设计原则，他们关注的调度 API等。更重要的是，许多用户既不知道调度器架构起到什么作用，也不知道这些调度器适合哪些应用。</p>
<p>图 2 显示了一系列开源的编排框架的概况，以及它们的架构和它们的调度器支持的功能。在表格的最底部，我们同样引用了谷歌和微软的非开源的系统。<code>Resource granularity</code> 这一列表示资源使用固定的 slots，还是用多维的形式分配资源。</p>
<p><img src="http://cdn.jetmuffin.com/posts/orch-framework-feature-matrix.png" alt="图2"></p>
<p>其中一个帮助你确定调度框架是否合适的重要方面是你的集群是否允许不同的任务。例如在同一个集群中既有前端服务（负载均衡 web server 和 memcached）以及数据批处理分析（例如 MapReduce 或者 Spark）。在同一个集群上运行这两类任务可以提高该集群的使用率，但是不同的应用可能有不同的调度需求。在这种情况下，中央调度的调度器可能导致一个局部最优的调度结果，因为它在逻辑上无法做到根据每个任务进行的多样性调度。而两层调度和共享状态调度可能就更加适合一些。</p>
<p>大多数用户面对的服务任务是用服务时的峰值需求来设定的资源分配量的，但是在实际中通常这些服务的资源使用率是低于他们的分配需求。<strong>在这种情况下，能够适当的超售资源给低优先级的任务（同时保证服务的 QoS）是集群效率的关键。</strong>Mesos 是当前的开源系统中唯一支持资源超售的，而 Kubernetes 则是把它作为一个长远的目标。我们应该更加关注这个方面，因为根据谷歌 Borg 的报告指出，大多数集群的使用率仍然是低于 60-70% 的。我们将在未来的这个系列的文章中更加关注资源评估，资源超配和高效的机器使用率。</p>
<p>最后，特定的分析和 OLAP 风格的应用（例如 Dremel 或 SparkSQL queries）适用于完全分布式调度器。然而，完全分布式调度器（例如 Sparrow）受到一系列的约束，而在任务相同时工作效果最好。我们会在之后的文章中更加详细地解释完全分布式调度器和混合调度器中的分布式组件部分的内容。而现在足以说明从观察的结果看出，这种架构在调度策略上过于简单，以致于没法支持多类资源类型，资源超售和资源重分配等功能。</p>
<p>总体的说，从图 2 的表格中可以看出目前的开源调度框架还有很多的功能需要去支持和改进。这应该成为一个行动号召，解决这些框架中缺少的功能，低下的使用率，不可预测的任务性能等问题。</p>
<p>然而，一个好消息是，许多框架采用中央调度模式的调度框架正在往更加灵活的设计上发展。Kubernetes 已经支持了可插件化的调度器（<code>kube-scheduler</code> pod 可以被其他兼容 API 的调度器 pod 替代），从 v1.2 开始支持多调度器，以及正在开发的支持用户自定义的调度策略等。Docker Swarm 在未来可能同样会变得可插件化。</p>
<h2 id="下回预告"><a href="#下回预告" class="headerlink" title="下回预告"></a>下回预告</h2><p>本系列的下篇文章会关注完全分布式架构的主要问题。同时，我们会关注 resource-fitting 策略，以及最后讨论为什么我们的 Firmament scheduling 平台综合了其他调度架构所有的优点。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li>Verma A, Pedrosa L, Korupolu M, et al. Large-scale cluster management at Google with Borg[C]//Proceedings of the Tenth European Conference on Computer Systems. ACM, 2015: 18.</li>
<li>Hindman B, Konwinski A, Zaharia M, et al. Mesos: A Platform for Fine-Grained Resource Sharing in the Data Center[C]//NSDI. 2011, 11: 22-22.</li>
<li>Vavilapalli V K, Murthy A C, Douglas C, et al. Apache hadoop yarn: Yet another resource negotiator[C]//Proceedings of the 4th annual Symposium on Cloud Computing. ACM, 2013: 5.</li>
<li>Boutin E, Ekanayake J, Lin W, et al. Apollo: scalable and coordinated scheduling for cloud-scale computing[C]//11th USENIX Symposium on Operating Systems Design and Implementation (OSDI 14). 2014: 285-300.</li>
<li>Schwarzkopf M, Konwinski A, Abd-El-Malek M, et al. Omega: flexible, scalable schedulers for large compute clusters[C]//Proceedings of the 8th ACM European Conference on Computer Systems. ACM, 2013: 351-364.</li>
<li>Ousterhout K, Wendell P, Zaharia M, et al. Sparrow: distributed, low latency scheduling[C]//Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles. ACM, 2013: 69-84.</li>
<li>Delimitrou C, Kozyrakis C. Paragon: QoS-aware scheduling for heterogeneous datacenters[C]//ACM SIGPLAN Notices. ACM, 2013, 48(4): 77-88.</li>
<li>Delimitrou C, Kozyrakis C. Quasar: resource-efficient and QoS-aware cluster management[C]//ACM SIGPLAN Notices. ACM, 2014, 49(4): 127-144.</li>
<li>Delimitrou C, Sanchez D, Kozyrakis C. Tarcil: Reconciling scheduling speed and quality in large shared clusters[C]//Proceedings of the Sixth ACM Symposium on Cloud Computing. ACM, 2015: 97-110.</li>
<li>Delgado P, Dinu F, Kermarrec A M, et al. Hawk: Hybrid datacenter scheduling[C]//2015 USENIX Annual Technical Conference (USENIX ATC 15). 2015: 499-510.</li>
<li>Karanasos K, Rao S, Curino C, et al. Mercury: Hybrid centralized and distributed scheduling in large shared clusters[C]//2015 USENIX Annual Technical Conference (USENIX ATC</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[kubernetes源码阅读 - storage part 1 - cache]]></title>
      <url>http://blog.jetmuffin.com/2016/12/04/kubernetes-code-reading-storage-part-1-cache/</url>
      <content type="html"><![CDATA[<p>kubernetes 的 scheduler 维护了一个先进先出的队列，而这个队列的事实上是一种 <code>Storage</code>，只不过它重载了 Storage 中的各种方法。那么 kubernetes 中的存储是如何设计的呢？</p>
<a id="more"></a>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/fifo.go</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Queue <span class="keyword">interface</span> &#123;</div><div class="line">	Store <span class="comment">// Queue事实上也是一种Storage，而在FIFOQueue中具体对Add,List,Delete等方法进行了重写</span></div><div class="line"></div><div class="line">	Pop(PopProcessFunc) (<span class="keyword">interface</span>&#123;&#125;, error)</div><div class="line"></div><div class="line">	AddIfNotPresent(<span class="keyword">interface</span>&#123;&#125;) error</div><div class="line"></div><div class="line">	<span class="comment">// Return true if the first batch of items has been popped</span></div><div class="line">	HasSynced() <span class="keyword">bool</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p>在 <code>pkg/client/cache</code> 包里实现了 cache 的一些基本结构，其中最核心的，也是最顶层的结构是 <code>Store</code> 接口：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/store.go</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Store <span class="keyword">interface</span> &#123;</div><div class="line">	Add(obj <span class="keyword">interface</span>&#123;&#125;) error <span class="comment">// 增</span></div><div class="line">	Update(obj <span class="keyword">interface</span>&#123;&#125;) error <span class="comment">// 改</span></div><div class="line">	Delete(obj <span class="keyword">interface</span>&#123;&#125;) error <span class="comment">// 删</span></div><div class="line">	List() []<span class="keyword">interface</span>&#123;&#125; <span class="comment">// 列举</span></div><div class="line">	ListKeys() []<span class="keyword">string</span> <span class="comment">// 列举 key</span></div><div class="line">	Get(obj <span class="keyword">interface</span>&#123;&#125;) (item <span class="keyword">interface</span>&#123;&#125;, exists <span class="keyword">bool</span>, err error) <span class="comment">// 查</span></div><div class="line">	GetByKey(key <span class="keyword">string</span>) (item <span class="keyword">interface</span>&#123;&#125;, exists <span class="keyword">bool</span>, err error) <span class="comment">// 按key查</span></div><div class="line"></div><div class="line">	<span class="comment">// Replace will delete the contents of the store, using instead the</span></div><div class="line">	<span class="comment">// given list. Store takes ownership of the list, you should not reference</span></div><div class="line">	<span class="comment">// it after calling this function.</span></div><div class="line">	Replace([]<span class="keyword">interface</span>&#123;&#125;, <span class="keyword">string</span>) error <span class="comment">// 替换</span></div><div class="line">	Resync() error <span class="comment">// 同步</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Store 接口定义了 cache 中的所有数据类型的最通用的一层抽象，包括对 cache 存储的增删改查列举等操作。Store 具体的接口实现包括前面提到的 <code>FIFO</code>，<code>DeltaFIFO</code>，以及后面会提到的 <code>ThreadSafeStore</code>，<code>UnDeltaStore</code> 和 <code>ExpirationCache</code>。</p>
<h3 id="ThreadSafeStore"><a href="#ThreadSafeStore" class="headerlink" title="ThreadSafeStore"></a>ThreadSafeStore</h3><p><code>ThreadSafeStore</code> 是 k8s 中用的最多，也是默认的 cache 存储。它允许对数据并行的访问，同时使用加锁的机制保证数据在多线程中是线程安全的。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/thread_safe_store.go</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> threadSafeMap <span class="keyword">struct</span> &#123;</div><div class="line">	lock  sync.RWMutex <span class="comment">// 锁</span></div><div class="line">	items <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125; <span class="comment">// 存储数据的map</span></div><div class="line"></div><div class="line">	<span class="comment">// indexers maps a name to an IndexFunc</span></div><div class="line">	indexers Indexers <span class="comment">// 存储Indexer的map</span></div><div class="line">	<span class="comment">// indices maps a name to an Index</span></div><div class="line">	indices Indices <span class="comment">// 存储Index的map</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ThreadSafeStore</code> 的实现上也比较简单，数据放在 map 的数据结构里，同时使用 <code>sync.RWMutex</code> 对这个 map 的 Add，Update，Delete，Get 等操作加读锁和写锁。此外，它还允许对同一作用的 items 加一个共同的索引方便直接获取，而这个索引放在 <code>indices</code> 里，获得索引的函数放在 <code>indexers</code> 里。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/thread_safe_store.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *threadSafeMap)</span> <span class="title">Index</span><span class="params">(indexName <span class="keyword">string</span>, obj <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">([]<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</div><div class="line">	c.lock.RLock()</div><div class="line">	<span class="keyword">defer</span> c.lock.RUnlock()</div><div class="line"></div><div class="line">	indexFunc := c.indexers[indexName] <span class="comment">// 通过给的索引名称拿到索引函数</span></div><div class="line">	<span class="keyword">if</span> indexFunc == <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Index with name %s does not exist"</span>, indexName)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	indexKeys, err := indexFunc(obj) <span class="comment">// 用索引函数拿到索引的keys</span></div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">	&#125;</div><div class="line">	index := c.indices[indexName]</div><div class="line"></div><div class="line">	<span class="comment">// need to de-dupe the return list.  Since multiple keys are allowed, this can happen.</span></div><div class="line">	returnKeySet := sets.String&#123;&#125;</div><div class="line">	<span class="keyword">for</span> _, indexKey := <span class="keyword">range</span> indexKeys &#123;  <span class="comment">// 对索引的keys进行去重</span></div><div class="line">		set := index[indexKey]</div><div class="line">		<span class="keyword">for</span> _, key := <span class="keyword">range</span> set.UnsortedList() &#123;</div><div class="line">			returnKeySet.Insert(key)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	list := <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, <span class="number">0</span>, returnKeySet.Len())</div><div class="line">	<span class="keyword">for</span> absoluteKey := <span class="keyword">range</span> returnKeySet &#123;</div><div class="line">		list = <span class="built_in">append</span>(list, c.items[absoluteKey]) <span class="comment">// 根据keys拿到实际的items放到list里</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> list, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UndeltaStore"><a href="#UndeltaStore" class="headerlink" title="UndeltaStore"></a>UndeltaStore</h3><p><code>UndeltaStore</code> 在 <code>Store</code> 上做了一层封装，在实例化时传入了一个回调函数 <code>PushFunc</code>，每当 <code>Store</code> 进行了 Add，Update，Delete 等操作，会调用 <code>PushFunc</code> 来告知这个数据的操作已经完成，可以进行后续的工作。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/undelta_store.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UndeltaStore)</span> <span class="title">Add</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> err := u.Store.Add(obj); err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="keyword">return</span> err</div><div class="line">	&#125;</div><div class="line">	u.PushFunc(u.Store.List())</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在实现上其实也很简单，在每个操作的最后调用一次传入的 <code>PushFunc()</code>。</p>
<h3 id="ExpirationCache"><a href="#ExpirationCache" class="headerlink" title="ExpirationCache"></a>ExpirationCache</h3><p><code>ExpirationCache</code> 同样是对 <code>Store</code> 做了一层的封装，和 <code>UndeltaStore</code> 不同的是它是在 <code>ThreadSafeStore</code> 上进行的封装，实现了带过期期限的 cache 功能。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/expiration_cache.go</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> ExpirationCache <span class="keyword">struct</span> &#123;</div><div class="line">	cacheStorage     ThreadSafeStore <span class="comment">// 实际存储的storage</span></div><div class="line">	keyFunc          KeyFunc</div><div class="line">	clock            clock.Clock <span class="comment">// 标记创建时间的时间戳</span></div><div class="line">	expirationPolicy ExpirationPolicy <span class="comment">// 失效策略</span></div><div class="line">	<span class="comment">// expirationLock is a write lock used to guarantee that we don't clobber</span></div><div class="line">	<span class="comment">// newly inserted objects because of a stale expiration timestamp comparison</span></div><div class="line">	expirationLock sync.Mutex <span class="comment">// 失效检查的锁</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当 <code>ExpirationCache</code> 中的每个 item 被创建的时候会为其打上时间戳，而这个 item 在查询的时候会检查这个时间戳到目前的时间间隔是否超过了失效的阈值，若超过了则返回 <code>nil</code> 并把这个 item 从 map 里删掉。（这里相当于做了一个 lazy 操作，如果 item 失效了但是一直没有查询，那么它会一直在 map 里待着）。</p>
<p>默认使用的失效策略比较简单，就是给定一个时间范围阈值 <code>TTL(TimeToLive)</code>，然后判断这个时间戳到现在的时间距离是否大于这个阈值。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/expiration_cache.go</span></div><div class="line"><span class="keyword">type</span> TTLPolicy <span class="keyword">struct</span> &#123;</div><div class="line">	<span class="comment">//	 &gt;0: Expire entries with an age &gt; ttl</span></div><div class="line">	<span class="comment">//	&lt;=0: Don't expire any entry</span></div><div class="line">	Ttl time.Duration <span class="comment">// 过期阈值</span></div><div class="line"></div><div class="line">	<span class="comment">// Clock used to calculate ttl expiration</span></div><div class="line">	Clock clock.Clock</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *TTLPolicy)</span> <span class="title">IsExpired</span><span class="params">(obj *timestampedEntry)</span> <span class="title">bool</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> p.Ttl &gt; <span class="number">0</span> &amp;&amp; p.Clock.Since(obj.timestamp) &gt; p.Ttl <span class="comment">// 判断是否失效（间隔是否大于TTL）</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相比于 <code>ThreadSafeStore</code>，<code>ExpirationCache</code> 在使用时还需要检查 item 是不是失效了，而这个检查的过程也是加锁的，而我们知道 <code>ThreadSafeStore</code> 自身本来就是带锁的操作的，所以它的操作会比 <code>ThreadSafeStore</code> 慢一些。</p>
<h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>除了上面提到的几种 cache 中用到的数据结构外，cache 包里还提供了一些其他的类来进行辅助工作：</p>
<ul>
<li>Indexer（<code>pkg/client/cache/index.go</code>）允许用多种方法对 items 进行过滤（索引）</li>
<li>Lister（<code>pkg/client/cache/lister.go</code>）提供了各种列举 items 的方法</li>
<li>MutationDetection（<code>pkg/client/cache/mutation_dectector.go</code>）检测某个 item 是否发生变化了</li>
<li>…</li>
</ul>
<h2 id="Reflector"><a href="#Reflector" class="headerlink" title="Reflector"></a>Reflector</h2><p>cache 包里的各个类定义了不同场景下 k8s 使用的数据结构，我们也知道 k8s 里实际存储 pods 等资源是放在 <code>ThreadSafeStore</code> 里的，那么 k8s 是如何将 APIServer 里的 RESTful API 和 cache 相联系起来的呢？</p>
<p>在 <code>pkg/client/cache/reflector.go</code> 里，k8s 提供了一种叫做 <code>Reflector</code> 的类，用于作为 APIServer 和 cache 之间的桥梁。对每一类 Resource 为它创建一个从 RESTful Resource 到 cache item 的 Reflector。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/reflector.go</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Reflector <span class="keyword">struct</span> &#123;</div><div class="line">	<span class="comment">// name identifies this reflector. By default it will be a file:line if possible.</span></div><div class="line">	name <span class="keyword">string</span></div><div class="line"></div><div class="line">	<span class="comment">// The type of object we expect to place in the store.</span></div><div class="line">	expectedType reflect.Type <span class="comment">// item的类型</span></div><div class="line">	<span class="comment">// The destination to sync up with the watch source</span></div><div class="line">	store Store <span class="comment">// item 的实际存储</span></div><div class="line">	<span class="comment">// listerWatcher is used to perform lists and watches.</span></div><div class="line">	listerWatcher ListerWatcher <span class="comment">// 用于监听item变化的watcher</span></div><div class="line">	<span class="comment">// period controls timing between one watch ending and</span></div><div class="line">	<span class="comment">// the beginning of the next one.</span></div><div class="line">	period       time.Duration <span class="comment">//watch的间隔</span></div><div class="line">	resyncPeriod time.Duration</div><div class="line">	<span class="comment">// now() returns current time - exposed for testing purposes</span></div><div class="line">	now <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span></div><div class="line">	// <span class="title">lastSyncResourceVersion</span> <span class="title">is</span> <span class="title">the</span> <span class="title">resource</span> <span class="title">version</span> <span class="title">token</span> <span class="title">last</span></div><div class="line">	// <span class="title">observed</span> <span class="title">when</span> <span class="title">doing</span> <span class="title">a</span> <span class="title">sync</span> <span class="title">with</span> <span class="title">the</span> <span class="title">underlying</span> <span class="title">store</span></div><div class="line">	// <span class="title">it</span> <span class="title">is</span> <span class="title">thread</span> <span class="title">safe</span>, <span class="title">but</span> <span class="title">not</span> <span class="title">synchronized</span> <span class="title">with</span> <span class="title">the</span> <span class="title">underlying</span> <span class="title">store</span></div><div class="line">	<span class="title">lastSyncResourceVersion</span> <span class="title">string</span></div><div class="line">	// <span class="title">lastSyncResourceVersionMutex</span> <span class="title">guards</span> <span class="title">read</span>/<span class="title">write</span> <span class="title">access</span> <span class="title">to</span> <span class="title">lastSyncResourceVersion</span></div><div class="line">	<span class="title">lastSyncResourceVersionMutex</span> <span class="title">sync</span>.<span class="title">RWMutex</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Reflector 有两种允许方式：</p>
<ul>
<li><code>Run()</code></li>
<li><code>RunUntil(stopCh &lt;-chan struct{})</code></li>
</ul>
<p>两者的区别在于后者传入了一个 stopCh，当收到停止信号会停止这个 <code>Run()</code> 方法，而前者则是 Run forever 的。而两者的方法的主题都是一致的，都在启动了一个 goroutine 去一直执行 <code>ListAndWatch()</code> 方法。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/reflector.go</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reflector)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</div><div class="line">	glog.V(<span class="number">3</span>).Infof(<span class="string">"Starting reflector %v (%s) from %s"</span>, r.expectedType, r.resyncPeriod, r.name)</div><div class="line">	<span class="keyword">go</span> wait.Until(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">if</span> err := r.ListAndWatch(wait.NeverStop); err != <span class="literal">nil</span> &#123; <span class="comment">// 一直执行ListAndWatch</span></div><div class="line">			utilruntime.HandleError(err)</div><div class="line">		&#125;</div><div class="line">	&#125;, r.period, wait.NeverStop)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么来看一看这个 <code>ListAndWatch()</code> 是做什么的：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/reflector.go</span></div><div class="line"></div><div class="line"><span class="comment">//...</span></div><div class="line">w, err := r.listerWatcher.Watch(options) <span class="comment">// 获得一个watch.Interface</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	<span class="keyword">switch</span> err &#123;</div><div class="line">	<span class="keyword">case</span> io.EOF:</div><div class="line">		<span class="comment">// watch closed normally</span></div><div class="line">	<span class="keyword">case</span> io.ErrUnexpectedEOF:</div><div class="line">		glog.V(<span class="number">1</span>).Infof(<span class="string">"%s: Watch for %v closed with unexpected EOF: %v"</span>, r.name, r.expectedType, err)</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		utilruntime.HandleError(fmt.Errorf(<span class="string">"%s: Failed to watch %v: %v"</span>, r.name, r.expectedType, err))</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// If this is "connection refused" error, it means that most likely apiserver is not responsive.</span></div><div class="line">	<span class="comment">// It doesn't make sense to re-list all objects because most likely we will be able to restart</span></div><div class="line">	<span class="comment">// watch where we ended.</span></div><div class="line">	<span class="comment">// If that's the case wait and resend watch request.</span></div><div class="line">	<span class="keyword">if</span> urlError, ok := err.(*url.Error); ok &#123;</div><div class="line">		<span class="keyword">if</span> opError, ok := urlError.Err.(*net.OpError); ok &#123;</div><div class="line">			<span class="keyword">if</span> errno, ok := opError.Err.(syscall.Errno); ok &amp;&amp; errno == syscall.ECONNREFUSED &#123;</div><div class="line">				time.Sleep(time.Second)</div><div class="line">				<span class="keyword">continue</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> err := r.watchHandler(w, &amp;resourceVersion, resyncerrc, stopCh); err != <span class="literal">nil</span> &#123; <span class="comment">// 处理这个 watch.Interface</span></div><div class="line">	<span class="keyword">if</span> err != errorStopRequested &#123;</div><div class="line">		glog.Warningf(<span class="string">"%s: watch of %v ended with: %v"</span>, r.name, r.expectedType, err)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//...</span></div></pre></td></tr></table></figure>
<p>在 <code>ListAndWatch()</code> 中前面先开了一个独立的 goroutine 去同步 Store 这里就不细说了。核心的内容在后面，首先是 <code>r.listerWatcher.Watch(options)</code> 获取到一个 <code>watch.Interface</code> 对象，然后对这个对象进行处理，即 <code>r.watchHandler()</code>。</p>
<p>首先看这个 <code>watch.Interface</code>，寻找引用它的路径可以按着 <code>pkg/client/cache/listwatch.go: ListerWatcher.Watch()</code> -&gt; <code>pkg/client/cache/listwatch.go: ListWatch.WatchFunc</code> -&gt; <code>pkg/client/cache/listwatch.go: NewListWatchFromClient()</code> 的一个思路去看。</p>
<p>那么最终关注这个 <code>NewListWatchFromClient()</code> 方法，它事实上就是连接着 API 的那一头，传入了 API 的一个 Resource，而 <code>ListerWatcher</code> 的 <code>Watch()</code> 方法就是这个 Resource 中的 <code>Watch()</code> 方法。具体实例化是在每个资源的包中，例如 <code>pkg/kubelet/config/apiserver.go</code> 中：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/kubelet/config/apiserver.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSourceApiserver</span><span class="params">(c *clientset.Clientset, nodeName types.NodeName, updates <span class="keyword">chan</span>&lt;- <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line">	lw := cache.NewListWatchFromClient(c.Core().RESTClient(), <span class="string">"pods"</span>, v1.NamespaceAll, fields.OneTermEqualSelector(api.PodHostField, <span class="keyword">string</span>(nodeName)))</div><div class="line">	newSourceApiserverFromLW(lw, updates)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里为 pods 创建了一个 RESTClient，同时用这个 Client 作为参数创建一个 ListWatcher，ListAndWatch 中的 Watch 方法就是 Client 中的 Watch 方法。</p>
<p>那么搞清楚了这一头了以后看一看检测到变化以后 Reflector 是怎么处理的。在 ListAndWatch 方法中还有一个重要的方法 <code>watchHandler()</code> 方法：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/reflector.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reflector)</span> <span class="title">watchHandler</span><span class="params">(w watch.Interface, resourceVersion *<span class="keyword">string</span>, errc <span class="keyword">chan</span> error, stopCh &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</div><div class="line">  	<span class="comment">//...</span></div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		<span class="keyword">select</span> &#123;</div><div class="line">		<span class="keyword">case</span> &lt;-stopCh:</div><div class="line">			<span class="keyword">return</span> errorStopRequested</div><div class="line">		<span class="keyword">case</span> err := &lt;-errc:</div><div class="line">			<span class="keyword">return</span> err</div><div class="line">		<span class="keyword">case</span> event, ok := &lt;-w.ResultChan(): <span class="comment">// 从ResultChan中拿出一个event</span></div><div class="line">			<span class="keyword">if</span> !ok &#123;</div><div class="line">				<span class="keyword">break</span> loop</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> event.Type == watch.Error &#123;</div><div class="line">				<span class="keyword">return</span> apierrs.FromObject(event.Object)</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> e, a := r.expectedType, reflect.TypeOf(event.Object); e != <span class="literal">nil</span> &amp;&amp; e != a &#123;</div><div class="line">				utilruntime.HandleError(fmt.Errorf(<span class="string">"%s: expected type %v, but watch event object had type %v"</span>, r.name, e, a))</div><div class="line">				<span class="keyword">continue</span></div><div class="line">			&#125;</div><div class="line">			meta, err := meta.Accessor(event.Object) <span class="comment">//用event.Object获取meta信息</span></div><div class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">				utilruntime.HandleError(fmt.Errorf(<span class="string">"%s: unable to understand watch event %#v"</span>, r.name, event))</div><div class="line">				<span class="keyword">continue</span></div><div class="line">			&#125;</div><div class="line">			newResourceVersion := meta.GetResourceVersion()</div><div class="line">			<span class="keyword">switch</span> event.Type &#123; <span class="comment">// 根据event的不同类型对cache做不同处理</span></div><div class="line">			<span class="keyword">case</span> watch.Added:</div><div class="line">				r.store.Add(event.Object)</div><div class="line">			<span class="keyword">case</span> watch.Modified:</div><div class="line">				r.store.Update(event.Object)</div><div class="line">			<span class="keyword">case</span> watch.Deleted:</div><div class="line">				<span class="comment">// <span class="doctag">TODO:</span> Will any consumers need access to the "last known</span></div><div class="line">				<span class="comment">// state", which is passed in event.Object? If so, may need</span></div><div class="line">				<span class="comment">// to change this.</span></div><div class="line">				r.store.Delete(event.Object)</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">				utilruntime.HandleError(fmt.Errorf(<span class="string">"%s: unable to understand watch event %#v"</span>, r.name, event))</div><div class="line">			&#125;</div><div class="line">			*resourceVersion = newResourceVersion</div><div class="line">			r.setLastSyncResourceVersion(newResourceVersion)</div><div class="line">			eventCount++</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>watchHandler()</code> 的核心是这个 loop，Reflector 会从 watch.Interface 中拿到一个叫做 ResultChan 的 chanel，watch.Interface 在 API 的那一头会根据 HTTP Request 源源不断往这个 chanel 里扔进去事件 Event（<code>pkg/watch/watch.go: Event</code>），而 Reflector 从 chanel 的这一头不断的拿出这些事件，获取他们的 meta 信息，再根据事件的不同类型对 cache 做增删改查操作。</p>
<p>也就是说 k8s 对各种操作事实上是统一通过这个 chanel 里以事件的形式市传过来的，这也解释了为什么 cache 和 Store 中的实现所有的方法都是传进去一个 object 的 interface。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里所有的路径都打通了，再最后理一遍 k8s 是如何从 API 到 cache 的 Store 的：</p>
<ol>
<li>APIServer 为每类资源（例如 pods）创建一个 RESTClient（client）用于处理诸如 POST，PUT，GET 的 RESTful HTTP requsts</li>
<li>APIServer 用 client 创建一个 ListWatcher（lw）用于监控每类资源的变化</li>
<li>APIServer 用 lw，指定的 store，创建一个 Reflector（reflector），将这个变化作用到 store 上</li>
<li>当发生 HTTP Requests 时，client 的 Watch 方法会把资源和资源变化类型打包成 event 放进 lw 的 ResultChan 中</li>
<li>reflector 从 ResultChan 里拿出 event，根据 event.EventType 把 event.Object 作用到 store 里去</li>
</ol>
<p>整个过程中用了许多的 goroutine 来完成这么一件事。相比于 k8s 的实现，常见的 webapp 的处理相对就简单了好多，也可以看出 k8s 在设计上的精妙。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[kubernetes源码阅读 - queue]]></title>
      <url>http://blog.jetmuffin.com/2016/12/03/kubernetes-code-reading-queue/</url>
      <content type="html"><![CDATA[<p>上篇文章中对 k8s 的 scheduler 部分进行了简单的源码阅读和分析，现在接着上次的位置继续往下阅读。</p>
<p><img src="http://cdn.jetmuffin.com/posts/gce.png" alt="k8s"></p>
<a id="more"></a>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在 <code>plugin/pkg/scheduler/factory/factory.go</code> 的代码中，scheduler 在创建时引用了一个 <code>getNextPod</code> 方法，获取下一个待调度的 pod。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// plugin/pkg/scheduler/factory/factory.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *ConfigFactory)</span> <span class="title">getNextPod</span><span class="params">()</span> *<span class="title">v1</span>.<span class="title">Pod</span></span> &#123;</div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        pod := cache.Pop(f.PodQueue).(*v1.Pod) <span class="comment">// 获取下一个待调度的 Pod</span></div><div class="line">        <span class="keyword">if</span> f.responsibleForPod(pod) &#123;</div><div class="line">            glog.V(<span class="number">4</span>).Infof(<span class="string">"About to try and schedule pod %v"</span>, pod.Name)</div><div class="line">            <span class="keyword">return</span> pod</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当时没有继续下去，这些 pod 在 k8s 的调度队列里是如何管理的，这也是这篇文章想从源码里学到的。</p>
<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>和上篇文章一样，由于 k8s 的代码量非常大，那么我们还是一点一点追溯到代码的源头。从 <code>cache.Pop()</code> 方法往上头寻找，IDE 会把你带到 <code>pkg/client/cache/fifo.go</code> 这个文件。从名字很明显看出这是一个先进先出的队列，那么我们就需要看看 k8s 在队列上是如何进行设计的。</p>
<p>首先是 <code>Queue</code> 的接口：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/fifo.go</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Queue <span class="keyword">interface</span> &#123;</div><div class="line">    Store <span class="comment">// 实际存储的后端</span></div><div class="line"></div><div class="line">    <span class="comment">// Pop blocks until it has something to process.</span></div><div class="line">    <span class="comment">// It returns the object that was process and the result of processing.</span></div><div class="line">    <span class="comment">// The PopProcessFunc may return an ErrRequeue&#123;...&#125; to indicate the item</span></div><div class="line">    <span class="comment">// should be requeued before releasing the lock on the queue.</span></div><div class="line">    Pop(PopProcessFunc) (<span class="keyword">interface</span>&#123;&#125;, error) <span class="comment">// pop 的抽象方法</span></div><div class="line"></div><div class="line">    <span class="comment">// AddIfNotPresent adds a value previously</span></div><div class="line">    <span class="comment">// returned by Pop back into the queue as long</span></div><div class="line">    <span class="comment">// as nothing else (presumably more recent)</span></div><div class="line">    <span class="comment">// has since been added.</span></div><div class="line">    AddIfNotPresent(<span class="keyword">interface</span>&#123;&#125;) error <span class="comment">// 如同注释所说。。加入队列如果它不在队列中</span></div><div class="line"></div><div class="line">    <span class="comment">// Return true if the first batch of items has been popped</span></div><div class="line">    HasSynced() <span class="keyword">bool</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个接口实际上是对所有类型的队列进行抽象，<code>Pop()</code> 方法是它们共有的方法，FIFO 是一种队列的实现方式，队列还可能有其他的实现方式，诸如 FILO 等。</p>
<h3 id="FIFO-Queue"><a href="#FIFO-Queue" class="headerlink" title="FIFO Queue"></a>FIFO Queue</h3><p>k8s 中默认使用的是 FIFO 队列：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/fifo.go</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> FIFO <span class="keyword">struct</span> &#123;</div><div class="line">    lock sync.RWMutex <span class="comment">// 读写锁</span></div><div class="line">    cond sync.Cond <span class="comment">// 读写锁基础上的消息通知对象</span></div><div class="line">    <span class="comment">// We depend on the property that items in the set are in the queue and vice versa.</span></div><div class="line">    items <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125; <span class="comment">// 存储对象的内容</span></div><div class="line">    queue []<span class="keyword">string</span> <span class="comment">// 存储对象的 id</span></div><div class="line"></div><div class="line">    <span class="comment">// populated is true if the first batch of items inserted by Replace() has been populated</span></div><div class="line">    <span class="comment">// or Delete/Add/Update was called first.</span></div><div class="line">    populated <span class="keyword">bool</span></div><div class="line">    <span class="comment">// initialPopulationCount is the number of items inserted by the first call of Replace()</span></div><div class="line">    initialPopulationCount <span class="keyword">int</span></div><div class="line"></div><div class="line">    <span class="comment">// keyFunc is used to make the key used for queued item insertion and retrieval, and</span></div><div class="line">    <span class="comment">// should be deterministic.</span></div><div class="line">    keyFunc KeyFunc <span class="comment">// 用于获取item的key的function</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>FIFO 队列中有两个重要的数据结构：</p>
<ul>
<li><code>items map[string]interface{}</code> 用于 map 的 键值对形式实际存 items，便于 items 的增删改查</li>
<li><code>queue []string</code> 用于维护每个 items 进入 FIFO 队列的先后顺序，只存 id</li>
</ul>
<p>这里和其他用 chanel 实现的 FIFO 队列稍有不同，用一个 map 和一个 list 就成功的实现了可以增删改查的先进先出队列。</p>
<p>而这个先进先出的 FIFO 队列共有以下操作：</p>
<ul>
<li><code>Add()</code> （添加一个 item）</li>
<li><code>AddIfNotPresent()</code> （如果 item 不在队列中，那么就把它加进队列里）</li>
<li><code>Update()</code> （更新指定 item）</li>
<li><code>Delete()</code> （删除制定 item）</li>
<li><code>List()</code> （列举所有的 item）</li>
<li><code>ListKeys()</code> （列举所有的 key）</li>
<li><code>Get()</code> (按对象获取 item）</li>
<li><code>GetByKey()</code> （按 key 获取 item）</li>
<li><strong><code>Pop()</code></strong></li>
<li><code>Replace()</code> （替换整个队列的内容）</li>
<li><strong><code>Resync()</code></strong></li>
</ul>
<p>前几个方法比较常规，就是一些增删改查的方法。不过需要注意的是，这个 FIFO 在 Delete 时只是删去它在 map 里的对象，不会删去 queue 里的 id，而是在 Pop 时检查一下这个 id 是不是存在于 map 里就行了，相当于是一种 lazy 操作，因为动态维护 queue 队列里的顺序比较麻烦。</p>
<p>当然因为这个 lazy 操作会出现一种情况，就是 queue 里的 id 数和 map 里的 item 数不一致，那么就需要 <code>Resync()</code> 方法来进行同步了。它会直接遍历比较 queue 和 map，把不在 queue 里的 item 全部加到 queue 的末尾。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/fifo.go</span></div><div class="line"></div><div class="line"><span class="comment">// Resync will touch all objects to put them into the processing queue</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *FIFO)</span> <span class="title">Resync</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line">    f.lock.Lock()</div><div class="line">    <span class="keyword">defer</span> f.lock.Unlock()</div><div class="line"></div><div class="line">    inQueue := sets.NewString()</div><div class="line">    <span class="keyword">for</span> _, id := <span class="keyword">range</span> f.queue &#123;</div><div class="line">        inQueue.Insert(id) <span class="comment">// queue 里现在有的所有id</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> id := <span class="keyword">range</span> f.items &#123; <span class="comment">// 遍历map里的所有key,如果不在queue里就扔到queue末尾曲</span></div><div class="line">        <span class="keyword">if</span> !inQueue.Has(id) &#123; </div><div class="line">            f.queue = <span class="built_in">append</span>(f.queue, id)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(f.queue) &gt; <span class="number">0</span> &#123;</div><div class="line">        f.cond.Broadcast()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最重要的是 Pop 方法的实现：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/fifo.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *FIFO)</span> <span class="title">Pop</span><span class="params">(process PopProcessFunc)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</div><div class="line">    f.lock.Lock()</div><div class="line">    <span class="keyword">defer</span> f.lock.Unlock()</div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(f.queue) == <span class="number">0</span> &#123;</div><div class="line">            f.cond.Wait()</div><div class="line">        &#125;</div><div class="line">        id := f.queue[<span class="number">0</span>]</div><div class="line">        f.queue = f.queue[<span class="number">1</span>:] <span class="comment">// 从队列里拿出第一个item的id</span></div><div class="line">        <span class="keyword">if</span> f.initialPopulationCount &gt; <span class="number">0</span> &#123;</div><div class="line">            f.initialPopulationCount--</div><div class="line">        &#125;</div><div class="line">        item, ok := f.items[id]</div><div class="line">        <span class="keyword">if</span> !ok &#123;</div><div class="line">            <span class="comment">// Item may have been deleted subsequently.</span></div><div class="line">            <span class="keyword">continue</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果id在map里不存在，那么跳过它</span></div><div class="line">        <span class="built_in">delete</span>(f.items, id) <span class="comment">// 删掉map里对应的item</span></div><div class="line">        err := process(item) <span class="comment">// process方法会阻塞这个Pop方法直到这个item变为ready状态</span></div><div class="line">        <span class="keyword">if</span> e, ok := err.(ErrRequeue); ok &#123;</div><div class="line">            f.addIfNotPresent(id, item)</div><div class="line">            err = e.Err</div><div class="line">        &#125;<span class="comment">// 如果出现错误再次放回队列里</span></div><div class="line">        <span class="keyword">return</span> item, err</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Pop 方法里会从 queue 中拿出第一个 item 的 id，检查它是不是在 map 里，然后调用 process() 方法判断它是不是 ready 状态，最后返回这个 item。</p>
<p>阅读这里比较疑惑的是，实际 k8s 代码中貌似并没有实现这个 <strong>process</strong> 方法，可以看到在 <code>pkg/client/cache/fifo.go</code> 中有一个 Pop 方法的 helper，对方法进行了封装，而在封装中可以看到，传入的 <code>process()</code> 方法是个匿名函数，只是简单的把传入的 item 赋值给外部的 result 然后返回，并没有 check 这个 item 是否 ready。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/fifo.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pop</span><span class="params">(queue Queue)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line">    <span class="keyword">var</span> result <span class="keyword">interface</span>&#123;&#125;</div><div class="line">    queue.Pop(<span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</div><div class="line">        result = obj</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后需要提一下的就是这个 <code>keyFunc</code> 了。从 FIFO 类的定义上看，它是用于获取一个 item 的 key 的方法。而在 FIFO 实例化时，实际上传入的是 <code>MetaNamespaceKeyFunc()</code> 方法，获取 Pod 的 meta 信息里 <code>namespace/name</code> 或者 <code>name</code>。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//pkg/client/cache/store.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">MetaNamespaceKeyFunc</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> key, ok := obj.(ExplicitKey); ok &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">string</span>(key), <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    meta, err := meta.Accessor(obj)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>, fmt.Errorf(<span class="string">"object has no meta: %v"</span>, err)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(meta.GetNamespace()) &gt; <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> meta.GetNamespace() + <span class="string">"/"</span> + meta.GetName(), <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> meta.GetName(), <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DeltaFIFO-Queue"><a href="#DeltaFIFO-Queue" class="headerlink" title="DeltaFIFO Queue"></a>DeltaFIFO Queue</h3><p>在 k8s 的 cache 中还提供了一种叫做 <strong>DeltaFIFO</strong> 的队列，相比于 FIFO 队列，它的作用不一样，它是用于储存每个 Pod 的事件（包括 Delete, Update, Add）。这个方法是在 <a href="https://github.com/kubernetes/kubernetes/issues/4877" target="_blank" rel="external">ISSUE#4877</a> 中提出的，因为某些情况下控制器需要知道调度器中队列的操作事件，并且添加 watcher 来针对事件来做出响应，这里也简单的过一下。</p>
<p>首先 delta 的类型定义有 <code>Added</code>，<code>Updated</code>，<code>Deleted</code>，<code>Sync</code> 这四种，分别是在队列进行添加、更新、删除和同步操作时加入的事件。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/delta_fifo.go</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">    Added   DeltaType = <span class="string">"Added"</span></div><div class="line">    Updated DeltaType = <span class="string">"Updated"</span></div><div class="line">    Deleted DeltaType = <span class="string">"Deleted"</span></div><div class="line">    <span class="comment">// The other types are obvious. You'll get Sync deltas when:</span></div><div class="line">    <span class="comment">//  * A watch expires/errors out and a new list/watch cycle is started.</span></div><div class="line">    <span class="comment">//  * You've turned on periodic syncs.</span></div><div class="line">    <span class="comment">// (Anything that trigger's DeltaFIFO's Replace() method.)</span></div><div class="line">    Sync DeltaType = <span class="string">"Sync"</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>Delta 对象存储了<strong>修改的类型（Type）</strong>和<strong>修改在哪个对象上（Object)</strong>。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/delta_fifo.go</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Delta <span class="keyword">struct</span> &#123;</div><div class="line">    Type   DeltaType</div><div class="line">    Object <span class="keyword">interface</span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样这个队列和 FIFO 类似，也是用 map 存 Deltas，用 queue 存 id。稍微不同的地方上，对这个队列的 <code>Add()</code>，<code>Update()</code>， <code>Delete()</code> 操作是把相应的 Delta <strong>添加</strong> 到队列里去，也就是说这个队列始终是在往里添加东西（Delta)，而外部的 Watcher 则在不断的从这个 DeltaFIFO 中取 Delta 来处理。也就是我们常说的 <strong>Producer/Consumer</strong> 的模型。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>和之前看的 Mesos 中的 DRF 算法不同，k8s 中使用 FIFO 队列来维护每个 Pod 进入调度器的顺序。当然 Mesos 用 DRF 也是考虑在两层调度框架上进行公平调度，而 k8s 只关心进来的 Pod 的先后顺序。</p>
<p>再和上篇文章说到的内容结合，k8s 的调度实际上是基于<strong>先后顺序（FIFO），节点过滤（predicates）和节点打分（prioritizers）</strong>来做到从 Pod 到 Node 的调度过程。</p>
<p>最后，调度器中 FIFO 当然也是最简单和最常使用的队列模式，或许之后可以为 k8s 增加更多模式的调度器。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[kubernetes源码阅读 - scheduler]]></title>
      <url>http://blog.jetmuffin.com/2016/11/24/kubernetes-code-reading-scheduler/</url>
      <content type="html"><![CDATA[<p>阅读 scheduler 部分的源码我们从控制流的低端向上延伸去阅读。</p>
<p><img src="http://cdn.jetmuffin.com/posts/kubernetes.jpg" alt="k8s"></p>
<a id="more"></a>
<h2 id="Scheduler-入口"><a href="#Scheduler-入口" class="headerlink" title="Scheduler 入口"></a>Scheduler 入口</h2><p>首先定位到 <code>plugin/cmd/scheduler.go</code> 这个文件。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// plugin/cmd/scheduler.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    s := options.NewSchedulerServer()</div><div class="line">    s.AddFlags(pflag.CommandLine) <span class="comment">// 解析参数</span></div><div class="line"></div><div class="line">    flag.InitFlags()</div><div class="line">    logs.InitLogs()</div><div class="line">    <span class="keyword">defer</span> logs.FlushLogs()</div><div class="line"></div><div class="line">    verflag.PrintAndExitIfRequested()</div><div class="line"></div><div class="line">    app.Run(s) <span class="comment">// 启动调度器</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面这段代码可以看出这是从 command 启动 scheduler 的入口，它解析了 scheduler 的参数，同时调用了 <code>app.Run(s)</code>来启动 scheduler。</p>
<p>按着这个走向找到 <code>app.Run(s)</code> 的具体实现：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// plugin/cmd/kube-scheduler/app/server.go</span></div><div class="line"></div><div class="line"><span class="comment">// Run runs the specified SchedulerServer.  This should never exit.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">(s *options.SchedulerServer)</span> <span class="title">error</span></span> &#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line"></div><div class="line">    sched := scheduler.New(config) <span class="comment">// 新建调度器</span></div><div class="line"></div><div class="line">    run := <span class="function"><span class="keyword">func</span><span class="params">(_ &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</div><div class="line">        sched.Run() <span class="comment">// 正式启动调度器入口</span></div><div class="line">        <span class="keyword">select</span> &#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到在这段代码片段中，通过 <code>sched := scheduler.New(config)</code> 新建了一个 scheduler 对象，并且调用它的 <code>Run()</code> 成员方法，同时需要特意留意 <code>config</code>。继续追踪到 scheduler 类的定义中取：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// plugin/pkg/scheduler/scheduler.go</span></div><div class="line"></div><div class="line"><span class="comment">// Run begins watching and scheduling. It starts a goroutine and returns immediately.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scheduler)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">go</span> wait.Until(s.scheduleOne, <span class="number">0</span>, s.config.StopEverything)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>Scheduler.Run()</code> 方法中，Scheduler 通过 <code>wait.Until()</code> 工具，不停得调用 <code>Scheduler.scheduleOne()</code> 方法直到收到停止信号。我们接着看 <code>scheduleOne()</code> 方法：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// plugin/pkg/scheduler/scheduler.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scheduler)</span> <span class="title">scheduleOne</span><span class="params">()</span></span> &#123;</div><div class="line">    pod := s.config.NextPod() <span class="comment">// 获取下一个待调度的pod</span></div><div class="line"></div><div class="line">    glog.V(<span class="number">3</span>).Infof(<span class="string">"Attempting to schedule pod: %v/%v"</span>, pod.Namespace, pod.Name)</div><div class="line">    start := time.Now()</div><div class="line">    dest, err := s.config.Algorithm.Schedule(pod, s.config.NodeLister) <span class="comment">// 调用算法进行调度</span></div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        glog.V(<span class="number">1</span>).Infof(<span class="string">"Failed to schedule pod: %v/%v"</span>, pod.Namespace, pod.Name)</div><div class="line">        s.config.Error(pod, err)</div><div class="line">        s.config.Recorder.Eventf(pod, api.EventTypeWarning, <span class="string">"FailedScheduling"</span>, <span class="string">"%v"</span>, err)</div><div class="line">        s.config.PodConditionUpdater.Update(pod, &amp;api.PodCondition&#123;</div><div class="line">            Type:   api.PodScheduled,</div><div class="line">            Status: api.ConditionFalse,</div><div class="line">            Reason: api.PodReasonUnschedulable,</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    metrics.SchedulingAlgorithmLatency.Observe(metrics.SinceInMicroseconds(start))</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Scheduler 首先通过 <code>config.NextPod()</code> 来获取到当前要进行调度的一个 pod，然后调用 <code>config.Algorithm.Schedule()</code> 方法来对这个 pod 实际进行调度。从这种写法上我们可以猜测到 Algorithm 这儿用的是工厂模式。若根据该算法调度成功，那么将这个时间进行记录。否则调用 <code>config.Error()</code> 来进行错误处理。</p>
<p>这里有三个比较重点的内容：</p>
<ul>
<li>config.NextPod()</li>
<li>config.Algorithm.schedule()</li>
<li>config.Error()</li>
</ul>
<p>它们均来自 <code>Config</code> 类，那么我们先看这个类，再接下去探索这两个方法。<code>Config</code> 类的定义也在这个文件中：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// plugin/pkg/scheduler/scheduler.go</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="comment">// It is expected that changes made via SchedulerCache will be observed</span></div><div class="line">    <span class="comment">// by NodeLister and Algorithm.</span></div><div class="line">    SchedulerCache schedulercache.Cache</div><div class="line">    NodeLister     algorithm.NodeLister</div><div class="line">    Algorithm      algorithm.ScheduleAlgorithm <span class="comment">// 调度算法</span></div><div class="line">    Binder         Binder</div><div class="line">    <span class="comment">// PodConditionUpdater is used only in case of scheduling errors. If we succeed</span></div><div class="line">    <span class="comment">// with scheduling, PodScheduled condition will be updated in apiserver in /bind</span></div><div class="line">    <span class="comment">// handler so that binding and setting PodCondition it is atomic.</span></div><div class="line">    PodConditionUpdater PodConditionUpdater</div><div class="line"></div><div class="line">    <span class="comment">// NextPod should be a function that blocks until the next pod</span></div><div class="line">    <span class="comment">// is available. We don't use a channel for this, because scheduling</span></div><div class="line">    <span class="comment">// a pod may take some amount of time and we don't want pods to get</span></div><div class="line">    <span class="comment">// stale while they sit in a channel.</span></div><div class="line">    NextPod <span class="function"><span class="keyword">func</span><span class="params">()</span> *<span class="title">api</span>.<span class="title">Pod</span> // 获取下一个<span class="title">pod</span>的抽象方法</span></div><div class="line"></div><div class="line">    // <span class="title">Error</span> <span class="title">is</span> <span class="title">called</span> <span class="title">if</span> <span class="title">there</span> <span class="title">is</span> <span class="title">an</span> <span class="title">error</span>. <span class="title">It</span> <span class="title">is</span> <span class="title">passed</span> <span class="title">the</span> <span class="title">pod</span> <span class="title">in</span></div><div class="line">    // <span class="title">question</span>, <span class="title">and</span> <span class="title">the</span> <span class="title">error</span></div><div class="line">    <span class="title">Error</span> <span class="title">func</span><span class="params">(*api.Pod, error)</span> // 处理调度出现的错误</div><div class="line"></div><div class="line">    // <span class="title">Recorder</span> <span class="title">is</span> <span class="title">the</span> <span class="title">EventRecorder</span> <span class="title">to</span> <span class="title">use</span></div><div class="line">    <span class="title">Recorder</span> <span class="title">record</span>.<span class="title">EventRecorder</span></div><div class="line"></div><div class="line">    // <span class="title">Close</span> <span class="title">this</span> <span class="title">to</span> <span class="title">shut</span> <span class="title">down</span> <span class="title">the</span> <span class="title">scheduler</span>.</div><div class="line">    <span class="title">StopEverything</span> <span class="title">chan</span> <span class="title">struct</span>&#123;&#125; <span class="comment">// 停止信号</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Config</code> 类传入了 scheduler 必要的各种参数，相当于原来隶属于 scheduler 的成员变量通过它传入。<code>Config</code> 类在 <code>plugin/pkg/scheduler/factory</code> 中被实例化，相应的抽象方法也被传入实际的引用方法。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// plugin/pkg/scheduler/factory</span></div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line">algo := scheduler.NewGenericScheduler(f.schedulerCache, predicateFuncs, predicateMetaProducer, priorityConfigs, priorityMetaProducer, extenders)</div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> &amp;scheduler.Config&#123;</div><div class="line">      SchedulerCache: f.schedulerCache,</div><div class="line">      <span class="comment">// The scheduler only needs to consider schedulable nodes.</span></div><div class="line">      NodeLister:          f.NodeLister.NodeCondition(getNodeConditionPredicate()),</div><div class="line">      Algorithm:           algo,</div><div class="line">      Binder:              &amp;binder&#123;f.Client&#125;,</div><div class="line">      PodConditionUpdater: &amp;podConditionUpdater&#123;f.Client&#125;,</div><div class="line">      NextPod: <span class="function"><span class="keyword">func</span><span class="params">()</span> *<span class="title">api</span>.<span class="title">Pod</span></span> &#123;</div><div class="line">          <span class="keyword">return</span> f.getNextPod()</div><div class="line">      &#125;,</div><div class="line">      Error:          f.makeDefaultErrorFunc(&amp;podBackoff, f.PodQueue),</div><div class="line">      StopEverything: f.StopEverything,</div><div class="line">  &#125;, <span class="literal">nil</span></div></pre></td></tr></table></figure>
<h2 id="获取待调度的-Pod"><a href="#获取待调度的-Pod" class="headerlink" title="获取待调度的 Pod"></a>获取待调度的 Pod</h2><p>首先看 <code>NextPod</code> 参数，从类 <code>Config</code> 的定义中的注释可以看到，这个参数是一个获取下一个 pod，并且阻塞该方法直到下一个 pod 可用为止。并且它的实现没有用 chanel，原因是一旦放到 chanel 里，这个 pod 便无法修改。这个 参数是在实例化时传入的获取下一个 pod 的方法。传入的代码也在这个文件中：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// plugin/pkg/scheduler/factory</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *ConfigFactory)</span> <span class="title">getNextPod</span><span class="params">()</span> *<span class="title">api</span>.<span class="title">Pod</span></span> &#123;</div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        pod := cache.Pop(f.PodQueue).(*api.Pod)</div><div class="line">        <span class="keyword">if</span> f.responsibleForPod(pod) &#123;</div><div class="line">            glog.V(<span class="number">4</span>).Infof(<span class="string">"About to try and schedule pod %v"</span>, pod.Name)</div><div class="line">            <span class="keyword">return</span> pod</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从这段代码可以看出，获取下一个待调度的 pod 似乎是从一个队列中 pop 出一个 pod 来实现的。使用的来源是 <code>pkg/client/cache</code>，继续追踪：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pop</span><span class="params">(queue Queue)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line">    <span class="keyword">var</span> result <span class="keyword">interface</span>&#123;&#125;</div><div class="line">    queue.Pop(<span class="function"><span class="keyword">func</span><span class="params">(obj <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</div><div class="line">        result = obj</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法是个代理方法，是对 <code>Queue</code> 类中的 <code>Pop()</code> 方法进行了一层封装，于是自然看到对应的 <code>Queue.Pop()</code>，它是在类 <code>FIFO</code> 中的，那么这块儿也逐渐明了了:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// pkg/client/cache/fifo.go</span></div><div class="line"></div><div class="line"><span class="comment">// Pop waits until an item is ready and processes it. If multiple items are</span></div><div class="line"><span class="comment">// ready, they are returned in the order in which they were added/updated.</span></div><div class="line"><span class="comment">// The item is removed from the queue (and the store) before it is processed,</span></div><div class="line"><span class="comment">// so if you don't successfully process it, it should be added back with</span></div><div class="line"><span class="comment">// AddIfNotPresent(). process function is called under lock, so it is safe</span></div><div class="line"><span class="comment">// update data structures in it that need to be in sync with the queue.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *FIFO)</span> <span class="title">Pop</span><span class="params">(process PopProcessFunc)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</div><div class="line">    f.lock.Lock()</div><div class="line">    <span class="keyword">defer</span> f.lock.Unlock()</div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(f.queue) == <span class="number">0</span> &#123;</div><div class="line">            f.cond.Wait()</div><div class="line">        &#125;</div><div class="line">        id := f.queue[<span class="number">0</span>]</div><div class="line">        f.queue = f.queue[<span class="number">1</span>:]</div><div class="line">        <span class="keyword">if</span> f.initialPopulationCount &gt; <span class="number">0</span> &#123;</div><div class="line">            f.initialPopulationCount--</div><div class="line">        &#125;</div><div class="line">        item, ok := f.items[id]</div><div class="line">        <span class="keyword">if</span> !ok &#123;</div><div class="line">            <span class="comment">// Item may have been deleted subsequently.</span></div><div class="line">            <span class="keyword">continue</span></div><div class="line">        &#125;</div><div class="line">        <span class="built_in">delete</span>(f.items, id)</div><div class="line">        err := process(item)</div><div class="line">        <span class="keyword">if</span> e, ok := err.(ErrRequeue); ok &#123;</div><div class="line">            f.addIfNotPresent(id, item)</div><div class="line">            err = e.Err</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> item, err</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法算是这条路径的最后一个追踪的节点了。总结一下这条路径：</p>
<ol>
<li>kubernetes 的 cache 中维护了一个先进先出的队列 <code>FIFO</code>，它不同于 golang 中的 chanel，它支持对队列中的元素进行更新、删除等操作。</li>
<li>这个队列的 <code>FIFO.Pop()</code> 方法会队首元素（一个 pod）到达 ready 状态，然后将它弹出，否则阻塞该方法。</li>
<li><code>Scheduler</code> 类初始化时使用参数 <code>Config</code>，<code>Config</code> 中的 <code>NextPod()</code> 默认使用 <code>FIFO.Pop()</code>，当 <code>Scheduler</code> 需要进行调度时使用该方法得到下一个待调度的 pod。</li>
</ol>
<h2 id="使用调度算法进行实时调度"><a href="#使用调度算法进行实时调度" class="headerlink" title="使用调度算法进行实时调度"></a>使用调度算法进行实时调度</h2><p>回到 <code>Config</code> 类的第二个重要参数 <code>Algorithm</code>,它是对 pod 进行调度的实体：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// plugin/pkg/scheduler/factory/factory.go</span></div><div class="line"></div><div class="line">algo := scheduler.NewGenericScheduler(f.schedulerCache, predicateFuncs, predicateMetaProducer, priorityConfigs, priorityMetaProducer, extenders)</div></pre></td></tr></table></figure>
<p>可以看到默认情况下，<code>Algorithm</code> 是用的通用调度器，接着看这个 <code>GenericScheduler</code>：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// plugin/pkg/scheduler/generic_scheduler.go</span></div><div class="line"></div><div class="line"><span class="comment">// Schedule tries to schedule the given pod to one of node in the node list.</span></div><div class="line"><span class="comment">// If it succeeds, it will return the name of the node.</span></div><div class="line"><span class="comment">// If it fails, it will return a Fiterror error with reasons.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *genericScheduler)</span> <span class="title">Schedule</span><span class="params">(pod *api.Pod, nodeLister algorithm.NodeLister)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> trace *util.Trace</div><div class="line">    <span class="keyword">if</span> pod != <span class="literal">nil</span> &#123;</div><div class="line">        trace = util.NewTrace(fmt.Sprintf(<span class="string">"Scheduling %s/%s"</span>, pod.Namespace, pod.Name))</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        trace = util.NewTrace(<span class="string">"Scheduling &lt;nil&gt; pod"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">defer</span> trace.LogIfLong(<span class="number">100</span> * time.Millisecond)</div><div class="line"></div><div class="line">    nodes, err := nodeLister.List() <span class="comment">// 获取所有节点</span></div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nodes) == <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>, ErrNoNodesAvailable</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Used for all fit and priority funcs.</span></div><div class="line">    err = g.cache.UpdateNodeNameToInfoMap(g.cachedNodeInfoMap)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// TODO(harryz) Check if equivalenceCache is enabled and call scheduleWithEquivalenceClass here</span></div><div class="line"></div><div class="line">    trace.Step(<span class="string">"Computing predicates"</span>)</div><div class="line">    filteredNodes, failedPredicateMap, err := findNodesThatFit(pod, g.cachedNodeInfoMap, nodes, g.predicates, g.extenders, g.predicateMetaProducer)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(filteredNodes) == <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>, &amp;FitError&#123;</div><div class="line">            Pod:              pod,</div><div class="line">            FailedPredicates: failedPredicateMap,</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    trace.Step(<span class="string">"Prioritizing"</span>)</div><div class="line">    metaPrioritiesInterface := g.priorityMetaProducer(pod, g.cachedNodeInfoMap)</div><div class="line">    priorityList, err := PrioritizeNodes(pod, g.cachedNodeInfoMap, metaPrioritiesInterface, g.prioritizers, filteredNodes, g.extenders)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    trace.Step(<span class="string">"Selecting host"</span>)</div><div class="line">    <span class="keyword">return</span> g.selectHost(priorityList)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，GenericScheduler 进行调度为以下过程：</p>
<ol>
<li>从 <code>NodeList</code> 获取所有的节点</li>
<li>通过所给的断言函数（<code>predicates</code>）对所有节点进行过滤，选出符合的节点（<code>findNodesThatFit()</code>）</li>
<li>根据所给的打分函数（<code>prioritizers</code>）对过滤后的节点进行排序（<code>PrioritizeNodes()</code>）</li>
<li>通过 round-robin 方式依次获取分数最高的节点来运行 pod。</li>
</ol>
<h2 id="调度失败"><a href="#调度失败" class="headerlink" title="调度失败"></a>调度失败</h2><p>在 <code>Config</code> 类的 <code>Error</code> 参数中传入了调度失败的处理方法 <code>makeDefaultErrorFunc()</code> 对调度失败的 pod 进行重调度处理。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// plugin/pkg/scheduler/factory/factory.go</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(factory *ConfigFactory)</span> <span class="title">makeDefaultErrorFunc</span><span class="params">(backoff *podBackoff, podQueue *cache.FIFO)</span> <span class="title">func</span><span class="params">(pod *api.Pod, err error)</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(pod *api.Pod, err error)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> err == scheduler.ErrNoNodesAvailable &#123;</div><div class="line">            glog.V(<span class="number">4</span>).Infof(<span class="string">"Unable to schedule %v %v: no nodes are registered to the cluster; waiting"</span>, pod.Namespace, pod.Name)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            glog.Errorf(<span class="string">"Error scheduling %v %v: %v; retrying"</span>, pod.Namespace, pod.Name, err)</div><div class="line">        &#125;</div><div class="line">        backoff.gc() <span class="comment">// 清空backoff列表</span></div><div class="line">        <span class="comment">// Retry asynchronously.</span></div><div class="line">        <span class="comment">// Note that this is extremely rudimentary and we need a more real error handling path.</span></div><div class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">            <span class="keyword">defer</span> runtime.HandleCrash()</div><div class="line">            podID := types.NamespacedName&#123;</div><div class="line">                Namespace: pod.Namespace,</div><div class="line">                Name:      pod.Name,</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            entry := backoff.getEntry(podID)</div><div class="line">            <span class="keyword">if</span> !entry.TryWait(backoff.maxDuration) &#123;</div><div class="line">                glog.Warningf(<span class="string">"Request for pod %v already in flight, abandoning"</span>, podID)</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">// Get the pod again; it may have changed/been scheduled already.</span></div><div class="line">            getBackoff := initialGetBackoff</div><div class="line">            <span class="keyword">for</span> &#123;</div><div class="line">                pod, err := factory.Client.Core().Pods(podID.Namespace).Get(podID.Name)</div><div class="line">                <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(pod.Spec.NodeName) == <span class="number">0</span> &#123;</div><div class="line">                        podQueue.AddIfNotPresent(pod) <span class="comment">// 重新将pod加入调度队列</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> errors.IsNotFound(err) &#123;</div><div class="line">                    glog.Warningf(<span class="string">"A pod %v no longer exists"</span>, podID)</div><div class="line">                    <span class="keyword">return</span></div><div class="line">                &#125;</div><div class="line">                glog.Errorf(<span class="string">"Error getting pod %v for retry: %v; retrying..."</span>, podID, err)</div><div class="line">                <span class="keyword">if</span> getBackoff = getBackoff * <span class="number">2</span>; getBackoff &gt; maximalGetBackoff &#123;</div><div class="line">                    getBackoff = maximalGetBackoff</div><div class="line">                &#125;</div><div class="line">                time.Sleep(getBackoff)</div><div class="line">            &#125;</div><div class="line">        &#125;()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从该处理方法看出，一旦出现调度失败，k8s 并不会阻塞调度过程，而是将调度失败的 pod 扔到这个失败处理方法里，而这个方法是通过异步的方式进行重试。k8s 从 backoff 这个列表中拿出指定的 pod，然后将它再次放到 <code>FIFO</code> 队列里，期间如果继续失败，再扔进 backoff 里异步等待处理。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>k8s 的代码量非常庞大，需要快速定位源码比较困难，而采用这种根据从入口不断深入的阅读方式会减少很多工作量，只关心一部分的代码。当然这也无法从一个宏观的角度去看整个代码的设计，但是对于当前的工作已经足够。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[How to fix '/bin/rm: Argument list too long]]></title>
      <url>http://blog.jetmuffin.com/2016/11/13/How-to-fix-bin-rm-Argument-list-too-long/</url>
      <content type="html"><![CDATA[<p>做运维时发现系统的磁盘满了，检查发现磁盘的 <code>/tmp</code> 目录下装满了东西，于是很简单的想用 <code>rm -rf /tmp/*</code> 来删除，结果发现报错：<code>bash: /bin/rm: Argument list too long</code>。找了找方法解决它。<br><a id="more"></a></p>
<p>当执行命令时：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bin/rm -rf ./*</div></pre></td></tr></table></figure>
<p>得到了错误提示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash: /bin/rm: Argument list too long</div></pre></td></tr></table></figure>
<p>查看发现，<code>rm</code> 命令也有参数长度的限制，所以需要用管道将命令分批次输入到 <code>rm</code> 中去。</p>
<p>因此 <code>xargs</code> 就派上用场了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name &quot;_MEI*&quot; | xargs /bin/rm -rf</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name &quot;_MEI*&quot; -print0 | xargs /bin/rm -rf</div></pre></td></tr></table></figure>
<p>或者更直接的用 <code>find</code> 的 <code>-delete</code> 参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name &quot;_MEI*&quot; -delete</div></pre></td></tr></table></figure>
<p>即可解决。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Difference between Mesos and Kubernetes]]></title>
      <url>http://blog.jetmuffin.com/2016/10/24/Difference-between-Mesos-and-Kubernetes/</url>
      <content type="html"><![CDATA[<p>自 Docker 大火之后，Swarm，Mesos，Kubernetes 这类围绕 Docker 容器展开的集群开源管理项目也逐渐风起云涌。本文主要从多个方面整理当前主流的两个容器编排框架 Mesos 和 Kubernetes 的区别。</p>
<a id="more"></a>  
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Apache Mesos 始于加州大学伯克利分校的一个项目，用来驱动 Twitter 的底层基础架构，并且在之后成为许多大公司，如 eBay 和 Airbnb 的重要工具。之后 Mesos 的作者之一 Ben Hindman 创立了商业化公司 Mesosphere，并为 Mesos 社区贡献了许多持续性的开发和支持工具。</p>
<p>而 Kubernetes 则是出自 Google 公司，基于他们在 Borg 上的经验总结，推出的极具“谷歌风格”的开源集群容器管理平台。Kubernetes 和 Borg 的开发和维护是由 Google 的同一个团队进行的。</p>
<h2 id="社区人气"><a href="#社区人气" class="headerlink" title="社区人气"></a>社区人气</h2><p>在资源和容器管理方面，大公司（诸如微软、BAT 等）会自己造内部的轮子进行使用，而规模较小的公司则采用开源项目或基于开源项目进行二次开发。而在社区上，大家对 Docker 容器编排技术的选择更趋向于哪些方面？</p>
<p><img src="/uploads/images/2016/10/24/1.png" alt="rihe.png"></p>
<p>Caicloud 在 2016 年 2 月统计了包括 Kubernetes, Swarm, Compose, Mesos, Docker Machine, Hyper, Containerd 在内的7个项目在 Github 上的 fork 数和被 star 数等。</p>
<h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>在 fork 上的数据，Kubernetes 以 3699 次遥遥领先于其他所有的编排框架，而 Mesos 仅有 738 次 fork。而在笔者写这篇文章时（2016 年 10 月 24 日），Kubernetes 的 fork 数已经超过了 5800 次，而 Mesos 大概在 1050 次 fork。</p>
<p><img src="/uploads/images/2016/10/24/2.png" alt="fork.png"></p>
<h3 id="star"><a href="#star" class="headerlink" title="star"></a>star</h3><p>star 的数据上 Kubernetes 依然以 12888 颗星数雄踞榜首，而 Mesos 仅有 2056 次 star。而直到今天，Kubernetes 已经拿到了近 17800 颗 star，而 Mesos 的 star 数量仅在 2600 次。</p>
<p><img src="/uploads/images/2016/10/24/3.png" alt="star.png"></p>
<p>从 fork 和 star 数量可以看出两个框架在社区中的受欢迎程度，Kubernetes 远大于 Mesos。当然，由于 Kubernetes 出自名门，其中自然也带有一些来自于对 Google 公司的影响，而 Mesos 则更显得稍微小众一些。当然，社区的支持度越大，对开源框架的贡献者则越多，那么这个框架的发展则越迅速。</p>
<h2 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h2><p>虽然同样被视为容器编排框架，但是 Kubernetes 和 Mesos 的设计理念完全不同。</p>
<p>## </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Debian下编译shadowsocks-qt5]]></title>
      <url>http://blog.jetmuffin.com/2016/10/18/compile-shadowsocks-qt5-on-debian/</url>
      <content type="html"><![CDATA[<p>平时开发用的是 debian 的 linux 发行版，而 shadowsocks-qt5 没有提供 debian 的 release 版本，于是得自己动手编译，编译的时候会遇到许多坑，这里记录一下。</p>
<a id="more"></a>
<h3 id="libQtshadowsocks"><a href="#libQtshadowsocks" class="headerlink" title="libQtshadowsocks"></a>libQtshadowsocks</h3><p>首先需要编译 shadowsocks 的 lib 库 <code>libQtShadowsocks</code>，从 <a href="https://github.com/shadowsocks/libQtShadowsocks/releases" target="_blank" rel="external">github/libQtshadowsocks</a> 上找到稳定版本，直接下载源码的 .tar.gz 文件到本地，解压，并进入文件夹。</p>
<p>wiki 上对编译的依赖描述如下：</p>
<blockquote>
<p>Qt &gt;= 5.2 (qt5-qtbase-devel and qt5-qttools in Fedora, qtbase5-dev and qt5-qmake in Debian/Ubuntu)<br>Botan &gt;= 1.10 (botan-devel in Fedora, libbotan1.10-dev in Debian/Ubuntu)<br>A C++ Compiler that supports C++11 features (i.e. GCC &gt;= 4.7) </p>
</blockquote>
<p>但是只安装这些依赖，在 debian 下会出现 <code>botan-1.10 development package not found</code> 的错误，但是检查后发现 <code>libbotan1.10-dev</code> 包已经安装了。</p>
<p>后来发现是有其他的依赖没满足，所以干脆一次性把所有依赖全部装了，就不会出现问题了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install qt5-qmake qtbase5-dev libqrencode-dev libappindicator-dev libzbar-dev libbotan1.10-dev</div></pre></td></tr></table></figure>
<p>然后进入进行编译，编译时可以选择 <code>INSTALL_PREFIX</code>，它默认是 <code>/usr</code> 目录，如果自行更改会有另外的问题，下面会提到。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">qmake</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h3 id="shadowsocks-qt5"><a href="#shadowsocks-qt5" class="headerlink" title="shadowsocks-qt5"></a>shadowsocks-qt5</h3><p>编译安装完 <code>libQtShadowsocks</code> 后就可以编译 <code>shadowsocks-qt5</code> 了。从 <a href="https://github.com/shadowsocks/shadowsocks-qt5" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks-qt5</a> 上 clone ss-qt5 的源码，然后进入目录编译：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/shadowsocks/shadowsocks-qt5.git</div><div class="line">cd shadowsocks-qt5</div><div class="line">qmake</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>同样这里的 <code>qmake</code> 可以指定 <code>INSTALL_PREFIX</code>, 默认为 <code>/usr</code>。安装后 ss-qt5 会在 <code>/usr/bin</code> 文件夹中，命令行直接运行 <code>ss-qt5</code> 或者在图形界面中直接搜索就可以运行了。</p>
<h3 id="by-the-way"><a href="#by-the-way" class="headerlink" title="by the way"></a>by the way</h3><p>如果在运行时仍然碰到 <code>libQtShadowsocks.so.1 not found</code> 这个问题，那么原因就可能是上面所提到的编译 <code>libQtShadowsocks</code> 的问题了。默认指定的 <code>INSTALL_PREFIX</code> 为 <code>/usr</code>，即安装到 <code>/usr/lib</code> 中，而这个路径是自动被加到系统的链接库里的。</p>
<p>而如果自行指定了 <code>INSTALL_PREFIX</code>，例如我选择了 <code>/usr/local</code>，那么这个 so 文件会被安装到 <code>/usr/local/lib</code>，而这个目录不是默认被加到系统链接库里的，那么需要手动加进去，解决方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo &quot;/usr/local/lib&quot; &gt;&gt; &quot;/etc/ld.so.conf&quot;</div><div class="line">/sbin/ldconfig</div></pre></td></tr></table></figure>
<p>然后再运行 ss-qt5 就没有问题了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用 gh-md-doc 生成 markdown 文章结构]]></title>
      <url>http://blog.jetmuffin.com/2016/09/13/use-gh-md-doc-to-generate-toc-of-blog/</url>
      <content type="html"><![CDATA[<p>本篇技巧来自于我在 <a href="http://www.iqiyi.com" target="_blank" rel="external">iQiyi</a> 的云平台部门实习时的内部分享，主要用于文档编写。<br>在开发开源项目或进行团队协作时，总要写一些文档，并把代码托管在 git 上，对于长篇文档希望能够生成文档的结构，这里就用到了一个非常好的插件 <a href="https://github.com/ekalinin/github-markdown-toc" target="_blank" rel="external">gh-md-toc</a>。</p>
<a id="more"></a>
<h2 id="生成-markdown-table-of-contents"><a href="#生成-markdown-table-of-contents" class="headerlink" title="生成 markdown table of contents"></a>生成 markdown table of contents</h2><hr>
<p>常常项目开发的文档都是用 markdown 格式编写，并且以代码的形式托管在 Git 上，<br>同时，那么就可以使用 <a href="https://github.com/ekalinin/github-markdown-toc" target="_blank" rel="external">gh-md-toc</a><br>来生成文档目录。</p>
<p>但是，gh-md-toc 会直接将结果打印到 stout，而我们想要的最好的效果是直接将其添加到文档头部，<br>而不是从 stdout 再复制粘贴，然后还要格式化空行。</p>
<p>以本文档为例，gh-md-toc 生成的 table of contents 如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Table of Contents</div><div class="line">=================</div><div class="line"></div><div class="line">    * [生成 markdown table of contents](#生成-markdown-table-of-contents)</div><div class="line">    * [使用 gh-md-toc 的奇技淫巧](#使用-gh-md-toc-的奇技淫巧)</div><div class="line"></div><div class="line">Created by [gh-md-toc](https://github.com/ekalinin/github-markdown-toc)</div></pre></td></tr></table></figure>
<p>显然，我们需要将这段文字添加到文件的头部，并且<strong>删除第一行空行，在最后一行添加一行空行</strong>。</p>
<h2 id="使用-gh-md-toc-的奇技淫巧"><a href="#使用-gh-md-toc-的奇技淫巧" class="headerlink" title="使用 gh-md-toc 的奇技淫巧"></a>使用 gh-md-toc 的奇技淫巧</h2><p>OK，Let’s Rock!</p>
<p>先看一条命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gh-md-toc file.md | (tail -n +2 &amp;&amp; echo &quot;&quot; &amp;&amp; cat file.md) | sponge file.md</div></pre></td></tr></table></figure>
<p>你会惊讶的发现，这条命令就完成了所有事，为 file.md 生成了 table of<br>contents，并且自动添加在了 file.md 的头部，并且完美的处理了空行。</p>
<p>这里使用了一个好工具 <code>sponge</code>，想想为什么不能直接重定向到 file.md 呢？</p>
<p>但是，追求极致的程序员不会止步，因为上面的命令中 file.md 这个待处理的文件出现了<br>3 次，所以也挺烦人的，对吧，即使使用命令替换也来得不如一次直接。</p>
<p>OK，Let’s Rock Again!</p>
<p>添加一个函数，重定义 gh-md-toc，添加下面的函数定义到你的 shell rc，例如：</p>
<ul>
<li>bash，~/.bashrc</li>
<li>zsh，~/.zshrc</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> gh-md-<span class="function"><span class="title">toc</span></span>() &#123;</div><div class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"gh-md-toc &lt;markdown file&gt;"</span></div><div class="line">      <span class="built_in">return</span> 1</div><div class="line">  <span class="keyword">fi</span></div><div class="line">  /home/chengwei/Github/github-markdown-toc/gh-md-toc <span class="variable">$1</span> | (tail -n +2 &amp;&amp; <span class="built_in">echo</span> <span class="string">""</span> &amp;&amp; cat <span class="variable">$1</span>) | sponge <span class="variable">$1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将上面的 <code>/home/chengwei/Github/github-markdown-toc/gh-md-toc</code> 替换成 gh-md-doc<br>在你的系统上的路径。</p>
<p><strong>注意：如果你把 gh-md-doc 放在了 $PATH 中，必须用绝对路径调用，否则就无限递归了 :-)</strong></p>
<p>最后，source shell rc 配置文件，生效</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">source</span> ~/.bashrc</div><div class="line">OR</div><div class="line">$ <span class="built_in">source</span> ~/.zshrc</div></pre></td></tr></table></figure>
<p>现在，要为某个 markdown 文件添加 table of contents 只需要执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gh-md-toc file.md</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Moore vote algorithm 多数投票算法]]></title>
      <url>http://blog.jetmuffin.com/2016/09/04/moore-vote-algorithm/</url>
      <content type="html"><![CDATA[<p>在刷 leetcode 时，发现一道题目 <a href="https://leetcode.com/problems/majority-element/" target="_blank" rel="external">Majority Element</a>，要求求出数组中出现元素超过 <code>n/2</code> 的元素。思考了许久也只能写出 <code>O(nlogn)</code> 的解法（即用 map 计数）。查阅资料后发现一个比较巧妙的算法 Moore vote algorithm，可以在 <code>O(n)</code> 时间和 <code>O(1)</code> 空间解决这个问题。</p>
<a id="more"></a>
<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>算法的思想很简单，每次从数组中取一对数，如果相同就叠加，如果不同就一起删去，很明显最后留下的肯定是数量最多的一个数。再深入一步实现，只要用一个变量记录<strong>标记元素</strong>和<strong>标记元素的出现次数</strong>，然后找下一个元素，分以下情况：</p>
<ul>
<li>如果下一个元素和标记元素相同，那么标记元素出现次数加1；</li>
<li>如果和标记元素不同，那么标记元素出现次数减1；</li>
<li>如果标记元素变为 0，那么取下一个元素作为标记元素，初始出现次数为1；</li>
</ul>
<p>举个说明性的例子，数列 <code>[2,3,2,2,4,1,2]</code>，标记元素变量 <code>now</code>，出现次数 <code>count</code></p>
<ol>
<li>初始状态（取第一个数）：<code>now:2</code>，<code>count:1</code></li>
<li>取第二个数 <code>3</code>，它和 <code>now</code> 不同，那么 <code>count--</code>，这时候 <code>count = 0</code>，那么拿下一个元素（第三个数）为标记元素 <code>now:2</code>，<code>count:1</code></li>
<li>取第四个数 <code>2</code>，它和 <code>now</code> 相同，那么 <code>count++</code>，状态变为 <code>now:2</code>，<code>count:2</code></li>
<li>取第五个数 <code>4</code>，它和 <code>now</code> 不同，那么 <code>count--</code>，状态变为 <code>now:2</code>，<code>count:1</code></li>
<li>重复以上过程直到结尾，最后 <code>now:2</code>，所以数量超过 <code>n/2</code> 的元素为 2</li>
</ol>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>为了更好实现上述过程，事实上程序的伪代码为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">For i from 0 to len(arr):</div><div class="line">    if count == 0:</div><div class="line">        now = arr[i]</div><div class="line">        count = 1</div><div class="line">    else:</div><div class="line">        if now == arr[i]:</div><div class="line">            count ++</div><div class="line">        else:</div><div class="line">            count --</div></pre></td></tr></table></figure>
<p>即只要标记元素被删去了，那么访问的下一个元素就作为标记元素。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>, now = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.size(); i++) &#123;</div><div class="line">            <span class="keyword">if</span>(count == <span class="number">0</span>) &#123;</div><div class="line">                now = nums[i];</div><div class="line">                count = <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>(now == nums[i]) &#123;</div><div class="line">                    count ++;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    count --;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> now;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.cs.utexas.edu/~moore/best-ideas/mjrty/" target="_blank" rel="external">算法效果演示</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Golang 基础学习（二）类型]]></title>
      <url>http://blog.jetmuffin.com/2016/09/04/go-learning-2/</url>
      <content type="html"><![CDATA[<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>go 语言中有许多的类型，包括字符串、整形、浮点型、布尔型等等，这和一般的语言相同。这些类型之间可以进行基本的运算，这和 C, Java 等语言也是相同的。</p>
<a id="more"></a>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"math/cmplx"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">    flag   <span class="keyword">bool</span>       = <span class="literal">false</span></div><div class="line">    MaxInt <span class="keyword">uint64</span>     = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></div><div class="line">    z      <span class="keyword">complex128</span> = cmplx.Sqrt(<span class="number">-5</span> + <span class="number">12i</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"go"</span> + <span class="string">"lang"</span>)</div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"1+1 = "</span>, <span class="number">1</span>+<span class="number">1</span>)</div><div class="line">    fmt.Println(<span class="string">"7.0/3.0 ="</span>, <span class="number">7.0</span>/<span class="number">3.0</span>)</div><div class="line"></div><div class="line">    fmt.Println(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>)</div><div class="line">    fmt.Println(<span class="literal">true</span> || <span class="literal">false</span>)</div><div class="line">    fmt.Println(!<span class="literal">true</span>)</div><div class="line"></div><div class="line">    <span class="keyword">const</span> f = <span class="string">"%T(%v)\n"</span></div><div class="line">    fmt.Printf(f, flag, flag)</div><div class="line">    fmt.Printf(f, MaxInt, MaxInt)</div><div class="line">    fmt.Printf(f, z, z)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><p>go 语言中的基础数据类型包括以下几种：</p>
<ul>
<li>int，Rune（Rune 是 int 的别名，代表一个 Unicode 码）</li>
<li>int8，int16，int32，int64</li>
<li>byte，uint8，uint16，uint32，uint64（byte 是 uint8 的别名）</li>
<li>float32，float64</li>
<li>bool</li>
<li>string</li>
<li>complex128，complex64（复数）</li>
</ul>
<p>源码中 <code>runtime.h</code> 对几种简单的基本类型先做了定义，然后用它们对其他的类型进行定义。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">char</span>             int8;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>           uint8;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">short</span>            int16;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span>          uint16;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">int</span>              int32;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>            uint32;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>    int64;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">float</span>                   float32;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span>                  float64;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> uint32                  uintptr</div><div class="line"><span class="keyword">typedef</span> int32                   intptr</div><div class="line"><span class="keyword">typedef</span> int32                   intgo</div><div class="line"><span class="keyword">typedef</span> uint32                  uintgo</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> uint8                   <span class="keyword">bool</span>;</div><div class="line"><span class="keyword">typedef</span> uint8                   byte;</div></pre></td></tr></table></figure>
<p>从中可以看出 go 中的每个类型在 c 中对应的类型和占用字节大小。另外其中还定义了 <code>intptr</code> 和 <code>intgo</code>，其中 <code>intptr</code> 用于指针运算，<code>intgo</code> 相当于在源码中给 <code>int</code> 起的一个别名。</p>
<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>string 类型事实上是一个结构体：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">struct String &#123;</div><div class="line">    byte*   str;</div><div class="line">    intgo   len;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里对于每个 string 类型，都确定了它的长度和字符数组，也就是说 golang 的字符串初始化话底层的结构就会被初始化。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>go 中使用 <code>var</code> 作为关键字来进行变量声明。但和 javascript 里不同，go 中的变量是强类型。声明的方式有多种，包括：</p>
<ul>
<li><code>var a int</code>（仅声明不初始化）</li>
<li><code>var a = 10</code>（声明同时初始化，但不指定类型，由编译器自动推导类型）</li>
<li><code>var a int = 10</code>（声明、指定类型以及初始化）</li>
<li><code>a := 10</code>（省略关键字，声明同时初始化，由编译器推导类型）</li>
</ul>
<p><strong>Note:</strong> 这里需要注意的是，<code>:=</code>是用于声明及赋值，而不是赋值，因此仅在变量定义时使用，开始写 go 的时候常常将 <code>:=</code> 用于赋值导致出错。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> a <span class="keyword">string</span> = <span class="string">"initial"</span></div><div class="line">    fmt.Println(a)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> b, c <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></div><div class="line">    fmt.Println(b, c)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> d = <span class="literal">true</span></div><div class="line">    fmt.Println(d)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> e <span class="keyword">int</span></div><div class="line">    fmt.Println(e)</div><div class="line"></div><div class="line">    f := <span class="string">"short"</span></div><div class="line">    fmt.Println(f)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h3><p>对变量声明语句，编译器会对其进行自动的类型推导，可以用 <code>reflect</code> 包来查看变量的类型。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"reflect"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">10</span></div><div class="line">    <span class="keyword">var</span> b <span class="keyword">byte</span> = <span class="number">10</span></div><div class="line"></div><div class="line">    c := <span class="number">10.0</span></div><div class="line">    d := <span class="string">"10"</span></div><div class="line"></div><div class="line">    fmt.Printf(<span class="string">"a type:%s\n"</span>, reflect.TypeOf(a))</div><div class="line">    fmt.Printf(<span class="string">"b type:%s\n"</span>, reflect.TypeOf(b))</div><div class="line">    fmt.Printf(<span class="string">"c type:%s\n"</span>, reflect.TypeOf(c))</div><div class="line">    fmt.Printf(<span class="string">"d type:%s\n"</span>, reflect.TypeOf(d))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a type:int</div><div class="line">b type:uint8</div><div class="line">c type:float64</div><div class="line">d type:string</div></pre></td></tr></table></figure>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>正常情况下，将类型 V 转化为 T 需要显式声明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a := 5 // typeof(a) is int32</div><div class="line">b := int64(10) // typeof(b) is int64</div></pre></td></tr></table></figure>
<p>若没有显式声明还需要进行类型转换 V -&gt; T，则需要满足 <code>assignability</code>，根据文档<a href="https://golang.org/ref/spec#Assignability" target="_blank" rel="external">assignability</a>，可能的条件如下：</p>
<ul>
<li>T 和 V 的类型相同</li>
<li>T 和 V 的基础类型相同，并且其中至少一个并未显式指定类型</li>
<li>T 是一个 <code>interface</code> 类型，并且 V 实现了 T (这在后面会提到)</li>
<li>V 是一个双向的 <code>channel</code>，而 T 是一个 <code>channel</code>，同时 V 和 T 的元素类型相同</li>
<li>V 是 nil 同时 T 是 <code>slice</code>, <code>function</code>, <code>map</code>, <code>channel</code>, <code>interface</code>, <code>pointer</code> 中的一种</li>
<li>V 是未声明类型的常量</li>
</ul>
<p>在这些条件下，不需要显式声明，直接可以将 T 的值赋予 V。</p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>go 中的常量和 c 相同，需要在编译时确定值，并在编译时被创建。常量需要满足以下几个要求：</p>
<ul>
<li>类型必须是数值、字符串和布尔值之一</li>
<li>可以使用表达式，但表达式必须在编译时可以计算的</li>
<li>声明常量同时必须指定值（初始化），并且不能再修改值</li>
</ul>
<p>常量的关键字和 cpp 相同，用 <code>const</code> 进行声明，声明时可以显式指定数据类型，也可以不指定。多个常量可以同时进行批量声明，常见的使用方法如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"math"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">    s <span class="keyword">string</span> = <span class="string">"constant"</span></div><div class="line">    one, two = <span class="number">1</span>, <span class="number">2</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(s)</div><div class="line">    fmt.Println(one)</div><div class="line">    fmt.Println(two)</div><div class="line"></div><div class="line">    <span class="keyword">const</span> n = <span class="number">500000000</span></div><div class="line">    <span class="keyword">const</span> d = <span class="number">3e20</span> / n</div><div class="line">    fmt.Println(d)</div><div class="line"></div><div class="line">    fmt.Println(<span class="keyword">int64</span>(d))</div><div class="line"></div><div class="line">    fmt.Println(math.Sin(n))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h3><p>iota 在 go 中用于常量计数。iota 在 const 关键字出现时置 0，并且 const 内每增加一行讲使 itoa 计数一次，举个例子应该就很清楚了。</p>
<p>```go<br>const a = iota // a = 0<br>const b = iota // b = 0<br>const (<br>    c = iota   // c = 0<br>    d = iota   // d = 1<br>    e = iota   // e = 2<br>)<br>const (<br>    f, g = iota, 1 &lt;&lt; iota // f = 0, g = 1<br>    h, i = iota, 1 &lt;&lt; iota // h = 1, i = 2<br>)</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://golang.org/ref/spec#Constant" target="_blank" rel="external">Golang Document</a></li>
<li><a href="http://www.cnblogs.com/howDo/archive/2013/04/15/GoLang-Constant.html" target="_blank" rel="external">老虞学GoLang笔记</a></li>
<li><a href="http://www.tuicool.com/articles/MJZvi27" target="_blank" rel="external">golang的类型转换的坑和分析</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Golang 基础学习（一）]]></title>
      <url>http://blog.jetmuffin.com/2016/09/03/go-learning-1/</url>
      <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>最初接触 go 是在 15 年，最开始对 go 的理解是写多线程的程序非常方便，于是学习了 go 的基本语法，并尝试写了一些 go 的简单应用，包括我的本科毕业设计也是使用 go 写的（<a href="https://github.com/icsnju/apt-mesos" target="_blank" rel="external">apt-mesos</a>）。但是对 go 也是停留在最基本的语法认识，有很多特性并未了解。所以想要从头再屡一遍 go 的所有内容。对每一块儿内容，以重学的角度深入学习。</p>
<a id="more"></a>
<h2 id="教程与代码"><a href="#教程与代码" class="headerlink" title="教程与代码"></a>教程与代码</h2><p>学习的过程将使用教程（<a href="https://gobyexample.com/" target="_blank" rel="external">https://gobyexample.com/</a>），它对 go 的每块儿内容提供了 demo，可以更易于理解。教程中的例程，将对其进行理解和实现，然后将代码整理在仓库 [<a href="https://github.com/JetMuffin/golearning.git" target="_blank" rel="external">JetMuffin/golearning</a>]中。</p>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>任何语言的入门，都需要编写一个 Hello World 程序。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(<span class="string">"hello world"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一段使用 <code>fmt</code> 进行输出 <code>hello world</code> 字符的代码，从语言的风格上看，go 使用 <code>package</code> 作为关键字进行包管理，这和 java 很像；而导入包的部分则又像 python；而主函数部分也比较独特。庆幸的是，go 中也不需要添加分号。</p>
<p>go 和 python，ruby 等不同，它是解释型语言，因此在每次运行前需要进行编译，然后才可以进行执行，或者直接进行编译执行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ go run helloworld.go</div><div class="line">hello world</div><div class="line"></div><div class="line">$ go build helloworld.go</div><div class="line">$ ls</div><div class="line">helloworld      helloworld.go</div><div class="line"></div><div class="line">$ ./helloworld</div><div class="line">hello world</div></pre></td></tr></table></figure>
<p>这里需要知道的一点是，编译好后生成了 binary 文件，可以在同平台下直接进行运行，但并无法做到 runing everywhere，因为可能需要涉及到交叉编译的问题。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Zabbix配合lm_sensors监控服务器CPU温度]]></title>
      <url>http://blog.jetmuffin.com/2016/09/01/monitor-temperature-of-server-by-zabbix-and-lm-sensors/</url>
      <content type="html"><![CDATA[<p>手上的一个任务，需要对集群的每台机器 CPU 温度进行监控，防止集群在进行计算时温度过高导致 CPU 损坏。由于集群里已经部署了 Zabbix 进行监控和报警，所以很自然的想法就是在 Zabbix 中集成 CPU 监控这一内容。</p>
<p>首先是获取 CPU 温度的方法，常见的有两种：</p>
<ul>
<li>IPMI</li>
<li>lm_sensors</li>
</ul>
<p>其中 IPMI 需要硬件上的支持，同时还需要进行配置，比较复杂。而 lm_sensors 是 linux 下的一个小工具，安装简单，所以这里就选择 lm_sensors 来采集 CPU 的温度。<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>lm_sensors 的安装很简单，repo 里已经有这个包了，所以直接通过 yum 安装就行了（集群是用的 CentOS，Debian系的也差不多）。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install lm_sensors</div></pre></td></tr></table></figure>
<p>考虑到大多数集群是无法直接通外网的，所以可以在一台可以通外网的机器上下好 rpm 包，再传到 NFS 上或者直接 <code>scp</code>进去。下载 rpm 包可以使用 <code>yumdownloader</code>，刚好 lm_sensors 没有要依赖的包。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yumdownloader install lm_sensors</div></pre></td></tr></table></figure>
<h2 id="采集"><a href="#采集" class="headerlink" title="采集"></a>采集</h2><p>采集数据之前，先看一下 zabbix 的自定义监控项的定义方法。在 <code>zabbix_agentd</code> 中对自定义监控项的定义格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserParameter=&lt;key&gt;,&lt;shell command&gt;</div></pre></td></tr></table></figure>
<p>其中可以看出监控项通过一句 shell 命令获得，并且获得的需要是一个数值。这样我们大概明确了需要采集的目标。</p>
<p>然后先简单过掉下 lm_sensors 需要的配置，即监测 sensors 的信息。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ sensors-detect</div><div class="line">This program will <span class="built_in">help</span> you determine <span class="built_in">which</span> kernel modules you need</div><div class="line">to load to use lm_sensors most effectively. It is generally safe</div><div class="line">and recommended to accept the default answers to all questions,</div><div class="line">unless you know what you<span class="string">'re doing.</span></div><div class="line"></div><div class="line">Some south bridges, CPUs or memory controllers contain embedded sensors.</div><div class="line">Do you want to scan for them? This is totally safe. (YES/no):</div></pre></td></tr></table></figure>
<p>一路敲 <code>yes</code> 即可，然后执行 <code>sensors</code> 命令可以看到 CPU 的温度：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$ sensors</div><div class="line">power_meter-acpi-0</div><div class="line">Adapter: ACPI interface</div><div class="line">power1:     18446.74 GW  (interval =   2.00 s)</div><div class="line"></div><div class="line">coretemp-isa-0000</div><div class="line">Adapter: ISA adapter</div><div class="line">Physical id 0: +41.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 0:        +30.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 1:        +32.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 2:        +28.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 3:        +34.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 4:        +30.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 5:        +30.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line"></div><div class="line">coretemp-isa-0001</div><div class="line">Adapter: ISA adapter</div><div class="line">Physical id 1: +38.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 0:        +33.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 1:        +34.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 2:        +32.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 3:        +31.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 4:        +32.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 5:        +31.0°C  (high = +75.0°C, crit = +85.0°C)</div></pre></td></tr></table></figure>
<p>命令显示的结果是每个核心的温度以及物理核的温度，最后要聚合到一个数值上。这里可以选择两个方向，一是对每个核心进行监控，这样较为复杂，但是细节明显；二是对每个核心取平均值，处理比较简单。这里我选择了后者，那么就需要从命令输出中获取到需要的信息了。这里就用 <code>grep</code>，<code>cut</code>，<code>awk</code> 乱处理一通了。</p>
<p>首先用 <code>grep</code> 拿到每个核心的温度行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ sensors | grep <span class="string">"Core"</span></div><div class="line">Core 0:        +30.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 1:        +32.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 2:        +30.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 3:        +34.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 4:        +31.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 5:        +30.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 0:        +31.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 1:        +33.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 2:        +32.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 3:        +30.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 4:        +32.0°C  (high = +75.0°C, crit = +85.0°C)</div><div class="line">Core 5:        +31.0°C  (high = +75.0°C, crit = +85.0°C)</div></pre></td></tr></table></figure>
<p>然后用 <code>cut</code> 或者 <code>awk</code> 获取每行的温度数值。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ sensors | grep <span class="string">"Core"</span> | awk <span class="string">'&#123;print $3&#125;'</span> | awk -F <span class="string">'.'</span> <span class="string">'&#123;print $1&#125;'</span> | awk -F <span class="string">'+'</span> <span class="string">'&#123;print $2&#125;'</span></div><div class="line">30</div><div class="line">33</div><div class="line">29</div><div class="line">34</div><div class="line">30</div><div class="line">30</div><div class="line">31</div><div class="line">34</div><div class="line">32</div><div class="line">32</div><div class="line">32</div><div class="line">30</div></pre></td></tr></table></figure>
<p>最后对这些输出按行取平均，再四舍五入到整数就行了（也可以不四舍五入）。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sensors | grep <span class="string">'Core'</span> | awk <span class="string">'&#123;print $3&#125;'</span> | awk -F <span class="string">"."</span> <span class="string">'&#123;print $1&#125;'</span> | awk -F <span class="string">"+"</span> <span class="string">'&#123;print $2&#125;'</span> | \</div><div class="line">awk <span class="string">'&#123;sum+=$1;count+=1&#125; END &#123;print sum/count&#125;'</span> | awk -F. <span class="string">'&#123;if(substr($2,1,1)&gt;=5)$1+=1 ; print $1&#125;'</span></div><div class="line">31</div></pre></td></tr></table></figure>
<h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>做完数据的采集工作，那么就要集成进 Zabbix 里了。首先需要在 zabbix_agentd 里定义这个监控项，在 <code>zabbix_agentd.conf</code> 里加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserParameter=system.cpu.temperature,/usr/bin/sensors | grep &apos;Core&apos; | awk &apos;&#123;print $3&#125;&apos; | awk -F &quot;.&quot; &apos;&#123;print $1&#125;&apos; | awk -F &quot;+&quot; &apos;&#123;print $2&#125;&apos; | awk  &apos;&#123;sum+=$1;count+=1&#125; END &#123;print sum/count&#125;&apos; | awk -F. &apos;&#123;if(substr($2,1,1)&gt;=5)$1+=1 ; print $1&#125;&apos;</div></pre></td></tr></table></figure>
<p>然后重启 agent 服务即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ service zabbix_agentd restart</div><div class="line">Shutting down zabbix_agentd:                               [  OK  ]</div><div class="line">Starting zabbix_agentd:                                    [  OK  ]</div></pre></td></tr></table></figure>
<p>回到 Zabbix 的界面，选择一个合适的模板，进到它的监控项中，点击新建监控项，然后如下图填入信息即可。注意这里的键值即上面填的 <code>UserParameters</code> 里的 <code>key</code>。</p>
<p><img src="/uploads/images/2016/09/01/QQ20160901-0@2x.png" alt="add-new-metric"></p>
<p>然后对相应的主机应用这个模板，那么就可以获取到这台主机的 CPU 温度了。</p>
<p><img src="/uploads/images/2016/09/01/QQ20160901-1@2x.png" alt="metric-data"></p>
<p>报警设置和普通监控项相同，如下：</p>
<p><img src="/uploads/images/2016/09/01/QQ20160901-2@2x.png" alt="alert"></p>
<p>最后，如果对 Zabbix 增加了 grafana 的话，还可以在 grafana 里去显示 CPU 温度。</p>
<p><img src="/uploads/images/2016/09/01/QQ20160901-3@2x.png" alt="grafana"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[InfiniBand技术介绍]]></title>
      <url>http://blog.jetmuffin.com/2016/06/07/infiniband-technique/</url>
      <content type="html"><![CDATA[<blockquote>
<p>随着服务器处理速度的不断加快，用户对提升网络传输速度的需求也越来越紧迫，传统意义上的输入 / 输出技术， 如 PCI、以太等，已经无法满足这种需求。如何更为有效的提高数据传输速度，增加有效带宽成为摆在人们面前必须解决的一个重大问题。 InfiniBand 标准就是在这种情况下应运而生的，它在很大程度上解决了传统输入 / 输出架构的传输瓶颈问题 , 运行速度可达到每端口 2.5Gb/s 或 10Gb/s 。 目前，这项技术已经广泛应用到高性能计算等领域，Linux 操作系统内核也对其提供了全面的支持，本文将逐一介绍 InfiniBand 技术架构，以及如何在 Red Hat Enterprise Linux 5.3 和 SLES11 系统中配置 InfiniBand 网络设备，包括网卡驱动的安装以及 IPoIB（IP over InfiniBand）接口配置。</p>
</blockquote>
<a id="more"></a>
<h3 id="HPC集群"><a href="#HPC集群" class="headerlink" title="HPC集群"></a>HPC集群</h3><p>高性能计算（HPC）服务器集群在各个行业中正逐步流行开来，主要用于计算密集型任务。包括模拟物体表面上大气或流体流动的计算流体力学，财务风险分析，生物信息学，量子力学等方面计算。</p>
<h3 id="HPC集群中的网络"><a href="#HPC集群中的网络" class="headerlink" title="HPC集群中的网络"></a>HPC集群中的网络</h3><p>网络是HPC集群的核心，用于实现执行并行计算的计算节点之间的通信。</p>
<p>根据使用目的的不同，可以把HPC中的网络大体分为三种类型，在真正搭建HPC集群时使用其中的一种，两种或三种。</p>
<ul>
<li><strong>管理网络</strong>：用于用户维护、控制和操作单个节点的网络</li>
<li><strong>I/O网络</strong>：用于对中央共享文件系统执行读写操作的网络</li>
<li><strong>IPC网络</strong>：用于为并行处理传递消息和数据的流程间通信网络</li>
</ul>
<h3 id="InfiniBand-vs-以太网"><a href="#InfiniBand-vs-以太网" class="headerlink" title="InfiniBand vs 以太网"></a>InfiniBand vs 以太网</h3><p>为了满足HPC集群中的网络需求，通常的解决方案有两种：以太网和InfiniBand。然而这两种网络的区别和使用范围还是很明显的。</p>
<p>传统数据中心常常使用以太网互联（这里的以太网多指千兆以太网），构成一张高速运转的数据网络。以太网采用树状结构，按三层交换机制排列，从核心开始扇形展开。<br>而高性能计算集群则常常使用InfiniBand。InfiniBand的拓扑结构相对更加扁平，如图1所示，它主要依赖于两个核心组件：主机通道适配器<code>HCA（Host Channel Adapter）</code>和InfiniBand交换机。其中HCA为主机设备提供一个接口用于支持所有InfiniBand定义的操作，而交换机则将一个端口接受到的InfiniBand保温转发到另一个端口，支持单播和多播。<br><img src="/uploads/images/2016/06/07/image001.jpg" alt="图1. InfiniBand拓扑结构"></p>
<p>也是取决于InfiniBand的结构决定了它的带宽大、延迟低的优势，也正因为如此被广泛使用在高性能集群中。</p>
<p>近年来万兆以太网逐渐进入市场，它启用了CSMA/CD来处理数据包冲突，而采用全双工模式以降低延迟，同时它支持更大的带宽，然而万兆以太网在延迟上仍然比InfiniBand高，同时成本也相比InfiniBand高。但是在未来，万兆以太网可能会影响InfiniBand在高性能集群中的市场。</p>
<h3 id="InfiniBand在Linux中的使用"><a href="#InfiniBand在Linux中的使用" class="headerlink" title="InfiniBand在Linux中的使用"></a>InfiniBand在Linux中的使用</h3><p>Red Hat产品中从Red Hat Enterprise Linux 5.3开始正式从内核中集成对InfiniBand网卡的支持，并开始讲InfiniBand所需的驱动以及库文件打包到发行版的CD里，所以推荐使用Red Hat 5.3之后的系统版本。而对于其他发行版的Linux，都在支持InfiniBand。</p>
<h3 id="配置及错误总结"><a href="#配置及错误总结" class="headerlink" title="配置及错误总结"></a>配置及错误总结</h3><p>详见下一篇文章。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用slurm进行集群的资源管理（vagrant）]]></title>
      <url>http://blog.jetmuffin.com/2016/05/30/install-and-use-slurm-on-ubuntu/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>SLURM 是一种可用于大型计算节点集群的高度可伸缩和容错的集群管理器和作业调度系统。SLURM 维护着一个待处理工作的队列并管理此工作的整体资源利用。它还以一种排他或非排他的方式管理可用的计算节点（取决于资源的需求）。最后，SLURM 将作业分发给一组已分配的节点来执行工作并监视平行作业至其完成。</p>
</blockquote>
<a id="more"></a>
<p>slrum相当于一个集群管理器，可以伸缩至大型节点集群，容错好，而更重要的是他开源。而现在，slurm已经成为很多强大的超级计算机上使用的资源管理器。</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="http://www.ibm.com/developerworks/cn/linux/l-slurm-utility/figure2.gif" alt="slurm架构"><br>slurm的架构和一般的集群管理架构相类似，顶部是一对冗余集群控制器，它充当计算集群的管理器并实现一个管理守护程序（<code>slurmctld</code>），<code>slurmctld</code>提供了对计算资源的监视，同时它将进入的作业映射到基本的计算资源。</p>
<p>此外，每个计算节点上有一个守护程序<code>slurmd</code>，<code>slurmd</code>负责管理在其上执行的节点包括运行的任务，来自控制器的工作，以及接受控制器的请求等。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装上，为了模拟集群的环境，需要使用多个节点，所以我们用<code>vagrant</code>创建多个虚拟机。<code>Vagrantfile</code>如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># -*- mode: ruby -*-</div><div class="line"># vi: set ft=ruby :</div><div class="line">Vagrant.configure(2) do |config|</div><div class="line">  config.vm.box = &quot;ubuntu/trusty64&quot;</div><div class="line">  config.ssh.insert_key = false</div><div class="line">  config.vm.define &quot;master&quot; do |node|</div><div class="line">	node.vm.network &quot;private_network&quot;, ip: &quot;192.168.10.10&quot;</div><div class="line">	node.vm.hostname = &quot;master&quot;</div><div class="line">	node.vm.provider &quot;virtualbox&quot; do |v|</div><div class="line">	  v.memory = 2048</div><div class="line">	  v.cpus = 2</div><div class="line">	end</div><div class="line">  end</div><div class="line">  config.vm.define &quot;compute&quot; do |slave|</div><div class="line">	slave.vm.network &quot;private_network&quot;, ip: &quot;192.168.10.11&quot;</div><div class="line">	slave.vm.hostname = &quot;compute&quot;</div><div class="line">  end</div><div class="line">end</div></pre></td></tr></table></figure>
<p>分别使用<code>vagrant up master</code>和<code>vagrant up compute</code>启动控制节点和计算节点。</p>
<p>Ubuntu源里提供了munge，所以可以直接通过源进行安装。在控制节点和计算节点分别安装slurm包，这个包里包含了<code>slurmctld</code>和<code>slurmd</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install slurm-llnl</div></pre></td></tr></table></figure>
<p>由于计算节点和控制节点需要通信，而通信之间需要进行认证，所以这里需要生成key并启动认证服务。这里使用的是llnl的munge。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo create-munge-key</div><div class="line">Generating a pseudo-random key using /dev/urandom complete.</div></pre></td></tr></table></figure>
<p>然后启动munge的认证服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service munge start</div></pre></td></tr></table></figure>
<p>接下来配置slurm的配置文件，然而笔者在使用时，slrum的配置工具<a href="https://computing.llnl.gov/linux/slurm/configurator.html" target="_blank" rel="external">Slurm Configuration Tool</a>失效了，所以可以去slurm的源码里复制一份<a href="https://github.com/SchedMD/slurm/blob/master/etc/slurm.conf.example" target="_blank" rel="external">example</a>。我的配置文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">ClusterName=vagrant</div><div class="line">ControlMachine=master</div><div class="line">#ControlAddr=</div><div class="line">#</div><div class="line">SlurmUser=slurm</div><div class="line">SlurmctldPort=6817</div><div class="line">SlurmdPort=6818</div><div class="line">AuthType=auth/munge</div><div class="line">StateSaveLocation=/tmp</div><div class="line">SlurmdSpoolDir=/tmp/slurmd</div><div class="line">SwitchType=switch/none</div><div class="line">MpiDefault=none</div><div class="line">SlurmctldPidFile=/var/run/slurmctld.pid</div><div class="line">SlurmdPidFile=/var/run/slurmd.pid</div><div class="line">ProctrackType=proctrack/pgid</div><div class="line">ReturnToService=0</div><div class="line">#</div><div class="line"># TIMERS</div><div class="line">SlurmctldTimeout=300</div><div class="line">SlurmdTimeout=300</div><div class="line">InactiveLimit=0</div><div class="line">MinJobAge=300</div><div class="line">KillWait=30</div><div class="line">Waittime=0</div><div class="line">#</div><div class="line"># SCHEDULING</div><div class="line">SchedulerType=sched/backfill</div><div class="line">SelectType=select/linear</div><div class="line">FastSchedule=1</div><div class="line">#</div><div class="line"># LOGGING</div><div class="line">SlurmctldDebug=3</div><div class="line">SlurmdDebug=3</div><div class="line">JobCompType=jobcomp/none</div><div class="line">#</div><div class="line"># ACCOUNTING</div><div class="line">#</div><div class="line"># COMPUTE NODES</div><div class="line">NodeName=compute Procs=1 State=UNKNOWN</div><div class="line">PartitionName=debug Nodes=compute Default=YES MaxTime=INFINITE State=UP</div></pre></td></tr></table></figure>
<p>这份配置文件在计算节点上同样要使用，所以要复制到计算节点上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo scp /etc/slurm-llnl/slurm.conf vagrant@compute/~</div></pre></td></tr></table></figure>
<p>然后启动控制节点上的slurmctld服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo service slurm-llnl start</div><div class="line">* Starting slurm central management daemon slurmctld</div></pre></td></tr></table></figure>
<p>接着是计算节点的配置，同样需要使用munge，将控制节点生成的<code>munge.key</code>拷贝到计算节点上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo scp /etc/munge/munge.key vagrant@compute:/~</div></pre></td></tr></table></figure>
<p>然后进入计算节点，将<code>munge.key</code>拷贝到munge的目录并启动munge,<strong>注意要修改key的owner和group为munge</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo mv ~/munge.key /etc/munge/</div><div class="line">$ sudo chown munge:munge /etc/munge/munge.key</div></pre></td></tr></table></figure>
<p>然后就可以启动munge服务了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service munge start</div></pre></td></tr></table></figure>
<p>再将之前复制的<code>slurm.conf</code>放到指定位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mv ~/slurm.conf /etc/slurm-llnl/slurm.conf</div></pre></td></tr></table></figure>
<p>接着启动计算节点上的slurmd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service slurm-llnl start</div></pre></td></tr></table></figure>
<p>这样，slurm就配置完毕了。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>这里就简单测试下slurm的功能（在控制节点上运行），首先运行<code>sinfo</code>查看集群状况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sinfo</div><div class="line">PARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST</div><div class="line">debug*       up   infinite      1   idle compute</div></pre></td></tr></table></figure>
<p>然后启动一个任务（<code>/bin/hostname</code>）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ srun -N1 /bin/hostname</div><div class="line">compute</div></pre></td></tr></table></figure>
<h2 id="错误与解决方案"><a href="#错误与解决方案" class="headerlink" title="错误与解决方案"></a>错误与解决方案</h2><p><strong>1. 启动munge报错误munged: Error: Logfile is insecure: group-writable permissions set on “/var/log”</strong></p>
<p>在Ubuntu 14.04下启动munge会出现以下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo service munge start</div><div class="line"> * Starting MUNGE munged [fail]</div><div class="line">munged: Error: Logfile is insecure: group-writable permissions set on &quot;/var/log&quot;</div></pre></td></tr></table></figure>
<p>原因是因为Ubuntu 14.04将<code>/var/log</code>目录的权限从0755 root:root调整为0755 root:syslog，因此直接启动会报group-writable permissions的错误。</p>
<p>解决方案是启动munge时加上<code>--force</code>或<code>--syslog</code>的参数。</p>
<ul>
<li><code>--force</code>会将errors转为warnings，跳过错误</li>
<li><code>--syslog</code>会跳过<code>/var/log</code>目录的权限检查</li>
</ul>
<p>如果是使用<code>/etc/init.d/munge start</code>或者<code>service munge start</code>的话，可以将Option写到配置文件<code>/etc/default/munge</code>里：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OPTIONS=&quot;--force&quot;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OSX系统列举USB设备方法]]></title>
      <url>http://blog.jetmuffin.com/2016/03/13/list-usb-devices-on-mac-os-x/</url>
      <content type="html"><![CDATA[<p>Linux 用户在列举USB设备时，可以使用<code>lsusb</code>命令来查看所有已经连接的usb设备，或者进入<code>/dev/bus/usb/001</code>之类进行查看。</p>
<a id="more"></a>
<p>而在Mac OS下，系统自带的命令则是<code>system_profiler SPUSBDataType</code>，使用这条命令可以查看所有连接的USB设备，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"> jeff@promote ⮀ ~ ⮀ system_profiler SPUSBDataType</div><div class="line">USB:</div><div class="line"></div><div class="line">    USB 3.0 Bus:</div><div class="line"></div><div class="line">      BSD Name: en4</div><div class="line">      Host Controller Driver: AppleUSBXHCIWPT</div><div class="line">      PCI Device ID: 0x9cb1</div><div class="line">      PCI Revision ID: 0x0003</div><div class="line">      PCI Vendor ID: 0x8086</div><div class="line"></div><div class="line">        USB3.0 Hub:</div><div class="line"></div><div class="line">          Product ID: 0x0612</div><div class="line">          Vendor ID: 0x05e3  (Genesys Logic, Inc.)</div><div class="line">          Version: 92.16</div><div class="line">          Speed: Up to 5 Gb/sec</div><div class="line">          Manufacturer: GenesysLogic</div><div class="line">          Location ID: 0x14400000 / 6</div><div class="line">          Current Available (mA): 1800</div><div class="line">          Current Required (mA): 0</div><div class="line">          Extra Operating Current (mA): 0</div><div class="line"></div><div class="line">        Bluetooth USB Host Controller:</div><div class="line"></div><div class="line">          Product ID: 0x8290</div><div class="line">          Vendor ID: 0x05ac  (Apple Inc.)</div><div class="line">          Version: 1.11</div><div class="line">          Speed: Up to 12 Mb/sec</div><div class="line">          Manufacturer: Broadcom Corp.</div><div class="line">          Location ID: 0x14300000 / 2</div><div class="line">          Current Available (mA): 1000</div><div class="line">          Current Required (mA): 0</div><div class="line">          Extra Operating Current (mA): 0</div><div class="line">          Built-In: Yes</div><div class="line"></div><div class="line">        Razer DeathAdder:</div><div class="line"></div><div class="line">          Product ID: 0x0016</div><div class="line">          Vendor ID: 0x1532</div><div class="line">          Version: 1.00</div><div class="line">          Speed: Up to 12 Mb/sec</div><div class="line">          Manufacturer: Razer</div><div class="line">          Location ID: 0x14200000 / 4</div><div class="line">          Current Available (mA): 1000</div><div class="line">          Current Required (mA): 100</div><div class="line">          Extra Operating Current (mA): 0</div><div class="line"></div><div class="line">        USB2.0 Hub:</div><div class="line"></div><div class="line">          Product ID: 0x0610</div><div class="line">          Vendor ID: 0x05e3  (Genesys Logic, Inc.)</div><div class="line">          Version: 92.16</div><div class="line">          Speed: Up to 480 Mb/sec</div><div class="line">          Manufacturer: GenesysLogic</div><div class="line">          Location ID: 0x14100000 / 5</div><div class="line">          Current Available (mA): 1000</div><div class="line">          Current Required (mA): 100</div><div class="line">          Extra Operating Current (mA): 0</div><div class="line">          BSD Name: en4</div><div class="line"></div><div class="line">            Apple USB Ethernet Adapter:</div><div class="line"></div><div class="line">              Product ID: 0x1402</div><div class="line">              Vendor ID: 0x05ac  (Apple Inc.)</div><div class="line">              Version: 0.01</div><div class="line">              Serial Number: 1460AB</div><div class="line">              Speed: Up to 480 Mb/sec</div><div class="line">              Manufacturer: Apple Inc.</div><div class="line">              Location ID: 0x14140000 / 7</div><div class="line">              Current Available (mA): 1000</div><div class="line">              Current Required (mA): 250</div><div class="line">              Extra Operating Current (mA): 0</div><div class="line">              BSD Name: en4</div><div class="line"></div><div class="line">            iPhone:</div><div class="line"></div><div class="line">              Product ID: 0x12a8</div><div class="line">              Vendor ID: 0x05ac  (Apple Inc.)</div><div class="line">              Version: 7.02</div><div class="line">              Serial Number: 1ba089f6c8745ae921e95dea83879c7e36b43b9c</div><div class="line">              Speed: Up to 480 Mb/sec</div><div class="line">              Manufacturer: Apple Inc.</div><div class="line">              Location ID: 0x14130000 / 8</div><div class="line">              Current Available (mA): 1000</div><div class="line">              Current Required (mA): 500</div><div class="line">              Extra Operating Current (mA): 0</div><div class="line">              Sleep current (mA): 500</div></pre></td></tr></table></figure>
<p>而在图形界面上<code>EL Capitan</code>的操作步骤为：</p>
<ul>
<li>点击左上角苹果标志</li>
<li>点击<code>关于本机</code>-&gt; <code>系统报告</code> -&gt; <code>USB</code></li>
<li>然后则可以查看系统总线上挂载的USB信息了</li>
</ul>
<p><strong>最后说下为啥写这个：</strong>最近在研究怎么在<code>docker container</code>中挂载USB，首先要获取总线上的USB设备，这是个开头吧。 </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[运行Mesos Framework报no mesos in java.library.path解决方法]]></title>
      <url>http://blog.jetmuffin.com/2016/01/05/solution-to-no-mesos-in-java-library-path/</url>
      <content type="html"><![CDATA[<p>在运行自己用scala编写的Framework时遇到了一个巨大的问题，即<br><a id="more"></a><br>在执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -cp xxxx.jar -Djava.library.path=libs xxxx.xxxx.xxx</div></pre></td></tr></table></figure>
<p>之后报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Exception in thread &quot;main&quot; java.lang.UnsatisfiedLinkError: no mesos in java.library.path</div><div class="line">    at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1758)</div><div class="line">    at java.lang.Runtime.loadLibrary0(Runtime.java:823)</div><div class="line">    at java.lang.System.loadLibrary(System.java:1045)</div><div class="line">    at org.apache.mesos.MesosNativeLibrary.load(MesosNativeLibrary.java:46)</div></pre></td></tr></table></figure>
<p>尝试了把build之后的<code>mesos-0.25.0.jar</code>和<code>protobuf-2.5.0.jar</code>加入，依然不生效，查询了<code>stackoverflow</code>后发现是<code>MESOS_NATIVE_LIBRARY</code>环境变量未加入。</p>
<p>因此只要执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> # For Linux</div><div class="line">$ export MESOS_NATIVE_LIBRARY=&apos;/usr/local/lib/libmesos.so&apos;</div><div class="line"></div><div class="line"> # For OSX</div><div class="line">$ export MESOS_NATIVE_LIBRARY=&apos;/usr/local/lib/libmesos.dylib&apos;</div></pre></td></tr></table></figure>
<p>就行了。</p>
<p>为了方便，可以把这个语句加到.bashrc中</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DCOS上的cron 分布式作业调度器 Chronos]]></title>
      <url>http://blog.jetmuffin.com/2015/12/28/chronos-distributed-cron-on-dcos/</url>
      <content type="html"><![CDATA[<p>Chronos是Aribnb公司开发的替代<code>cron</code>的Mesos框架。它是一个运行在<code>Apache Mesos</code>上的分布式的，高容错的任务编排、定时任务的框架。</p>
<a id="more"></a>
<p>Chronos作为DCOS中的一部分，它默认所处的环境下存在任务的环境。例如Chronos会执行Hadoop任务脚本，即使执行的slave上并没有Hadoop环境（但是这样会导致任务的失败）。此外，Chronos支持任务脚本传输文件到远程机器上，并执行文件，同时接受异步的回调，通知Chronos任务成功或是失败。比较重要的一点是，Chronos同样支持在<code>Docker</code>容器中进行执行任务。</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="http://7xpl2y.com1.z0.glb.clouddn.com/chronos.png" alt="architecture"></p>
<p>Chronos通过Mesos Master下的<code>Scheduler</code>选择指定slave执行job，来完成相应的task。而在Chronos中并不会对环境进行选择，而只是对从Mesos Master接受的<code>Resource offers</code>进行筛选。</p>
<h2 id="JobGraph"><a href="#JobGraph" class="headerlink" title="JobGraph"></a>JobGraph</h2><p>Chronos中比较重要的一点是利用JobGraph来确定各个job之间的依赖关系，以确定任务执行的先后顺序。</p>
<p>Chronos中根据JobGraph计算出job执行的优先级，然后再根据当前的job执行情况，然后确定每个任务是否进行执行。</p>
<p>如图，我创建了2个任务:</p>
<p><img src="http://7xpl2y.com1.z0.glb.clouddn.com/QQ20151228-3%402x.png" alt="create-job"></p>
<p>指定<code>sleep2</code>的父元素为<code>sleep</code>，则<code>sleep2</code>依赖于<code>sleep</code>，先后顺序也应该为先执行<code>sleep</code>然后是<code>sleep2</code>，如下图(绿色代表已经执行，白色代表未执行)</p>
<p><img src="http://7xpl2y.com1.z0.glb.clouddn.com/QQ20151228-2%402x.png" alt="job-run"></p>
<p>而实际生产中JobGraph的图是非常复杂的，因此Chronos利用JobGraph能够很有效的进行任务的调度。</p>
<h2 id="部分源码解析"><a href="#部分源码解析" class="headerlink" title="部分源码解析"></a>部分源码解析</h2><p>这里主要分析framework部分的主要核心代码：</p>
<p><strong>resourceOffers()</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//该方法实现调用mesos的scala接口，进行offer的分配</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">resourceOffers</span></span>(schedulerDriver: <span class="type">SchedulerDriver</span>, receivedOffers: java.util.<span class="type">List</span>[<span class="type">Offer</span>]) &#123;</div><div class="line">    log.info(<span class="string">"Received resource offers"</span>)</div><div class="line">    <span class="keyword">import</span> scala.collection.<span class="type">JavaConverters</span>._</div><div class="line"></div><div class="line">    <span class="keyword">val</span> offers = receivedOffers.asScala.toList</div><div class="line">    <span class="keyword">val</span> offerResources = mutable.<span class="type">HashMap</span>(offers.map(o =&gt; (o, <span class="type">Resources</span>(o))).toSeq: _*)</div><div class="line">    <span class="comment">//生成可以执行的task(详细见下文)</span></div><div class="line">    <span class="keyword">val</span> tasksToLaunch = generateLaunchableTasks(offerResources)</div><div class="line"></div><div class="line">    log.info(<span class="string">"Declining unused offers."</span>)</div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个Set保存已经使用的offer</span></div><div class="line">    <span class="keyword">val</span> usedOffers = mutable.<span class="type">HashSet</span>(tasksToLaunch.map(_._3.getId.getValue): _*)</div><div class="line">	</div><div class="line">	<span class="comment">//如果当前的offer已经被使用了（在usedOffers里出现），则decline掉</span></div><div class="line">    offers.foreach(o =&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (!usedOffers.contains(o.getId.getValue))</div><div class="line">        mesosDriver.get().declineOffer(o.getId, declineOfferFilters)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    log.info(<span class="string">s"Declined unused offers with filter refuseSeconds=<span class="subst">$&#123;declineOfferFilters.getRefuseSeconds&#125;</span> "</span> +</div><div class="line">      <span class="string">s"(use --<span class="subst">$&#123;config.declineOfferDuration.name&#125;</span> to reconfigure)"</span>)</div><div class="line">	</div><div class="line">	<span class="comment">//执行任务</span></div><div class="line">    launchTasks(tasksToLaunch)</div><div class="line"></div><div class="line">    <span class="comment">// Perform a reconciliation, if needed.</span></div><div class="line">    reconcile(schedulerDriver)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><strong>generateLaunchableTasks（）</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">def</span> <span class="title">generateLaunchableTasks</span></span>(offerResources: mutable.<span class="type">HashMap</span>[<span class="type">Offer</span>, <span class="type">Resources</span>]): mutable.<span class="type">Buffer</span>[(<span class="type">String</span>, <span class="type">BaseJob</span>, <span class="type">Offer</span>)] = &#123;</div><div class="line">   <span class="keyword">val</span> tasks = mutable.<span class="type">Buffer</span>[(<span class="type">String</span>, <span class="type">BaseJob</span>, <span class="type">Offer</span>)]()</div><div class="line">   </div><div class="line"><span class="comment">// 属性约束检查</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">checkConstraints</span></span>(attributes: <span class="type">Seq</span>[<span class="type">Protos</span>.<span class="type">Attribute</span>], constraints: <span class="type">Seq</span>[<span class="type">Constraint</span>]): <span class="type">Boolean</span> = &#123;</div><div class="line">   	<span class="comment">//遍历所有的属性约束</span></div><div class="line">     constraints.foreach &#123; c =&gt;</div><div class="line">       <span class="keyword">if</span> (!c.matches(attributes)) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">     <span class="literal">true</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">//尾递归注解</span></div><div class="line">   <span class="meta">@tailrec</span></div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">generate</span></span>() &#123;</div><div class="line">     taskManager.getTask <span class="keyword">match</span> &#123;</div><div class="line">       <span class="keyword">case</span> <span class="type">None</span> =&gt; log.info(<span class="string">"No tasks scheduled or next task has been disabled.\n"</span>)</div><div class="line">       <span class="keyword">case</span> <span class="type">Some</span>((taskId, job)) =&gt;</div><div class="line">         <span class="keyword">if</span> (runningTasks.contains(job.name)) &#123;</div><div class="line">         	<span class="comment">// 若当前的task正在执行，则从taskManager里将其去除</span></div><div class="line">           <span class="keyword">val</span> deleted = taskManager.removeTask(taskId)</div><div class="line">           log.warning(<span class="string">"The head of the task queue appears to already be running: "</span> + job.name + <span class="string">"\n"</span>)</div><div class="line">           <span class="comment">// 递归调用</span></div><div class="line">           generate()</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">           tasks.find(_._2.name == job.name) <span class="keyword">match</span> &#123;</div><div class="line">             <span class="keyword">case</span> <span class="type">Some</span>((subtaskId, subJob, offer)) =&gt;</div><div class="line">               <span class="comment">//若发现已经调度的任务出现在队列中，则将其删除</span></div><div class="line">               <span class="keyword">val</span> deleted = taskManager.removeTask(subtaskId)</div><div class="line">               log.warning(<span class="string">"Found job in queue that is already scheduled for launch with this offer set: "</span> + subJob.name + <span class="string">"\n"</span>)</div><div class="line">               <span class="comment">//递归调用</span></div><div class="line">               generate()</div><div class="line">             <span class="keyword">case</span> <span class="type">None</span> =&gt;</div><div class="line">             	<span class="comment">//生产当前任务所需的资源，并且判断每个offer的各个资源是否能够满足</span></div><div class="line">               <span class="keyword">val</span> neededResources = <span class="keyword">new</span> <span class="type">Resources</span>(job)</div><div class="line">               offerResources.toIterator.find &#123; ors =&gt;</div><div class="line">                 ors._2.canSatisfy(neededResources) &amp;&amp; checkConstraints(ors._1.getAttributesList.asScala, job.constraints)</div><div class="line">               &#125; <span class="keyword">match</span> &#123;</div><div class="line">                 <span class="keyword">case</span> <span class="type">Some</span>((offer, resources)) =&gt;</div><div class="line">                 	<span class="comment">//若存在资源能够满足</span></div><div class="line">                   <span class="comment">// Subtract this job's resource requirements from the remaining available resources in this offer.	</span></div><div class="line">                   <span class="comment">//计算新资源，执行任务</span></div><div class="line">                   resources -= neededResources</div><div class="line">                   tasks.append((taskId, job, offer))</div><div class="line">                   <span class="comment">//继续递归</span></div><div class="line">                   generate()</div><div class="line">                 <span class="keyword">case</span> <span class="type">None</span> =&gt;</div><div class="line">                 	<span class="comment">// 资源不足，则将task重新加回队列（taskManager）</span></div><div class="line">                   <span class="keyword">val</span> foundResources = offerResources.toIterator.map(_._2.toString()).mkString(<span class="string">","</span>)</div><div class="line">                   log.warning(</div><div class="line">                     <span class="string">"Insufficient resources remaining for task '%s', will append to queue. (Needed: [%s], Found: [%s])"</span></div><div class="line">                       .stripMargin.format(taskId, neededResources, foundResources)</div><div class="line">                   )</div><div class="line">                   taskManager.enqueue(taskId, job.highPriority)</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line">   generate()</div><div class="line">   tasks</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>从这段源码中可以看出来taskManaer事实上是一个task的<code>优先队列</code>。同时从generateLaunchableTasks()这个函数看出Chronos利用Scala的尾递归巧妙地处理了所有情况，保证调度器工作的执行。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Chronos是一个非常好的Mesos框架，同时它的源码采用scala语言进行编写，函数式编程也让代码看起来非常的舒畅。由于笔者毕业设计打算写一个Mesos Framework，所以Chronos是一个很好的典范！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mesos Authentication详解]]></title>
      <url>http://blog.jetmuffin.com/2015/12/28/authentication-of-mesos/</url>
      <content type="html"><![CDATA[<p>Authentication模块是Mesos中较为重要的一部分，涉及了整个系统的安全性。Mesos 0.15.0引入了framework authentication，0.19.0引入了slave authentication。Mesos Authentication只允许信任的实体可以和Mesos集群进行交互。</p>
<a id="more"></a>
<p>Mesos中的Authentication模块常用使用方法有三种：</p>
<ol>
<li>要求framework必须被授权才能向master注册</li>
<li>要求slaves必须被授权才能获得resources offer</li>
<li>限制<code>/teardown</code>端的访问</li>
</ol>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>Mesos的Authentication模块使用了<code>Cyrus SASL Library</code>实现验证。SASL提供了多种验证机制，包括（<code>ANOYMOUS</code>,<code>PLAIN</code>,’CRAM-MD5<code>,</code>GSSAPI`等）。</p>
<p>现在Mesos默认支持<code>CRAM-MD5</code>进行验证，单用户可以拓展自己的<code>authentication modules</code>（详见之后的文章<a href="#">mesos modules</a>）。<code>CRAM-MD5</code>使用<code>principal</code>和<code>secret</code>对进行验证，其中<code>principal</code>代表framework的身份。<strong>注意，这里的framework并不是执行framework的user而是framework自身</strong></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在启动mesos节点时可以通过配置项来选择是否启用authentication模块，对哪些部分启用authentication。</p>
<h3 id="Masters"><a href="#Masters" class="headerlink" title="Masters"></a>Masters</h3><ul>
<li>-authenticate/-no-authenticate 前者只允许授权的framework接入集群，后者还允许未授权的framework接入</li>
<li>-authenticate_slaves/-no-authenticate_slaves 前者只允许授权的slave介入集群，后者还允许未授权的framework接入</li>
<li>-authenticators 指定选用的<code>authenticator module</code>默认是<code>crammd5</code>，用户可以通过<code>-modules</code>选项进行拓展</li>
<li>-credentials 指定证书路径（可能因<code>authenticator module</code>不同而不一定使用该选项）</li>
</ul>
<h3 id="Slaves"><a href="#Slaves" class="headerlink" title="Slaves"></a>Slaves</h3><ul>
<li>-authenticatee 指定slave使用哪个<code>authenticator module</code>和master的<code>authenticators</code>进行授权。默认是<code>crammd5</code></li>
<li>-credential 指定证书路径</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>这里使用默认的<code>CRAM-MD5</code>进行验证。</p>
<p><strong>1.创建credentials文件</strong></p>
<p>首先为master创建credentials文件，其中的内容像如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">principal1 secret1</div><div class="line">principal2 secret2</div></pre></td></tr></table></figure>
<p><strong>2. 启动master</strong></p>
<p>然后启动master,并使用我们刚刚生成的credentials文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bin/mesos-master.sh --ip=127.0.0.1 --work_dir=/var/lib/mesos --authenticate --authenticate_slaves --credentials=~/credentials</div></pre></td></tr></table></figure></p>
<p><strong>3.创建slave的credentials</strong></p>
<p>像步骤1一样创建slave的credentials</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">principal1 secret1</div></pre></td></tr></table></figure>
<p><strong>4.启动slave</strong></p>
<p>启动slave并进行验证：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/mesos-slave.sh --master=127.0.0.1:5050 --credential=~/slave_credential</div></pre></td></tr></table></figure>
<p><strong>6.framework验证</strong></p>
<p>不同的framework的验证方法可能不同，可以写入<code>scheduler driver</code>的构造方法中，也可以在启动框架时加入，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MESOS_AUTHENTICATE=true DEFAULT_PRINCIPAL=principal2 DEFAULT_SECRET=secret2 ./src/test-framework --master=127.0.0.1:5050</div></pre></td></tr></table></figure>
<p>结果：</p>
<p>使用credentials验证成功的slave:</p>
<p><img src="http://7xpl2y.com1.z0.glb.clouddn.com/QQ20151228-0.png" alt="authenticate_success"></p>
<p>未使用credentials验证的slave:</p>
<p><img src="http://7xpl2y.com1.z0.glb.clouddn.com/QQ20151228-1.png" alt="authenticate_failed"></p>
<p>可以看到未使用的slave无法进行注册</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mesos Monitoring机制总结]]></title>
      <url>http://blog.jetmuffin.com/2015/12/23/mesos-monitor-policy/</url>
      <content type="html"><![CDATA[<p>Mesos的master和slave提供了一组统计数据和指标，使用户能够方便地监控资源使用情况并且尽早发现异常状态。Mesos的监控包括可用资源，已经使用的资源，已经注册的框架，活跃的slave和任务的状态等。开发者可以利用这些监控信息实现自动化的报警，也可以在监控界面里绘制动态的监控图表。</p>
<a id="more"></a>
<h2 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h2><p>Mesos提供了两种不同的指标：<code>counter</code>和<code>gauge</code>。</p>
<p><code>counter</code>（计数器）用来跟踪不连续的事件。它是单向递增的，并且它的类型是自然数。典型的例子就是失败的任务数量、注册的slave数量等。对于这类指标，变化率比数值本身更加重要。</p>
<p><code>gauge</code>(我也不知道怎么翻译好）代表一瞬间的某个属性的测量值。例如当前集群中使用内存的总量，在线的slave连接数量。这类指标通常用来监控其是否在一段时间内高于或低于一个阈值（即是否异常）。</p>
<h2 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h2><h3 id="api"><a href="#api" class="headerlink" title="api"></a>api</h3><p>Master节点的指标对外提供了api，具体可通过浏览器访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://&lt;master-ip&gt;:5050/metrics/snapshot</div></pre></td></tr></table></figure></p>
<p>来进行获取，访问该链接(GET请求）会返回一组JSON串，内容为指标名称和内容的键值对。</p>
<h3 id="1-指标内容：Slave总资源"><a href="#1-指标内容：Slave总资源" class="headerlink" title="1. 指标内容：Slave总资源"></a>1. 指标内容：Slave总资源</h3><p>属于该类别的指标主要包括整个集群的可用资源总量和当前已经使用的资源部分。如果资源使用量持续高举不下，说明应该增加集群的资源总量，或者集群内的某个Framework已经运行失常。</p>
<table>
<thead>
<tr>
<th>指标</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>master/cpus_percent</code></td>
<td>已使用的CPU占总量百分比</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/cpus_used</code></td>
<td>已使用的CPU的个数</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/cpus_total</code></td>
<td>CPU的总数</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/cpus_revocable_percent</code></td>
<td>可回收</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/cpus_revocable_total</code></td>
<td>Number of revocable CPUs</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/cpus_revocable_used</code></td>
<td>Number of allocated revocable CPUs</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/disk_percent</code></td>
<td>已使用的磁盘空间占总量百分比</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/disk_used</code></td>
<td>已使用的磁盘空间(MB为单位)</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/disk_used</code></td>
<td>已使用的磁盘空间(MB为单位)</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/disk_total</code></td>
<td>磁盘总空间(MB为单位)</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/disk_revocable_percent</code></td>
<td>Percentage of allocated revocable disk space</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/disk_revocable_total</code></td>
<td>Revocable disk space in MB</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/disk_revocable_used</code></td>
<td>Allocated revocable disk space in MB</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/mem_percent</code></td>
<td>已使用的内存占总量百分比</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/mem_used</code></td>
<td>已使用的内存（MB为单位）</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/mem_total</code></td>
<td>内存总量（MB为单位）</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/mem_revocable_percent</code></td>
<td>Percentage of allocated revocable memory</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/mem_revocable_total</code></td>
<td>Revocable memory in MB</td>
<td>Gauge</td>
</tr>
<tr>
<td><code>master/mem_revocable_used</code></td>
<td>Allocated revocable memory in MB</td>
<td>Gauge</td>
</tr>
</tbody>
</table>
<h3 id="2-指标内容：Master状态"><a href="#2-指标内容：Master状态" class="headerlink" title="2. 指标内容：Master状态"></a>2. 指标内容：Master状态</h3><p>这部分的指标主要说明Master是否是leading master，它已经启动运行了多长时间。当一个集群经过一段时间依然没有选出leading master，则认为这个集群已经处于故障状态。这说明要么竞选过程出现问题（检查 ZooKeeper 的连接），要么选出的 Master 有故障。此外较短的已经运行时间表明Master近期有过重启。</p>
<table>
<thead>
<tr>
<th>指标</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>master/elected</code></td>
<td>是否是 leading master</td>
<td>Gaude</td>
</tr>
<tr>
<td><code>master/uptime_secs</code></td>
<td>已经运行时间（秒）</td>
<td>Gaude</td>
</tr>
</tbody>
</table>
<h3 id="3-指标内容：Master资源"><a href="#3-指标内容：Master资源" class="headerlink" title="3. 指标内容：Master资源"></a>3. 指标内容：Master资源</h3><p>这部分的指标主要说明指定Master的资源总量和使用情况。Master节点资源使用率长期高居不下，可能会影响集群的整体性能。区别于1中的资源，以下的system的资源特指Master的资源，而1中为Slave的总体资源情况</p>
<table>
<thead>
<tr>
<th>指标</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>system/cpus_total</code></td>
<td>在这个master的可用 CPU 的数量</td>
<td>Guage</td>
</tr>
<tr>
<td><code>system/load_15min</code></td>
<td>过去15分钟的平均负载</td>
<td>Guage</td>
</tr>
<tr>
<td><code>system/load_5min</code></td>
<td>过去5分钟的平均负载</td>
<td>Guage</td>
</tr>
<tr>
<td><code>system/load_1min</code></td>
<td>过去1分钟的平均负载</td>
<td>Guage</td>
</tr>
<tr>
<td><code>system/mem_free_bytes</code></td>
<td>空闲内存的字节数</td>
<td>Guage</td>
</tr>
<tr>
<td><code>system/mem_total_bytes</code></td>
<td>全部内存的字节数</td>
<td>Guage</td>
</tr>
</tbody>
</table>
<h3 id="4-指标内容：Slave状态"><a href="#4-指标内容：Slave状态" class="headerlink" title="4. 指标内容：Slave状态"></a>4. 指标内容：Slave状态</h3><p>改部分的指标主要包括Slave的事件、Slave数量和Slave状态的信息。活跃的Slave数量过少表明这个集群的Slave不健康，或者它们无法连接到当前的leading master。</p>
<table>
<thead>
<tr>
<th>指标</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>master/slave_registrations</code></td>
<td>能够顺利地完成与Master断开然后                                                             重联的Slave的数量</td>
<td>Counter</td>
</tr>
<tr>
<td><code>master/slave_removals</code></td>
<td>各种原因被删除的Slave数量，包括维护</td>
<td>Counter</td>
</tr>
<tr>
<td><code>master/slave_reregistrations</code></td>
<td>重新注册的 slave 的数目</td>
<td>Counter</td>
</tr>
<tr>
<td><code>master/slave_shutdowns_scheduled</code></td>
<td>因为健康检查失败而被计划删除                                                             的 slave 的数量。由于对删除 slave 的速度有限制（Slave Removal Rate-Limit），所以它们不一定会立即被删除。                                                             当他们真正被删掉，指标 master/slave_shutdowns_completed 会增加。</td>
<td>Counter</td>
</tr>
<tr>
<td><code>master/slave_shutdowns_cancelled</code></td>
<td>被取消的删除 slave 操作的数量。                                                               发生在因为删除 Slave 有限速，slave 在被删除之前有机会成功重连并且发送 PONG 给 master</td>
<td>Counter</td>
</tr>
<tr>
<td><code>master/slave_shutdowns_completed</code></td>
<td>成功地被删除了的 Slave 的数量</td>
<td>Counter</td>
</tr>
<tr>
<td><code>master/slaves_active</code></td>
<td>活跃的 slave 的数量</td>
<td>Guage</td>
</tr>
<tr>
<td><code>master/slaves_connected</code></td>
<td>连接在线的 slave 的数量</td>
<td>Guage</td>
</tr>
<tr>
<td><code>master/slaves_disconnected</code></td>
<td>断开离线的 slave 的数量</td>
<td>Guage</td>
</tr>
<tr>
<td><code>master/slaves_inactive</code></td>
<td>不活跃的 slave 的数量</td>
<td>Guage</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FZUOJ 1759 Super A^B mod C 指数循环节]]></title>
      <url>http://blog.jetmuffin.com/2015/12/08/fzuoj-1759-super-a-b-mod-c/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="http://acm.fzu.edu.cn/problem.php?pid=1759" target="_blank" rel="external">http://acm.fzu.edu.cn/problem.php?pid=1759</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定A，B和C的值，求$A^{B}modC的值，其中<code>1&lt;=A,C&lt;=1e10,1&lt;=B&lt;=10e1000000</code></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>今天刚刚学到一个内容，指数降幂公式，即$A^{B}modC=A^{Bmodphi(c)+phi(c)}modC$</p>
<p>用这个公式，可以很方便地对大指数问题进行降维处理。<br><a id="more"></a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000005</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">char</span> str[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">phi</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> res = n;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++)&#123;</div><div class="line">	<span class="keyword">if</span>(n % i == <span class="number">0</span>)&#123;</div><div class="line">	  res = res - res / i;</div><div class="line">	  <span class="keyword">while</span>(n % i == <span class="number">0</span>) n /= i;</div><div class="line">	&#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(n &gt; <span class="number">1</span>)</div><div class="line">	res = res - res / n;</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">multi</span><span class="params">(ll a, ll b, ll m)</span></span>&#123;</div><div class="line">	ll ans = <span class="number">0</span>;</div><div class="line">	a %= m;</div><div class="line">	<span class="keyword">while</span>(b)&#123;</div><div class="line">		<span class="keyword">if</span>(b &amp; <span class="number">1</span>)&#123;</div><div class="line">			ans = (ans + a) % m;</div><div class="line">			b--;</div><div class="line">		&#125;</div><div class="line">		b &gt;&gt;= <span class="number">1</span>;</div><div class="line">		a = (a + a) % m;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">quickmod</span><span class="params">(ll a, ll b, ll m)</span></span>&#123;</div><div class="line">	ll ans = <span class="number">1</span>;</div><div class="line">	a %= m;</div><div class="line">	<span class="keyword">while</span>(b)&#123;</div><div class="line">		<span class="keyword">if</span>(b &amp; <span class="number">1</span>)&#123;</div><div class="line">			ans = multi(ans, a, m);</div><div class="line">			b--;</div><div class="line">		&#125;</div><div class="line">		b &gt;&gt;= <span class="number">1</span>;</div><div class="line">		a = multi(a,a,m);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"> 	ll a,c;</div><div class="line"> 	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%I64d%s%I64d"</span>, &amp;a, str, &amp;c))&#123;</div><div class="line"> 		ll len = <span class="built_in">strlen</span>(str);</div><div class="line"> 		ll ans = <span class="number">0</span>;</div><div class="line"> 		ll p = phi(c);</div><div class="line"> 		<span class="keyword">if</span>(len &lt;= <span class="number">15</span>)&#123;</div><div class="line"> 			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len; i++)</div><div class="line"> 				ans = ans * <span class="number">10</span> + str[i] - <span class="string">'0'</span>;</div><div class="line"> 		&#125;<span class="keyword">else</span>&#123; <span class="comment">// A^B%C = A^(B%phi(C)+phi(C))%C</span></div><div class="line"> 			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i++)&#123;</div><div class="line"> 				ans = ans * <span class="number">10</span> + str[i] - <span class="string">'0'</span>;</div><div class="line"> 				ans %= p;</div><div class="line"> 			&#125;</div><div class="line"> 			ans += p;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, quickmod(a,ans,c));</div><div class="line"> 	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[杭电校赛部分赛题题解]]></title>
      <url>http://blog.jetmuffin.com/2015/11/29/solution-to-hdu-school-contest/</url>
      <content type="html"><![CDATA[<p>下午大家在做题的时候我把后面几个题目写了写，写一个题解和大家分享。简单题大家自己讨论下，可能有什么坑的，自己细心点就行了。这里主要写一下<code>1003</code>，<code>1005</code>，<code>1006</code>，<code>1007</code>的题解。下午没怎么认真做，代码写的乱七八糟，大家见谅。</p>
<a id="more"></a>
<h2 id="1003-玩骰子"><a href="#1003-玩骰子" class="headerlink" title="1003 玩骰子"></a>1003 玩骰子</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>两个人扔骰子，根据规则（有三条、对子、散牌什么的，具体看题）比较大小，大的人赢。现在主角已经扔了一个结果了，然后对方也扔了一个结果，主角有一个机会选择一个数重新扔一次，问获胜的几率有多少。</p>
<p>这里有个需要理解一下的地方，<strong>因为主角很机智</strong>，所以肯定不会选择毫无胜算的数字来重新扔（就是选择了一个数字，重新扔骰子，扔出来的数字不管是多少都不会改变输的结果），所以算概率的时候分母注意一下不是全部的可能性，而是选择的可能性。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题就是个大模拟。。写一个结构体把比较函数写清楚了（<strong>注意罗列所有情况</strong>），然后暴力枚举吧，注意如果win的数量为0，就不要加tot了，然后取所有数里面赢的概率最大的为结果。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x &gt; y;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> vis[<span class="number">6</span>];</div><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n[<span class="number">3</span>];</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="keyword">int</span> tn;</div><div class="line">    <span class="keyword">int</span> tnn;</div><div class="line">    node(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)&#123;</div><div class="line">        n[<span class="number">0</span>] = a;</div><div class="line">        n[<span class="number">1</span>] = b;</div><div class="line">        n[<span class="number">2</span>] = c;</div><div class="line">        sort(n, n+<span class="number">3</span>, cmp);</div><div class="line">        <span class="keyword">if</span>(n[<span class="number">0</span>] == n[<span class="number">2</span>])&#123;</div><div class="line">            t = <span class="number">3</span>;</div><div class="line">            tn = n[<span class="number">0</span>];</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n[<span class="number">0</span>] == n[<span class="number">1</span>])&#123;</div><div class="line">            t = <span class="number">2</span>;</div><div class="line">            tn = n[<span class="number">1</span>];</div><div class="line">            tnn = n[<span class="number">2</span>];</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n[<span class="number">1</span>] == n[<span class="number">2</span>])&#123;</div><div class="line">            t = <span class="number">2</span>;</div><div class="line">            tn = n[<span class="number">1</span>];</div><div class="line">            tnn = n[<span class="number">0</span>];</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            t = <span class="number">1</span>;</div><div class="line">            tn = n[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ncmp</span><span class="params">(node y)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(t == y.t)&#123;</div><div class="line">            <span class="keyword">if</span>(t == <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(n[<span class="number">0</span>] == y.n[<span class="number">0</span>])&#123;</div><div class="line">                    <span class="keyword">if</span>(n[<span class="number">1</span>] == y.n[<span class="number">1</span>])&#123;</div><div class="line">                        <span class="keyword">if</span>(n[<span class="number">2</span>] == y.n[<span class="number">2</span>])&#123;</div><div class="line">                            <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">                        &#125;<span class="keyword">else</span>&#123;</div><div class="line">                            <span class="keyword">return</span> n[<span class="number">2</span>] &gt; y.n[<span class="number">2</span>];</div><div class="line">                        &#125;</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">return</span> n[<span class="number">1</span>] &gt; y.n[<span class="number">1</span>];</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">return</span> n[<span class="number">0</span>] &gt; y.n[<span class="number">0</span>];</div><div class="line">                &#125;                </div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">2</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(tn == y.tn)&#123;</div><div class="line">                    <span class="keyword">return</span> tnn &gt; y.tnn;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">return</span> tn &gt; y.tn;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> n[<span class="number">0</span>] &gt; y.n[<span class="number">0</span>]; </div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> t &gt; y.t;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;n[<span class="number">0</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;n[<span class="number">1</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;n[<span class="number">2</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;t&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b, c,d,e,f;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>,&amp;a,&amp;b,&amp;c,&amp;d,&amp;e,&amp;f);</div><div class="line">        node x = node(a,b,c);</div><div class="line">        node y = node(d,e,f);</div><div class="line">        <span class="comment">// x.print();</span></div><div class="line">        <span class="comment">// y.print();</span></div><div class="line">        <span class="comment">// cout&lt;&lt;x.ncmp(y)&lt;&lt;endl;        </span></div><div class="line">        <span class="keyword">if</span>(x.ncmp(y)==<span class="number">1</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>, <span class="number">1.0</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> tot = <span class="number">6</span>;</div><div class="line">        <span class="keyword">int</span> win = <span class="number">0</span>;</div><div class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">6</span>; i++)&#123;</div><div class="line">            node z = node(i,b,c);</div><div class="line">            <span class="keyword">if</span>(z.ncmp(y)==<span class="number">1</span>)&#123;</div><div class="line">                win++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ans = max(ans,(<span class="keyword">double</span>)win/(<span class="keyword">double</span>)tot);</div><div class="line"></div><div class="line">        win = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">6</span>; i++)&#123;</div><div class="line">            node z = node(a,i,c);</div><div class="line">            <span class="keyword">if</span>(z.ncmp(y)==<span class="number">1</span>)&#123;</div><div class="line">                win++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ans = max(ans,(<span class="keyword">double</span>)win/(<span class="keyword">double</span>)tot);</div><div class="line"></div><div class="line">        win = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">6</span>; i++)&#123;</div><div class="line">            node z = node(a,b,i);</div><div class="line">            <span class="keyword">if</span>(z.ncmp(y)==<span class="number">1</span>)&#123;</div><div class="line">                win++;</div><div class="line">            &#125;</div><div class="line">        &#125;    </div><div class="line">        ans = max(ans,(<span class="keyword">double</span>)win/(<span class="keyword">double</span>)tot);</div><div class="line">       </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.3f\n"</span>, ans);      </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ACM组队安排"><a href="#ACM组队安排" class="headerlink" title="ACM组队安排"></a>ACM组队安排</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>n个人组队，每队人数可以为1或2或3，问组队的方案数。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void dfs(int a, int b, int c)&#123;</div><div class="line">	//a为组队人数3的队伍数，b为组队人数2的队伍数，类推。。。</div><div class="line">	dfs(a,b+1,c-2) //取两个孤立的人组成一队2个人的</div><div class="line">	dfs(a+1,b-1,c-1) //取1个孤立的人和1队2人的组成1队3人的</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了把所有状态都搜遍，我们从<code>dfs(0,0,n)</code>开始，按上述的搜索方法进行搜索，标记已经访问过的状态vis[a][b][c]。</p>
<p>然后对于某个状态<code>(a,b,c)</code>，求方案数用排列组合的思路搞搞就出来了。</p>
<p>例如<code>(1,2,1)</code>，方案数是<code>C(3,8)/1! * (C(2,5) * C(2,3))/2! * C(1,1)/1!</code>。具体就是，8个人挑3个人，5个人挑2个，3个人挑2个，剩下1个人, 各算出方案数，然后乘法原理乘一下就是的了。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">ll ans = <span class="number">0</span>;</div><div class="line">ll fact[<span class="number">11</span>];</div><div class="line"><span class="keyword">int</span> vis[<span class="number">25</span>][<span class="number">25</span>][<span class="number">25</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    fact[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">10</span>; i++)&#123;</div><div class="line">        fact[i] = fact[i<span class="number">-1</span>]*i;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">c2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(n &lt; <span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> n*(n<span class="number">-1</span>)/<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">c3</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(n &lt; <span class="number">3</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> n*(n<span class="number">-1</span>)*(n<span class="number">-2</span>)/<span class="number">6</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    ll t = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> k = a*<span class="number">3</span>+b*<span class="number">2</span>+c;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a; i++)&#123;</div><div class="line">        t *= c3(k);</div><div class="line">        k -= <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(a)</div><div class="line">        t/=fact[a];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b; i++)&#123;</div><div class="line">        t *= c2(k);</div><div class="line">        k -= <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(b)</div><div class="line">        t/=fact[b];    </div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>&#123;</div><div class="line">    vis[a][b][c] = <span class="literal">true</span>;</div><div class="line">    <span class="comment">// cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;" "&lt;&lt;c&lt;&lt;" "&lt;&lt;sum(a,b,c)&lt;&lt;endl;</span></div><div class="line">    ans += sum(a,b,c);</div><div class="line">    <span class="keyword">if</span>(c<span class="number">-2</span>&gt;=<span class="number">0</span> &amp;&amp; !vis[a][b+<span class="number">1</span>][c<span class="number">-2</span>])&#123;</div><div class="line">        dfs(a, b+<span class="number">1</span>, c<span class="number">-2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(b<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; c<span class="number">-1</span> &gt;=<span class="number">0</span> &amp;&amp; !vis[a+<span class="number">1</span>][b<span class="number">-1</span>][c<span class="number">-1</span>])&#123;</div><div class="line">        dfs(a+<span class="number">1</span>, b<span class="number">-1</span>, c<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    init();</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) &amp;&amp; n)&#123;</div><div class="line">        ans = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>,n);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="comment">// cout&lt;&lt;sum(1, 1, 0)&lt;&lt;endl;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>以上思路为错误方法~~~</strong>(虽然可以过这道题)。</p>
<p>在写的时候忽然发现这是一道<strong>很简单的dp</strong>…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">f[i]=f[i-1];//第i个人自己组队</div><div class="line">f[i]+=f[i-2]*(i-1);//第i个人与前面i-1个人中的一个人组队，有i-1种方法，剩下的i-2个人进行组队，即f[i-2]种方法。</div><div class="line">f[i]+=f[i-3]*(i-1)*(i-2)/2;//前面的i-1个人中，挑2个人和第i个人组队(C(2,n-1)，剩余i-3个人组队(f(i-3))</div></pre></td></tr></table></figure>
<p>然后f[1]，f[2]，f[3]都告诉你了，然后你懂的了。。</p>
<p>所以大家还是按正确的方法写吧…ORZ~</p>
<h2 id="1006-逆袭指数"><a href="#1006-逆袭指数" class="headerlink" title="1006 逆袭指数"></a>1006 逆袭指数</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给定一个数n，求n的最长的连续的因子，输出为<code>i*(i+1)*(i+2)...</code>。同时乘起来的因子还是n的因子。<br>如<code>630：5*6*7</code>，5*6*7=210是630的因子。</p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>直接上去暴力搞，枚举n的所有因子p，然后从p开始向后枚举，枚举到最长的时候就行。由于大多数因子连续都在前面的数里，所以复杂度不会很高。</p>
<p><strong>注意：</strong>从p向后枚举时要枚举到n为止而不是sqrt(n)。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; fac;</div><div class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</div><div class="line"><span class="keyword">bool</span> vis[<span class="number">1000000</span>];</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t = n;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(t % i == <span class="number">0</span>)&#123;</div><div class="line">            t /= i;</div><div class="line">            vis[i] = <span class="literal">true</span>;</div><div class="line">            len++;</div><div class="line">            v.push_back(i);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(len &gt; ans)&#123;</div><div class="line">        ans = len;</div><div class="line">        <span class="keyword">int</span> size = v.size();</div><div class="line">        path.clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++)</div><div class="line">            path.push_back(v[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n))&#123;</div><div class="line">        ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> size = fac.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i*i &lt;= n; i++)&#123;</div><div class="line">                dfs(i);</div><div class="line">        &#125;</div><div class="line">        size = path.size();</div><div class="line">        <span class="keyword">if</span>(ans == <span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"1"</span>);</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(i &lt; ans<span class="number">-1</span>)</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;path[i]&lt;&lt;<span class="string">"*"</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="built_in">cout</span>&lt;&lt;path[i];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1007-油菜花王国"><a href="#1007-油菜花王国" class="headerlink" title="1007 油菜花王国"></a>1007 油菜花王国</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>现在有n个精力，输入他们的能力k[i]，如果k[i]是斐波那契数，那么他的威望值f[i]为1，反之为0.然后给了m个关系(u,v)表示u和v是同一个家族，家族的威望是他们的和。最后求威望最大的家族的威望。</p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>额，非常裸的<strong>并查集</strong>。</p>
<p>首先，斐波那契判断很方便，预处理一下存数组就行了。<strong>注意：不用快速幂什么的。。因为大概第45项就超过1000000000了。。</strong>，然后判断也就从前往后扫如果相等就返回。。反之随便搞搞。。</p>
<p>然后是并查集，直接上模板，记得合并<code>merge</code>操作的时候，把子节点的威望加到父节点上去。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line">ll fibo[<span class="number">50</span>];</div><div class="line"><span class="keyword">int</span> f[<span class="number">1050</span>];</div><div class="line"><span class="keyword">int</span> fa[<span class="number">1050</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    fibo[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    fibo[<span class="number">2</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">45</span>; i++)&#123;</div><div class="line">        fibo[i] = fibo[i<span class="number">-2</span>] + fibo[i<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">45</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(n == fibo[i])</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(n &lt; fibo[i])</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(x != fa[x])</div><div class="line">        fa[x] = find(fa[x]);</div><div class="line">    <span class="keyword">return</span> fa[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a = find(x),b = find(y);</div><div class="line">    <span class="keyword">if</span>(a != b)&#123;</div><div class="line">        fa[b] = a;</div><div class="line">        f[a] += f[b];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</div><div class="line">        <span class="keyword">int</span> u,v,t;</div><div class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</div><div class="line">        <span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span>(fa));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n; i++)&#123;</div><div class="line">            fa[i] = i;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">            f[i] = check(t);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</div><div class="line">            merge(u,v);            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(f[i] &gt; ans)&#123;</div><div class="line">                ans = f[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h3><p>题目都很简单，大家最好在之后都去把没做出来的题目再做做，继续刷题！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mesos 调度机制及调度算法初探]]></title>
      <url>http://blog.jetmuffin.com/2015/11/23/schedule-policy-of-mesos/</url>
      <content type="html"><![CDATA[<p>再次分析Mesos的工作原理，将Mesos中出现的各个名词串联到一起。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Mesos是Apache下的开源分布式资源管理框架，它被称为是分布式系统的内核,Mesos将集群的所有节点的数据统一进行管理，打造一个DCOS(Data Center Operation System)的概念。调度算法是Mesos最核心也是灵魂部分。</p>
<h2 id="调度架构"><a href="#调度架构" class="headerlink" title="调度架构"></a>调度架构</h2><h3 id="1-两层架构"><a href="#1-两层架构" class="headerlink" title="1. 两层架构"></a>1. 两层架构</h3><p><strong>第一层，由Mesos将资源分配给框架；第二层，框架自己的调度器将资源分配给自己内部的任务。</strong>两层框架可以使得Mesos不需要知道任务的资源需求量，不需要知道任务的类型和数据存储，只需要和框架进行交互就行了。</p>
<h3 id="2-Resource-Offer"><a href="#2-Resource-Offer" class="headerlink" title="2. Resource Offer"></a>2. Resource Offer</h3><p>Mesos中的调度机制被称为<strong>“Resource Offer”</strong>，采用了基于资源量的调度机制。在Mesos中，Slave直接将资源量（CPU和内存）汇报给Master，由master将资源量按照某种机制分配给Framework，其中，“某种机制”是<code>“Dominant Resource Fairness（DRF）”</code>，在后面会提到该内容。</p>
<p>Framework可以根据是否符合任务对资源的约束，选择接受或拒绝<code>offer</code>。一旦<code>offer</code>被接受，Framework将与Master协作调度任务，并在数据中心的相应Slave节点上运行任务。</p>
<p>两个使<code>Resource Offer</code>高效且具有鲁棒性的附加机制：</p>
<ol>
<li><p><strong>filters机制：</strong> 每次调度，<code>mesos-master</code>和<code>framework-scheduler</code>需要进行通信，如果过多的拒绝<code>offer</code>会带来额外的通信开销，因此mesos提供了<code>filters</code>机制，允许Framework只接收<strong>资源量大于L的offer</strong>（换句话说被过滤的offer不会发送到Framework)</p>
</li>
<li><p><strong>rescinds机制：</strong> 如果某个Framework接受了某个<code>offer</code>，然而长时间没有为该<code>offer</code>分配任务，而占有该<code>offer</code>（占着xx不xx），Mesos会回收其<code>offer</code>，并将其分配给其他Framework</p>
</li>
</ol>
<h2 id="调度工作流程"><a href="#调度工作流程" class="headerlink" title="调度工作流程"></a>调度工作流程</h2><p><img src="/uploads/images/2015/11/23/mesos-workflow.png" alt="mesos-workflow"></p>
<p>如上图所示，整个资源调度的工作过程为：</p>
<ol>
<li><p><code>Slave</code>定期向<code>Master</code>汇报其机器上的资源情况（包括cpu,mem,disk,port等）。</p>
</li>
<li><p><code>Master</code>上的模块<code>Allocator</code>根据<code>DRF</code>算法决定要讲资源分配给哪个<code>Framework</code>，并将资源以<code>offer</code>形式发送给分配的<code>Framework</code>。（一层调度）</p>
</li>
<li><p><code>Framework</code>编写时约束了每个<code>Task</code>执行需要的资源（cpu,mem,disk等），Framework根据约束筛选分配到的<code>offer</code>，可以选择接受<code>offer</code>，或者拒绝<code>offer</code>。若拒绝，<code>offer</code>随即可以被给其他<code>Framework</code>。（二层调度）</p>
</li>
<li><p>每个<code>Task</code>对应一个<code>offer</code>，也对应一个<code>Slave</code>，则该<code>Task</code>会被该<code>Slave</code>上的守护进程<code>Executor</code>执行。同时，为了<strong>资源隔离</strong>，Mesos为任务的执行提供了<code>Isolator</code>隔离器，为了保证资源不会被其他<code>Task</code>访问，可用的Isolator有<code>Linux Container</code>，<code>Docker</code>等。</p>
</li>
<li><p>由于<code>Master</code>很有可能出现单点故障，因此需要设立多<code>Master</code>，利用<code>Zookeeper</code>容错，保证集群运行的一致性。</p>
</li>
</ol>
<p><strong>补充：</strong>Mesos提供了拓展模块，使得我们如果要修改Mesos的部分内容，可以不用修改源码重新编译，而在以上流程中的<code>Allocator（重写调度方法）</code>、<code>Isolator（重写资源隔离方法）</code>均可以进行拓展，此外我还发现了Slave上的<code>Estimator</code>也能进行重写拓展，具体内容之后补充。</p>
<h2 id="DRF算法"><a href="#DRF算法" class="headerlink" title="DRF算法"></a>DRF算法</h2><p>如何作出offer分配的决定是由资源分配模块<code>Allocator</code>实现的，该模块存在于Master之中。资源分配模块确定Framework接受offer的顺序，与此同时，确保在资源利用最大化的条件下公平地共享资源。</p>
<p>由于Mesos为跨数据中心调度资源并且是异构的资源需求时，资源分配相比普通调度将会更加困难。因此Mesos采用了<code>DRF（主导资源公平算法 Dominant Resource Fairness）</code>,该算法同样出自于UC Berkeley。DRF的目标是确保每一个用户，即Mesos中的Framework，在异质环境中能够接收到其最需资源的公平份额。</p>
<p>Framework拥有的全部资源类型份额中占最高百分比的就是Framework的<code>主导份额</code>。DRF算法会使用所有已注册的Framework来计算<code>主导份额</code>，以确保每个Framework能接收到其<code>主导资源</code>的<code>公平份额</code>。</p>
<p>Mesos源码中默认的Allocator，即<code>HierarchicalDRFAllocator</code>的位置在<code>$MESOS_HOME/src/master/allocator/mesos/hierarchical.hpp</code>，而DRF中对每个Framework排序的<code>Sorter</code>位于<code>$MESOS_HOME/src/master/allocator/sorter/drf/sorter.cpp</code>，可以查看其源码了解它的工作原理。</p>
<h3 id="一个说明性的例子"><a href="#一个说明性的例子" class="headerlink" title="一个说明性的例子"></a>一个说明性的例子</h3><p>考虑一个<code>9CPU，18GBRAM</code>的系统，拥有两个用户，其中用户A运行的任务的需求向量为<code>{1CPU, 4GB}</code>，用户B运行的任务的需求向量为<code>{3CPU，1GB}</code>，用户可以执行尽量多的任务来使用系统的资源。</p>
<p>在上述方案中，A的每个任务消耗总cpu的<code>1/9</code>和总内存的<code>2/9</code>，所以A的<strong>dominant resource</strong>是<code>内存</code>；B的每个任务消耗总cpu的<code>1/3</code>和总内存的<code>1/18</code>，所以B的<strong>dominant resource</strong>为<code>CPU</code>。DRF会均衡用户的<strong>dominant shares</strong>，执行3个用户A的任务，执行2个用户B的任务。三个用户A的任务总共消耗了{3CPU，12GB}，两个用户B的任务总共消耗了{6CPU，2GB}；在这个分配中，每一个用户的<strong>dominant share</strong>是相等的，用户A获得了2/3的RAM，而用户B获得了2/3的CPU。</p>
<p>以上的这个分配可以用如下方式计算出来：x和y分别是用户A和用户B的分配任务的数目，那么用户A消耗了{xCPU，4xGB}，用户B消耗了{3yCPU，yGB}，在图三中用户A和用户B消耗了同等dominant resource；用户A的dominant share为4x/18，用户B的dominant share为3y/9。所以DRF分配可以通过求解以下的优化问题来得到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">max(x,y)            	#(Maximize allocations)</div><div class="line">	subject to</div><div class="line">		x + 3y &lt;= 9 		#(CPU constraint)</div><div class="line">		4x + y &lt;= 18 		#(Memory Constraint)</div><div class="line">			2x/9 = y/3 	#(Equalize dominant shares)</div></pre></td></tr></table></figure>
<p>最后解出<code>x=3</code>以及<code>y=2</code>，因而用户A获得{3CPU，12GB}，B得到{6CPU， 2GB}。</p>
<h3 id="DRF在Mesos中的一个例子"><a href="#DRF在Mesos中的一个例子" class="headerlink" title="DRF在Mesos中的一个例子"></a>DRF在Mesos中的一个例子</h3><p>换个使用场景，假设有数据中心包含一个offer为9核CPU和18GB内存。Framework 1运行的任务需要（1核CPU、4GB内存），Framework 2运行的任务需要（3核CPU、2GB内存）。Framework 1的任务会消耗CPU总数的1/9、内存总数的2/9，Framework 1的主导资源是内存。同样，Framework 2的每个任务会CPU总数的1/3、内存总数的1/18，Framework 2的主导资源是CPU。</p>
<p><img src="http://cdn3.infoqstatic.com/statics_s1_20151118-0143/resource/articles/analyse-mesos-part-04/zh/resources/0604003.jpg" alt="DRF-Table"></p>
<p>上面表中的每一行提供了以下信息：</p>
<ul>
<li><strong>Framework chosen：</strong>收到最新offer的Framework。</li>
<li><strong>Resource Shares：</strong>给定时间内Framework接受的资源总数，包括CPU和内存，以占资源总量的比例表示。</li>
<li><strong>Dominant Share（主导份额：</strong>给定时间内Framework主导资源占总份额的比例，以占资源总量的比例表示。</li>
<li><strong>Dominant Share %（主导份额百分比）：</strong>给定时间内Framework主导资源占总份额的百分比，以占资源总量的百分比表示。</li>
<li><strong>CPU Total Allocation：</strong>给定时间内接受的所有Framework的总CPU资源。</li>
<li><strong>RAM Total Allocation：</strong>给定时间内接受的所有Framework的总内存资源。</li>
</ul>
<p>最初，两个Framework的主导份额是0％，我们假设DRF首先选择的是Framework 2，当然我们也可以假设Framework 1，但是最终的结果是一样的。</p>
<ol>
<li>Framework 2接收offer并运行任务，使其主导资源成为CPU，主导份额增加至33％。</li>
<li>由于Framework 1的主导份额维持在0％，它接收offer并运行任务，主导份额的主导资源（内存）增加至22％。</li>
<li>由于Framework 1仍具有较低的主导份额，它接收offer并运行任务，增 加其主导份额至44％。</li>
<li>然后DRF将offer发送给Framework 2，因为它现在拥有更低的主导份额。</li>
<li>该过程继续进行，直到由于缺乏可用资源，不能运行新的任务。在这种情况下，CPU资源已经饱和。</li>
<li>然后该过程将使用一组新的offer重复进行。</li>
</ol>
<p><strong>需要注意的是</strong>：可以创建一个资源分配模块，使用加权的DRF使其偏向某个Framework或某组Framework。如前面所提到的，也可以创建一些自定义模块来提供组织特定的分配策略。</p>
<h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><ul>
<li>细粒度分配资源（细到每个任务在哪个机器上跑）,这是最显而易见的好处，也是Mesos社区和Mesosphere经常津津乐道的。</li>
</ul>
<p><img src="http://cdn2.infoqstatic.com/statics_s2_20151118-0143/resource/articles/analyse-mesos-part-02/zh/resources/mesos-elastic-cea4da90b3c819bd96b3158da1a6f86b.jpg" alt="Elastic Sharing"></p>
<ul>
<li>支持各类应用资源共同管理，不用担心各个应用的资源冲突。</li>
</ul>
<p><img src="http://cdn2.infoqstatic.com/statics_s2_20151118-0143/resource/articles/analyse-mesos-part-02/zh/resources/mesos_frameworks.png" alt="Mesos Frameworks"></p>
<h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p>在众多文章中看到大家对Mesos缺陷评价的一些共同点:</p>
<ul>
<li><p>Mesos中的DRF调度算法过分的追求公平，没有考虑到实际的应用需求。</p>
</li>
<li><p>Mesos采用了Resource Offer机制，这种调度机制面临着资源碎片问题，即：每个节点上的资源不可能全部被分配完，剩下的一点可能不足以让任何任务运行，这样，便产生了类似于操作系统中的内存碎片问题。</p>
</li>
<li><p>由于Mesos采用了双层调度机制，在实际调度时，将面临设计决策问题：第一层和第二层调度器分别实现哪几个调度机制，即：将大部分调度机制放到第一层调度器，还是第一层调度器仅支持简单的资源分配</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[给Mesos换一个新的WebUI]]></title>
      <url>http://blog.jetmuffin.com/2015/11/23/change-mesos-ui/</url>
      <content type="html"><![CDATA[<p>虽然Mesos已经给用户提供了一个webui(<code>http://master:5050</code>)，然而这个UI无法很直观地显示集群的资源状况，因此可以给Mesos换一个更帅气的UI！</p>
<a id="more"></a>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>由于项目需要<code>nodejs</code>和<code>npm</code>环境，所以最好先配置好<code>nodejs</code>环境，最好<code>node</code>版本高于4.0，不然可能会出现错误。</p>
<p>然后是构建项目需要的<code>gulp</code>，运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g gulp</div></pre></td></tr></table></figure>
<p>就可以了</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里使用的是<a href="https://github.com/Capgemini" target="_blank" rel="external">Capgemini</a> group写的开源UI，首先感谢一下作者们~</p>
<p>项目地址为<a href="https://github.com/Capgemini/mesos-ui" target="_blank" rel="external">Capgemini/mesos-ui</a></p>
<p>首先把整个项目clone下来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/Capgemini/mesos-ui mesos-ui</div></pre></td></tr></table></figure>
<p>然后安装相关的依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd mesos-ui</div><div class="line">sudo npm install</div></pre></td></tr></table></figure>
<p>最后使用<code>gulp</code>对项目进行build就行了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp build</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Mesos配置web地址非常方便，只需要在启动Mesos时添加<code>webui_dir=your_webui_dir</code>就好了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/mesos-master.sh --ip=127.0.0.1 --work_dir=/var/lib/mesos --webui_dir=your_webui_dir</div></pre></td></tr></table></figure>
<p>如果你的Mesos是以service的形式存在（换句话说就是不用自己手动启），也可以这么搞<code>export MESOS_WEBUI_DIR=/your-path/mesos-ui/build/</code>，然后重启服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service mesos-master restart</div></pre></td></tr></table></figure>
<p>也就OK了</p>
<p>然后可以登陆<code>127.0.0.1:5050</code>去看看新UI了~</p>
<p><img src="/uploads/images/2015/11/23/mesos-ui.png" alt="mesos-ui"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac OS X 安装Less编译器]]></title>
      <url>http://blog.jetmuffin.com/2015/11/18/install-less-compiler-on-mac-os-x/</url>
      <content type="html"><![CDATA[<p>Less是动态的CSS预处理语言，包含了很多动态语言的特性，之前在ubuntu下装过lessc来编译Less,换了Mac后发现找不到方法安装了，事实上用nodejs来安装，这里记录一下。</p>
<a id="more"></a>
<p>在原Ubuntu下安装lessc很简单，直接执行<code>sudo apt-get install node-less</code>就行了</p>
<p>然而在Mac OS X下，<code>brew install node-less</code>找不到相应的包，需要用<code>nodejs</code>来安装：</p>
<ol>
<li>安装<code>nodejs</code>和<code>npm</code></li>
<li>执行<code>npm install -g less</code></li>
<li>编译something <code>lessc style.less</code></li>
</ol>
<p>同时我们可以在WebStorm中使用<code>file watcher</code>来监视文件的修改，直接生成css</p>
<ol>
<li>找到<code>lessc</code>的位置，<code>which lessc</code>,一般lessc都在<code>/usr/local/bin/lessc</code></li>
<li>在WebStorm中的”Preferences”里找到”File Wathcers”选项，在其中添加Less的watcher，其中的Program填入<code>/usr/local/bin/lessc</code>就行了</li>
</ol>
<p>效果如图:</p>
<p><img src="/uploads/images/2015/11/18/QQ20151118-0@2x.png" alt="filewatcher"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用Docker和Marathon构建带数据分析的Web应用]]></title>
      <url>http://blog.jetmuffin.com/2015/11/16/use-docker-and-marathon-to-build-web-service-with-data-analysis/</url>
      <content type="html"><![CDATA[<p>利用搭建的Mesos、Marathon和Docker的环境，搭建一个带数据分析模块的Web应用。</p>
<a id="more"></a>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>该应用是一个网上商店（mesosphere官网给的demo…)，是个虚构的在线商店，由(nginx+Redis)提供Web服务，同时通过ELK构建日志搜索部分。<br>整个应用的架构如下：</p>
<p><img src="/uploads/images/11/16/m-shop-architecture-final-800x532@2x.png" alt="architecture"></p>
<p>整个应用的<code>系统</code>部分使用(Mesos+Marathon+Docker)构建，用的是之前我们用<code>vagrant</code>建好的集群。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>下面记录下整个应用的构建步骤：</p>
<p><strong>(以下操作均在<code>node1</code>中进行)</strong></p>
<p>首先从mesosphere官方的Github仓库clone下来所需要用到的配置和程序<a href="https://github.com/mhausenblas/m-shop" target="_blank" rel="external">mhausenblas/m-shop</a>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/mhausenblas/m-shop</div></pre></td></tr></table></figure>
<p>OK,然后我们要使用Marathon中的REST接口来处理之后的应用请求了</p>
<p>首先，查看所有的应用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl http://node1:8080/v2/apps</div><div class="line">&#123;&quot;apps&quot;:[&#123;&quot;id&quot;:&quot;/webapp&quot;,&quot;cmd&quot;:&quot;python -m SimpleHTTPServer&quot;,&quot;args&quot;:null,&quot;user&quot;:null,&quot;env&quot;:&#123;&#125;,&quot;instances&quot;:1,&quot;cpus&quot;:0.1,&quot;mem&quot;:16.0,&quot;disk&quot;:0.0,&quot;executor&quot;:&quot;&quot;,&quot;constraints&quot;:[],&quot;uris&quot;:[],&quot;storeUrls&quot;:[],&quot;ports&quot;:[10000],&quot;requirePorts&quot;:false,&quot;backoffSeconds&quot;:1,&quot;backoffFactor&quot;:1.15,&quot;maxLaunchDelaySeconds&quot;:3600,&quot;container&quot;:null,&quot;healthChecks&quot;:[],&quot;dependencies&quot;:[],&quot;upgradeStrategy&quot;:&#123;&quot;minimumHealthCapacity&quot;:1.0,&quot;maximumOverCapacity&quot;:1.0&#125;,&quot;labels&quot;:&#123;&#125;,&quot;acceptedResourceRoles&quot;:null,&quot;version&quot;:&quot;2015-11-15T11:55:42.437Z&quot;,&quot;versionInfo&quot;:&#123;&quot;lastScalingAt&quot;:&quot;2015-11-15T11:55:42.437Z&quot;,&quot;lastConfigChangeAt&quot;:&quot;2015-11-09T08:37:51.733Z&quot;&#125;,&quot;tasksStaged&quot;:0,&quot;tasksRunning&quot;:1,&quot;tasksHealthy&quot;:0,&quot;tasksUnhealthy&quot;:0,&quot;deployments&quot;:[]&#125;]&#125;[</div></pre></td></tr></table></figure>
<p>然后把这个没用的<code>webapp</code>给DELETE掉</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl -X DELETE http://node1:8080/v2/apps/webapp</div><div class="line">&#123;&quot;version&quot;:&quot;2015-11-16T12:41:39.408Z&quot;,&quot;deploymentId&quot;:&quot;e8cc87f5-916b-4cab-9266-f72bb9756a56&quot;&#125;</div></pre></td></tr></table></figure>
<p>然后把<code>system group</code>里的<code>mesos-dns</code>和<code>sedi</code>服务给PUT上去</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl -X PUT &quot;http://node1:8080/v2/groups&quot; -d @m-shop/mesos-dns/system.json -H &quot;Content-type: application/json&quot;</div><div class="line">&#123;&quot;version&quot;:&quot;2015-11-16T13:09:13.545Z&quot;,&quot;deploymentId&quot;:&quot;98c3f565-f1fc-4162-b560-9f20ca5</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu-5546-Acient-go-CCPC-G题-BFS]]></title>
      <url>http://blog.jetmuffin.com/2015/11/12/hdu-5546-Acient-go-CCPC-G-BFS/</url>
      <content type="html"><![CDATA[<h1 id="hdu-5546-Acient-go-CCPC-G题-BFS"><a href="#hdu-5546-Acient-go-CCPC-G题-BFS" class="headerlink" title="hdu 5546 Acient go CCPC G题 BFS"></a>hdu 5546 Acient go CCPC G题 BFS</h1><p>CCPC(中国大学生程序设计竞赛）G题<code>Acient go</code>解题报告</p>
<a id="more"></a>
<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5546" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5546</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>两人下棋，给定了现在的棋盘状况，轮到当前玩家下棋，问是否能够下一步棋将对方棋子吃掉</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>当时在赛场上的思路还是正确的，求每个联通块周围的<code>.</code>的个数，计算的方法用bfs。然而我们在另一个地方出现了分歧，是否要取掉现在棋盘上已经被吃掉的棋子？题目上写着</p>
<blockquote>
<p>When one of the player makes his move, check the opponent’s first. After removing the dead opponent;s components, check with the player’s components and remove the dead components.</p>
</blockquote>
<p>然后我们就针对着这句话纠结了好久，要不要拿掉对方的死子，要不要拿掉自己的死子，孰先孰后？</p>
<p>然而这也不是重点，敲完代码交了好几发WA，一直找不到错误出在哪里，卡了很久很久。</p>
<p>赛后良哥才发现一个最重要的问题，bfs计算每个联通块周围的<code>.</code>时，有可能会出现一个<code>.</code>被计算多次，顿时醒悟。</p>
<p>回来后把代码重新敲了，成功得到一个<code>Accept</code>，也是感慨地不行。</p>
<p>错误情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">. . x x .</div><div class="line">. x o o x</div><div class="line">. . . o x</div><div class="line">. x o o x</div><div class="line">. . x x .</div></pre></td></tr></table></figure>
<p>若简单相加，3行3列处的<code>.</code>会重复累加导致错误，正确的计算方法是类似<code>floodfill</code>的算法把每个联通块标号，相同联通块只能访问同一个<code>.</code>一次，而不同的联通块可以同时访问一个<code>.</code></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> cb[<span class="number">20</span>][<span class="number">20</span>];</div><div class="line"><span class="keyword">char</span> s[<span class="number">9</span>];</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    node()&#123;&#125;</div><div class="line">    node(<span class="keyword">int</span> a,<span class="keyword">int</span> b):x(a),y(b)&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">" "</span>&lt;&lt;y&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">queue</span> &lt;node&gt;q;</div><div class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> vis[<span class="number">20</span>][<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> colors[<span class="number">20</span>][<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</div><div class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> tot,color;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    node a = node(x, y);</div><div class="line">    q.push(a);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        node b = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">int</span> curx = b.x;</div><div class="line">        <span class="keyword">int</span> cury = b.y;</div><div class="line">        vis[curx][cury] = <span class="number">1</span>;    </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)&#123;</div><div class="line">            <span class="keyword">int</span> nextx = curx + dx[k];</div><div class="line">            <span class="keyword">int</span> nexty = cury + dy[k];</div><div class="line">            <span class="keyword">if</span>(cb[nextx][nexty] == <span class="string">'.'</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(colors[nextx][nexty] != color)&#123;</div><div class="line">                    tot++;</div><div class="line">                    colors[nextx][nexty] = color;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cb[nextx][nexty] == <span class="string">'o'</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(!vis[nextx][nexty])&#123;</div><div class="line">                    q.push(node(nextx,nexty));    </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;    </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">()</span></span>&#123;</div><div class="line">    flag = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));    </div><div class="line">    <span class="built_in">memset</span>(colors, <span class="number">0</span>, <span class="keyword">sizeof</span>(colors));</div><div class="line">    color = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(cb[i][j] == <span class="string">'o'</span> &amp;&amp; !vis[i][j])&#123;</div><div class="line">                tot = <span class="number">0</span>;</div><div class="line">                color++;</div><div class="line">                bfs(i, j);</div><div class="line">                <span class="keyword">if</span>(tot == <span class="number">1</span>)&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> cas = <span class="number">0</span>,T;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE  </span></div><div class="line">  freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// ONLINE_JUDGE </span></span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span>(T--)&#123;</div><div class="line">        cas++;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; j++)&#123;</div><div class="line">                cb[i][j] = s[j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)&#123;</div><div class="line">            cb[i][<span class="number">0</span>] = <span class="string">'-'</span>;</div><div class="line">            cb[<span class="number">0</span>][i] = <span class="string">'-'</span>;</div><div class="line">            cb[i][<span class="number">10</span>] = <span class="string">'-'</span>;</div><div class="line">            cb[<span class="number">10</span>][i] = <span class="string">'-'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(judge())&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case #%d: Can kill in one move!!!\n"</span>, cas);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case #%d: Can not kill in one move!!!\n"</span>,cas);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Mesos和Marathon搭建Docker集群]]></title>
      <url>http://blog.jetmuffin.com/2015/11/09/build-docker-cluster-with-mesos-and-marathon/</url>
      <content type="html"><![CDATA[<p>利用Mesos，Marathon对Docker集群进行管理，保证高容错性，高拓展性。</p>
<a id="more"></a>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="1-创建Master节点虚拟机"><a href="#1-创建Master节点虚拟机" class="headerlink" title="1.创建Master节点虚拟机"></a>1.创建Master节点虚拟机</h3><p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$: vagrant init</div></pre></td></tr></table></figure>
<p>这时候会在当前文件夹下创建文件<code>Vagrantfile</code>，该文件是<code>ruby</code>语法的虚拟机配置文件，然后我们用vim修改该文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$: vim Vagrantfile</div></pre></td></tr></table></figure>
<p>将内容修改如下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- mode: ruby -*-</span></div><div class="line"><span class="comment"># vi: set ft=ruby :</span></div><div class="line"></div><div class="line">Vagrant.configure(<span class="number">2</span>) <span class="keyword">do</span> <span class="params">|config|</span></div><div class="line">  config.vm.box = <span class="string">"bento/centos-7.1"</span></div><div class="line">  config.ssh.insert_key = <span class="literal">false</span></div><div class="line">  config.vm.define <span class="string">"node1"</span> <span class="keyword">do</span> <span class="params">|node1|</span></div><div class="line">      node1.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"192.168.33.10"</span></div><div class="line">      node1.vm.hostname = <span class="string">"node1"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  config.vm.define <span class="string">"node2"</span> <span class="keyword">do</span> <span class="params">|node2|</span></div><div class="line">      node2.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"192.168.33.11"</span></div><div class="line">      node2.vm.hostname = <span class="string">"node2"</span></div><div class="line"> <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>该配置会生成两个使用系统centos-7.1的节点，分别分配IP为<code>192.168.33.10</code>和<code>192.168.33.11</code>，作为我们的<code>Master</code>和<code>Slave</code>。</p>
<p>然后我们启动第一个节点<code>node1</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$: vagrant up node1</div><div class="line">Bringing machine &apos;node1&apos; up with &apos;virtualbox&apos; provider...</div><div class="line">==&gt; node1: Checking if box &apos;bento/centos-7.1&apos; is up to date...</div><div class="line">==&gt; node1: Clearing any previously set forwarded ports...</div><div class="line">==&gt; node1: Clearing any previously set network interfaces...</div><div class="line">==&gt; node1: Preparing network interfaces based on configuration...</div><div class="line">    node1: Adapter 1: nat</div><div class="line">    node1: Adapter 2: hostonly</div><div class="line">==&gt; node1: Forwarding ports...</div><div class="line">    node1: 22 =&gt; 2222 (adapter 1)</div><div class="line">==&gt; node1: Booting VM...</div><div class="line">==&gt; node1: Waiting for machine to boot. This may take a few minutes...</div><div class="line">    node1: SSH address: 127.0.0.1:2222</div><div class="line">    node1: SSH username: vagrant</div><div class="line">    node1: SSH auth method: private key</div><div class="line">    node1: Warning: Connection timeout. Retrying...</div><div class="line">    node1: Warning: Remote connection disconnect. Retrying...</div><div class="line">==&gt; node1: Machine booted and ready!</div><div class="line">==&gt; node1: Checking for guest additions in VM...</div><div class="line">==&gt; node1: Setting hostname...</div><div class="line">==&gt; node1: Configuring and enabling network interfaces...</div><div class="line">==&gt; node1: Mounting shared folders...</div><div class="line">    node1: /vagrant =&gt; /Users/jeff/workspace/mesos/cluster</div><div class="line">==&gt; node1: Machine already provisioned. Run `vagrant provision` or use the `--provision`</div><div class="line">==&gt; node1: flag to force provisioning. Provisioners marked to run always will still run.</div></pre></td></tr></table></figure>
<p>这样第一个节点就成功启动了，然后我们通过<code>ssh</code>连接到<code>node1</code>进行操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$:vagrant ssh node1</div><div class="line">[vagrant@node1 ~]$</div></pre></td></tr></table></figure>
<p>这样就成功创建了第一个节点。</p>
<h3 id="2-下载启动Mesos和Marathon"><a href="#2-下载启动Mesos和Marathon" class="headerlink" title="2.下载启动Mesos和Marathon"></a>2.下载启动Mesos和Marathon</h3><p>在下载<code>Mesos</code>和<code>Marathon</code>之前，需要先把<strong>hosts文件修改一下</strong>，把<code>127.0.0.1</code>对应的解析中的<code>node1</code>删除，并在最后加上<code>node1</code>和<code>node2</code>的IP，修改后的<code>hosts</code>可见cat后的输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[vagrant@node1 ~]$ sudo vi /etc/hosts</div><div class="line">[vagrant@node1 ~]$ cat /etc/hosts</div><div class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</div><div class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</div><div class="line"></div><div class="line">192.168.33.10 node1</div><div class="line">192.168.33.11 node2</div></pre></td></tr></table></figure>
<p>然后下载mesos的仓库，再安装mesos和marathon</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[vagrant@node1 ~]$ sudo rpm -Uvh http://repos.mesosphere.com/el/7/noarch/RPMS/mesosphere-el-repo-7-1.noarch.rpm</div><div class="line">[vagrant@node1 ~]$ sudo yum install mesos marathon</div></pre></td></tr></table></figure>
<h3 id="3-下载配置Zookeeper"><a href="#3-下载配置Zookeeper" class="headerlink" title="3.下载配置Zookeeper"></a>3.下载配置Zookeeper</h3><p>下载zookeeper仓库并安装Zookeeper</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[vagrant@node1 ~]$ sudo rpm -Uvh http://archive.cloudera.com/cdh4/one-click-install/redhat/6/x86_64/cloudera-cdh-4-0.x86_64.rpm</div><div class="line">[vagrant@node1 ~]$ sudo yum -y install zookeeper zookeeper-server</div></pre></td></tr></table></figure>
<p>初始化并启动Zookeeper</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[vagrant@node1 ~]$ sudo -u zookeeper zookeeper-server-initialize --myid=1</div><div class="line">Using myid of 1</div><div class="line">[vagrant@node1 ~]$ sudo service zookeeper-server start</div><div class="line">JMX enabled by default</div><div class="line">Using config: /etc/zookeeper/conf/zoo.cfg</div><div class="line">Starting zookeeper ... STARTED</div></pre></td></tr></table></figure>
<h3 id="4-下载安装Docker"><a href="#4-下载安装Docker" class="headerlink" title="4.下载安装Docker"></a>4.下载安装Docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[vagrant@node1 ~]$ sudo yum install -y docker</div><div class="line">[vagrant@node1 ~]$ sudo chkconfig docker on</div><div class="line">[vagrant@node1 ~]$ sudo service docker start</div></pre></td></tr></table></figure>
<p>然后告诉mesos，允许使用Docker作为Container</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[vagrant@node1 ~]$ echo &apos;docker,mesos&apos; | sudo tee /etc/mesos-slave/containerizers</div><div class="line">[vagrant@node1 ~]$ sudo service mesos-slave restart</div></pre></td></tr></table></figure>
<h3 id="5-启动Mesos和Marathon"><a href="#5-启动Mesos和Marathon" class="headerlink" title="5.启动Mesos和Marathon"></a>5.启动Mesos和Marathon</h3><p>启动Mesos</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[vagrant@node1 ~]$ sudo service mesos-master start</div><div class="line">[vagrant@node1 ~]$ sudo service mesos-slave start</div></pre></td></tr></table></figure>
<p>这时可以从外部访问已经启动的Mesos的GUI界面了，访问地址为<code>192.168.33.10:5050</code></p>
<p><img src="/uploads/images/2015/11/09/1.png" alt="start-mesos"></p>
<p>启动Marathon</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[vagrant@node1 ~]$ sudo service marathon start</div></pre></td></tr></table></figure>
<p>同样可以从GUI访问Marathon了，访问地址为<code>192.168.33.10:8080</code></p>
<p><img src="/uploads/images/2015/11/09/2.png" alt="start-marathon"></p>
<p>至此，Master节点的配置就已经结束了</p>
<h3 id="6-创建配置Slave节点"><a href="#6-创建配置Slave节点" class="headerlink" title="6.创建配置Slave节点"></a>6.创建配置Slave节点</h3><p>首先启动slave节点并用ssh登录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$: vagrant up node2</div><div class="line">$: vagrant ssh node2</div><div class="line">[vagrant@node2 ~]$</div></pre></td></tr></table></figure>
<p>然后修改<code>/etc/hosts</code>并且下载Mesos，具体过程同<a href="#">步骤4</a>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[vagrant@node2 ~]$ sudo vi /etc/hosts</div><div class="line">[vagrant@node2 ~]$ cat /etc/hosts</div><div class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</div><div class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</div><div class="line"></div><div class="line">192.168.33.10 node1</div><div class="line">192.168.33.11 node2</div><div class="line">[vagrant@node2 ~]$ sudo rpm -Uvh http://repos.mesosphere.com/el/7/noarch/RPMS/mesosphere-el-repo-7-1.noarch.rpm</div><div class="line">[vagrant@node2 ~]$ sudo yum install mesos</div></pre></td></tr></table></figure>
<p>编辑node2的<code>/etc/mesos/zk</code>文件，使得它指向node1。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[vagrant@node2 ~]$ sudo vi /etc/mesos/zk</div><div class="line">[vagrant@node2 ~]$ cat /etc/mesos/zk</div><div class="line">zk://192.168.33.10:2181/mesos</div></pre></td></tr></table></figure>
<p>启动Mesos（作为slave），并且关闭<code>mesos-master</code>服务的自动启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[vagrant@node2 ~]$  sudo service mesos-slave start</div><div class="line">[vagrant@node2 ~]$ sudo chkconfig mesos-slave on</div><div class="line">[vagrant@node2 ~]$  sudo chkconfig mesos-master off</div></pre></td></tr></table></figure>
<p>安装Docker,并允许使用Docker作为容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[vagrant@node2 ~]$ sudo yum install -y docker</div><div class="line">[vagrant@node2 ~]$ sudo chkconfig docker on</div><div class="line">[vagrant@node2 ~]$ sudo service docker start</div><div class="line">[vagrant@node2 ~]$ echo &apos;docker,mesos&apos; | sudo tee /etc/mesos-slave/containerizers</div><div class="line">[vagrant@node2 ~]$ sudo service mesos-slave restart</div></pre></td></tr></table></figure>
<p>这样，slave节点的配置也结束了</p>
<h3 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h3><p>我们打开Mesos的GUI界面，查看slave，可以看到现在已经有2个slave节点了，如下图。</p>
<p><img src="/uploads/images/2015/11/09/3.png" alt="check-slaves"></p>
<p>然后我们创建一个简单的webapp，使用<code>python -m SimpleHTTPServer</code></p>
<p><img src="/uploads/images/2015/11/09/4.png" alt="create-webapp"></p>
<p>然后将webapp应用scale到2个实例</p>
<p><img src="/uploads/images/2015/11/09/5.png" alt="scale-instance"></p>
<p>可以看到两个实例分别在两个不同的slave中运行了</p>
<p><img src="/uploads/images/2015/11/09/6.png" alt="result"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//Todo 后面会加上部署Docker的实例测试</div></pre></td></tr></table></figure>
<h2 id="打包虚拟机"><a href="#打包虚拟机" class="headerlink" title="打包虚拟机"></a>打包虚拟机</h2><p>为了之后能够快速的部署，我们可以将<code>node1</code>和<code>node2</code>分别打包成<code>mesos-master</code>和<code>mesos-slave</code>，以便于增加节点。</p>
<p>退出ssh，首先将node1打包为<code>mesos-master</code>，在宿主机上执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$: vagrant package node1</div><div class="line">$: vagrant box add mesos-master package.box</div><div class="line">$: vagrant destroy node1</div></pre></td></tr></table></figure>
<p>同样对node2我们也将其打包为<code>mesos-slave</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$: vagrant package node2</div><div class="line">$: vagrant box add mesos-slave package.box</div><div class="line">$: vagrant destroy node2</div></pre></td></tr></table></figure>
<p>然后修改<code>Vagrantfile</code>，将其修改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># -*- mode: ruby -*-</div><div class="line"># vi: set ft=ruby :</div><div class="line"></div><div class="line">Vagrant.configure(2) do |config|</div><div class="line">  config.vm.box = &quot;bento/centos-7.1&quot;</div><div class="line">  config.ssh.insert_key = false</div><div class="line">  config.vm.define &quot;node1&quot; do |node1|</div><div class="line">      node1.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</div><div class="line">      node1.vm.hostname = &quot;node1&quot;</div><div class="line">      node1.vm.box = &quot;mesos-master&quot;</div><div class="line">  end</div><div class="line"></div><div class="line">  config.vm.define &quot;node2&quot; do |node2|</div><div class="line">      node2.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.11&quot;</div><div class="line">      node2.vm.hostname = &quot;node2&quot;</div><div class="line"> end</div><div class="line">end</div></pre></td></tr></table></figure>
<p>这样就完成了虚拟机的打包，然后分别运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$: vagrant up node1</div><div class="line">$: vagrant up node2</div></pre></td></tr></table></figure>
<p>就可以运行了，修改集群的slave数量，则可以直接修改<code>Vagrantfile</code>即可！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mesos Framework解析]]></title>
      <url>http://blog.jetmuffin.com/2015/11/07/mesos-framework/</url>
      <content type="html"><![CDATA[<h1 id="Mesos-Framework-解析"><a href="#Mesos-Framework-解析" class="headerlink" title="Mesos Framework 解析"></a>Mesos Framework 解析</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="Mesos"><a href="#Mesos" class="headerlink" title="Mesos"></a>Mesos</h3><p>Mesos是Apache旗下的开源集群资源计算框架，它能将多台机器（包括物理机和虚拟机）的资源，包括CPU，内存，硬盘等计算资源抽象出来，进行资源隔离和共享，构建高容错性、高可用性的分布式资源管理系统。<br><a id="more"></a></p>
<h3 id="Mesos-Framework"><a href="#Mesos-Framework" class="headerlink" title="Mesos Framework"></a>Mesos Framework</h3><p>Mesos采用两层架构，所有计算框架均在底层，即Mesos Master负责对任务的资源分配给各个框架；在计算框架之上为Mesos Framework，它可用是通用的框架，也可用为特定软件编写的框架，如Framework一个长时间运行的服务（比如JobTracker等），也可以是一个短生命周期的Job或者Application。这样设计的好处是，<strong>作为底层的Mesos不需要知道顶层的应用的细节，只负责根据slave资源状况提供offers，而调度由顶层的Framework进行实现</strong>，这样底层的Mesos对所有应用（分布式or集中式，长时间服务or短暂性任务等）均可适用。</p>
<p>Framework可以根据是否符合任务对资源的约束，选择接受或拒绝资源邀约。一旦资源邀约被接受，Framework将与Master协作调度任务，并在数据中心的相应Slave节点上运行任务。</p>
<p>Framework包含两大部分：</p>
<ul>
<li><p><strong>Scheduler</strong></p>
<p>  Scheduler负责管理框架所获得的资源，按照作业的输入量，将其分解成若干任务，并未这些任务申请资源，监控这些任务的运行状态，一旦发现某个任务运行失败则重新为其申请资源。</p>
</li>
<li><p><strong>Executor</strong> </p>
<p>  Executor负责执行调度器所分配的任务。</p>
</li>
</ul>
<p>Framework结构如图：<br><img src="http://cdn1.infoqstatic.com/statics_s2_20151020-0055-2/resource/articles/analyse-mesos-part-04/zh/resources/0604001.jpg" alt="Framework Structure"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="Framework任务分配过程"><a href="#Framework任务分配过程" class="headerlink" title="Framework任务分配过程"></a>Framework任务分配过程</h3><p>Framework任务分配流程图如下：<br><img src="http://s2.51cto.com/wyfs02/M01/09/F3/wKiom1LKbc-DCmXcAACKJCK6gs4287.jpg" alt="Framework Task"></p>
<p>Mesos的资源分配行为发生在：<strong>新框架注册</strong>，<strong>框架注销</strong>，<strong>增加节点</strong>，<strong>出现空闲资源</strong>等情况，对Mesos Framework进行资源分配的流程如下：</p>
<ol>
<li><p>Mesos Master中的<code>Allocator</code>模块将要为某个Framework分配资源，则将资源封装到<code>ResourceOffersMessage</code>中，通过网络传输发送给<code>SchedulerProcess</code></p>
</li>
<li><p><code>SchedulerProcess</code>调用用户在Scheduler中编写的<code>resourceOffers</code>函数，告知有新资源可用；</p>
</li>
<li><p>Framework的Scheduler调用<code>MesosSchedulerDriver</code>中的<code>launchTasks()</code>函数，告知将要启动的任务；</p>
</li>
<li><p>Mesos Master将待启动的任务分装成<code>RunTaskMessage</code>发送给各个Mesos Slave；</p>
</li>
<li><p>Mesos Slave收到<code>RunTaskMessage</code>消息后，将其发送给对应的<code>ExecutorProcess</code>；</p>
</li>
<li><p><code>ExecutorProcess</code>收到消息后，进行资源本地化，并准备任务环境，最终调度用户编写的Exector中的<code>launchTask</code>任务启动任务。</p>
</li>
</ol>
<h3 id="Framework开放接口及作用"><a href="#Framework开放接口及作用" class="headerlink" title="Framework开放接口及作用"></a>Framework开放接口及作用</h3><p>Mesos向开发者开放了API，API隐藏了Mesos底层和分布式交互的具体的细节，使得开发者可方便地用根据相应使用环境编写对应的Framework，提供的接口支持<code>C++</code>，<code>Go</code>，<code>Haskell</code>，<code>Java</code>，<code>Python</code>，和<code>Scala</code>语言。</p>
<p><strong>Scheduler API</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>registered()</td>
<td>当Scheduler成功向Master注册时被调用</td>
</tr>
<tr>
<td>reregistered()</td>
<td>当Scheduler再次注册成功时被调用</td>
</tr>
<tr>
<td>disconnected()</td>
<td>当Scheduler和Master失去连接时被调用</td>
</tr>
<tr>
<td><strong>resourcesOffers()</strong></td>
<td>当Framework收到Mesos提供的资源时被调用</td>
</tr>
<tr>
<td>offerRescinded()</td>
<td>当某个offer不再适用时调用(Slave丢失或者其他Framework正在适用这个offer),master撤销发送给Framework的资源</td>
</tr>
<tr>
<td>statusUpdate()</td>
<td>当Mesos向框架发送消息时被调用</td>
</tr>
<tr>
<td>frameworkMessage()</td>
<td>用来向Scheduler传递Executor发送的消息</td>
</tr>
<tr>
<td>slaveLost()</td>
<td>通知Mesos无法和指定ID的slave通信</td>
</tr>
<tr>
<td>executorLost()</td>
<td>通知Scheduler指定的Executor已经以某个状态结束了</td>
</tr>
<tr>
<td>error()</td>
<td>当Scheduler出现可恢复的错误时被调用</td>
</tr>
</tbody>
</table>
<p>其中最重要的为<br><code>resourceOffers(SchedulerDriver,  List&lt;Offer&gt;)</code>方法。Master向Framework提供资源offer，每一份资源offer包含从某个slave上获取的资源列表（包括CPU，内存，硬盘等）。开发者重写该方法，可用根据特定的情况接受资源offer，并利用offersId交给Executor启动任务，或者拒绝该offer。<strong>一个offer会提供给多个Framework，但是第一个使用offer启动任务的Framework会获胜，其他的Framework将受到<code>offerRescinded()</code>发出的消息。</strong></p>
<p><strong>Scheduler API</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>registered()</td>
<td>当Executor驱动成功和Mesos连接上时调用</td>
</tr>
<tr>
<td>reregistered()</td>
<td>当Executor再次向某个重启的slave注册时调用</td>
</tr>
<tr>
<td>disconnected()</td>
<td>当Executor和slave失去连接时调用</td>
</tr>
<tr>
<td><strong>launchTask()</strong></td>
<td>当Executor启动某个任务时调用</td>
</tr>
<tr>
<td>killTask()</td>
<td>当Executor杀死某个task时被调用</td>
</tr>
<tr>
<td>frameworkMessage()</td>
<td>当Framework的信息到达Executor时被调用</td>
</tr>
<tr>
<td>shutdown()</td>
<td>当Executor需要终止所有task时被调用</td>
</tr>
<tr>
<td>error()</td>
<td>当Scheduler出现不可恢复的错误时被调用</td>
</tr>
</tbody>
</table>
<p>同样，Executor中最核心的方法是<code>launchTask(ExecutorDriver, TaskInfo)</code>。可重写该方法实现执行任务，任务将在offer来源的slave上执行。<strong>执行任务在方法调用时会被阻塞，在回调完成前，该Executor无法执行其他的任务。</strong>因此如果要执行一个长时间的任务（如Web应用)，可用把任务放在线程里，通过线程的方式启动。</p>
<h2 id="Framework实例分析"><a href="#Framework实例分析" class="headerlink" title="Framework实例分析"></a>Framework实例分析</h2><p>Mesos上已有许多Framework，包括支持MPI，Hadoop，Spark，Storm等应用的。这里主要利用简单的Framework分析如何实现一个Framework。</p>
<ul>
<li><p><a href="https://github.com/mesosphere/mesos-hydra" target="_blank" rel="external">mesos-hydra</a>，MPI Framework，该Framework是利用python进行的实现。</p>
</li>
<li><p><a href="https://github.com/mesosphere/RENDLER" target="_blank" rel="external">RENDLER</a>,一个利用Mesos框架实现的分布式爬虫</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">填坑，待看完全部代码后补上源码分析</div></pre></td></tr></table></figure>
<h2 id="Framework设计模式"><a href="#Framework设计模式" class="headerlink" title="Framework设计模式"></a>Framework设计模式</h2><p>从现有的Mesos Framework分配调度使用资源的方式中，可用总结出以下几种模式。</p>
<ul>
<li>用于协调资源：设计的Framework作为其他Framework的资源协调者，作为服务运行，如<code>Mesos-DNS</code>。</li>
<li>基于负载状况：设计的Framework根据负载来调节资源使用，如<code>Marathon</code>和<code>Aurora</code>，会根据约定自动进行扩容和缩容。</li>
<li>基于预留的框架：这里主要指，某些分布式应用，在设计时已经预留了资源调度的接口，如<code>Hadoop</code>，<code>Spark</code>，<code>Storm</code>，因此只要实现接口，就可以将应用从原有的调度框架（如Hadoop原有框架为<code>YARN</code>)移植到Mesos上来。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[二分图的最大匹配 匈牙利算法]]></title>
      <url>http://blog.jetmuffin.com/2015/11/01/bipartite-graph-matching-hungry-algorithm/</url>
      <content type="html"><![CDATA[<h1 id="二分图的最大匹配-匈牙利算法"><a href="#二分图的最大匹配-匈牙利算法" class="headerlink" title="二分图的最大匹配 匈牙利算法"></a>二分图的最大匹配 匈牙利算法</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>匹配:</strong></p>
<blockquote>
<p>给定一个无向图G=(V, E),一个匹配是边的一个子集M⊇E，使得对于所有节点v∈V，子集M中最多有一条边与节点v相连。<br>—— 《算法导论》<br><a id="more"></a></p>
</blockquote>
<p>在图论中，一个「匹配」（matching）是一个边的集合，其中任意两条边都没有公共顶点。例如，图 3、图 4 中红色的边就是图 2 的匹配。<br><img src="http://i11.tietuku.com/e19acdb1257218aa.png" alt="img"></p>
<p>我们定义<strong>匹配点</strong>、<strong>匹配边</strong>、<strong>未匹配点</strong>、<strong>非匹配边</strong>，它们的含义非常显然。例如图 3 中 1、4、5、7 为匹配点，其他顶点为未匹配点；1-5、4-7为匹配边，其他边为非匹配边。</p>
<p><strong>最大匹配：</strong>一个图所有匹配中，所含匹配边数最多的匹配，称为这个图的最大匹配。图 4 是一个最大匹配，它包含 4 条匹配边。</p>
<p><strong>完美匹配：</strong>如果一个图的某个匹配中，所有的顶点都是匹配点，那么它就是一个完美匹配。图 4 是一个完美匹配。显然，完美匹配一定是最大匹配（完美匹配的任何一个点都已经匹配，添加一条新的匹配边一定会与已有的匹配边冲突）。但并非每个图都存在完美匹配。</p>
<h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p><strong>最大匹配数</strong>：最大匹配的匹配边的数目<br><strong>最小点覆盖数</strong>：选取最少的点，使任意一条边至少有一个端点被选择<br><strong>最大独立数</strong>：选取最多的点，使任意所选两点均不相连</p>
<ul>
<li>定理1：最大匹配数 = 最小点覆盖数（这是 Konig 定理）</li>
<li>定理2：最大匹配数 = 最大独立数</li>
<li>定理3：最小路径覆盖数 = 顶点数 - 最大匹配数</li>
</ul>
<h2 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h2><p><img src="http://img.renfei.org/2013/08/2.png" alt="img2"></p>
<p><strong>思路：</strong>匈牙利算法的主要思路是希望每一个左边的点都尽量在右边找到一个点和他匹配，若找不到匹配点，则想方设法给它<strong>腾出</strong>点来供他匹配。</p>
<p><strong>流程：</strong>我们依次枚举左边的点x(<code>如图2中的2</code>)的所有出边指向点y（<code>如图2中的5</code>），若y之前没有被匹配，则(x,y)成为一对匹配，我们将匹配数加一；若y已经被匹配（<code>假设图2中的5已经被1匹配）</code>），那么我们需要将匹配y的x’重新找一个匹配（<code>即给1再重新找一个匹配</code>），若找到x’的新匹配（<code>找到了7</code>)，那么(x,y)还是能够成为一对匹配。</p>
<p><strong>例子：</strong><br>原图为：<br><img src="http://img.renfei.org/2013/08/1.png" alt="img3"><br>顶点分为两类：<br><img src="http://img.renfei.org/2013/08/2.png" alt="img4"><br>首先对顶点1进行匹配，找到匹配点5<br><img src="http://i11.tietuku.com/4f5f157609901e7e.png" alt="img5"><br>然后对顶点2进行匹配，发现没有任何顶点可以匹配，于是对顶点5的原匹配点再重新找一个匹配，找到了匹配7<br><img src="http://i11.tietuku.com/36347ef2b669664e.png" alt="img6"><br>接下来对顶点3配对，找到匹配6<br><img src="http://i11.tietuku.com/ab0b9f0bceb265c1.png" alt="img7"><br>最后将4和8进行配对<br><img src="http://i11.tietuku.com/cb3bf6c5aeb5a275.png" alt="img8"><br>得到原图的最大匹配为4</p>
<p><strong>伪代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function Find(u):</div><div class="line">    对于u的每一个相邻的，且没有被标记过的节点v:</div><div class="line">        标记v;</div><div class="line">        如果v未饱和（未得到匹配）或者Find(v的当前匹配点):</div><div class="line">            将v的匹配点修改为u</div><div class="line">            返回True</div><div class="line">        返回False</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function Main():</div><div class="line">    将所有节点初始化为未饱和;</div><div class="line">    匹配数=0;</div><div class="line">    对于图中的每一个顶点u:</div><div class="line">        清空所有标记;</div><div class="line">        如果Find(u)，匹配数+=1;</div><div class="line">    返回匹配数</div></pre></td></tr></table></figure>
<p><strong>复杂度：</strong>即对于每个顶点，将 每条边遍历一遍，复杂度<code>O(VE)</code></p>
<p><strong>实现代码：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span><span class="comment">//从左边开始找增广路径</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> v;</div><div class="line">    <span class="keyword">for</span>(v=<span class="number">0</span>;v&lt;N;v++)<span class="comment">//这个顶点编号从0开始，若要从1开始需要修改</span></div><div class="line">      <span class="keyword">if</span>(g[u][v]&amp;&amp;!used[v])</div><div class="line">      &#123;</div><div class="line">          used[v]=<span class="literal">true</span>;</div><div class="line">          <span class="keyword">if</span>(link[v]==<span class="number">-1</span>||dfs(link[v]))</div><div class="line">          &#123;<span class="comment">//找增广路，反向</span></div><div class="line">              link[v]=u;</div><div class="line">              <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//这个不要忘了，经常忘记这句</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> u;</div><div class="line">    <span class="built_in">memset</span>(link,<span class="number">-1</span>,<span class="keyword">sizeof</span>(link));</div><div class="line">    <span class="keyword">for</span>(u=<span class="number">0</span>;u&lt;N;u++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</div><div class="line">        <span class="keyword">if</span>(dfs(u)) res++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Hopcroft-Karp算法"><a href="#Hopcroft-Karp算法" class="headerlink" title="Hopcroft Karp算法"></a>Hopcroft Karp算法</h2><p>Hopcroft Karp算法是对匈牙利算法的实现，每次不止增广一个非饱和顶点。复杂度`O(sqrt(V)E)</p>
<p><strong>实现代码：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">searchP</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    dis=INF;  </div><div class="line">    <span class="keyword">int</span> i,v,u;  </div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;  </div><div class="line">  </div><div class="line">    <span class="built_in">memset</span>(dx,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dx));  </div><div class="line">    <span class="built_in">memset</span>(dy,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dy));  </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;Nx;i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(Mx[i]==<span class="number">-1</span>)  </div><div class="line">        &#123;  </div><div class="line">            Q.push(i);  </div><div class="line">            dx[i]=<span class="number">0</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">while</span>(!Q.empty())  </div><div class="line">    &#123;  </div><div class="line">        u=Q.front();  </div><div class="line">        Q.pop();  </div><div class="line">        <span class="keyword">if</span>(dx[u]&gt;dis) <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">for</span>(v=<span class="number">0</span>;v&lt;Ny;v++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span>(g[u][v]&amp;&amp;dy[v]==<span class="number">-1</span>)  </div><div class="line">            &#123;  </div><div class="line">                dy[v]=dx[u]+<span class="number">1</span>;  </div><div class="line">                <span class="keyword">if</span>(My[v]==<span class="number">-1</span>) dis=dy[v];  </div><div class="line">                <span class="keyword">else</span>  </div><div class="line">                &#123;  </div><div class="line">                    dx[My[v]]=dy[v]+<span class="number">1</span>;  </div><div class="line">                    Q.push(My[v]);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> dis!=INF;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> v;  </div><div class="line">    <span class="keyword">for</span>(v=<span class="number">0</span>;v&lt;Ny;v++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(g[u][v]&amp;&amp;!used[v]&amp;&amp;dy[v]==dx[u]+<span class="number">1</span>)  </div><div class="line">        &#123;  </div><div class="line">            used[v]=<span class="literal">true</span>;  </div><div class="line">            <span class="keyword">if</span>(My[v]!=<span class="number">-1</span>&amp;&amp;dy[v]==dis) <span class="keyword">continue</span>;  </div><div class="line">            <span class="keyword">if</span>(My[v]==<span class="number">-1</span>||DFS(My[v]))  </div><div class="line">            &#123;  </div><div class="line">                My[v]=u;  </div><div class="line">                Mx[u]=v;  </div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hungary</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> u;  </div><div class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;  </div><div class="line">    <span class="built_in">memset</span>(Mx,<span class="number">-1</span>,<span class="keyword">sizeof</span>(Mx));  </div><div class="line">    <span class="built_in">memset</span>(My,<span class="number">-1</span>,<span class="keyword">sizeof</span>(My));  </div><div class="line">    <span class="keyword">while</span>(searchP())  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">memset</span>(used,<span class="literal">false</span>,<span class="keyword">sizeof</span>(used));  </div><div class="line">        <span class="keyword">for</span>(u=<span class="number">0</span>;u&lt;Nx;u++)  </div><div class="line">           <span class="keyword">if</span>(Mx[u]==<span class="number">-1</span>&amp;&amp;DFS(u))  ret++;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> ret;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[源码编译安装Ambari]]></title>
      <url>http://blog.jetmuffin.com/2015/10/22/compile-and-install-ambari/</url>
      <content type="html"><![CDATA[<h1 id="源码编译安装Ambari"><a href="#源码编译安装Ambari" class="headerlink" title="源码编译安装Ambari"></a>源码编译安装Ambari</h1><hr>
<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>笔者用源码编译的原因很简单，hortonworks的源太不稳定了，自己的几台Ubuntu的机子添加源后无法下载，且CentOS的机子添加源后无法下载ambari-agent，只能另辟蹊径使用源码编译</p>
<a id="more"></a>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>源码编译需要以下环境，需要提前安装：</p>
<blockquote>
<ul>
<li>JDK</li>
<li>Maven</li>
<li>Python 2.6+</li>
<li>rpm-build</li>
<li>g++,gcc,make等</li>
<li>NodeJS</li>
<li>Brunch</li>
</ul>
</blockquote>
<p>因此需要先配置环境</p>
<h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><p>可以使用系统(CentOS)自带的openjdk，或者下载Oracle的JDK。<br>安装后配置环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# vim /etc/profile</div><div class="line"># 在末尾添加 export JAVA_HOME=你的java地址</div><div class="line"># 在末尾添加 export path=$path:$JAVA_HOME/bin</div><div class="line">[root@cloud01 ~]# source /etc/profile</div><div class="line">[root@cloud01 ~]# java -version</div><div class="line">java version &quot;1.7.0_51&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.7.0_51-b13)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 24.51-b03, mixed mode)</div></pre></td></tr></table></figure></p>
<p>如果<code>java -version</code>正常，则JDK安装成功</p>
<h3 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h3><ol>
<li>官网下载maven对应版本</li>
<li><p>解压</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# tar -zxvf apache-maven-3.0.3-bin.tar.gz</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>设置环境变量</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# vim /etc/profile</div><div class="line">#末尾添加 export MAVEN_HOME=你的maven地址</div><div class="line">#末尾添加 export path=$path:$MAVEN_HOME/bin</div><div class="line">[root@cloud01 ~]# source /etc/profile</div><div class="line">[root@cloud01 ~]# mvn -v</div><div class="line">Apache Maven 3.0.3</div><div class="line">Maven home: /usr/local/apache-maven-3.0.3</div><div class="line">Java version: 1.7.0_51, vendor: Oracle Corporation</div><div class="line">Java home: /usr/local/jdk1.7.0_51/jre</div><div class="line">Default locale: en_US, platform encoding: UTF-8</div><div class="line">OS name: &quot;linux&quot;, version: &quot;2.6.32-358.el6.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>若 <code>mvn -v</code>正常，则maven安装成功</p>
<h3 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h3><p>CentOS自带Python，且CentOS6.5自带Python2.6，可以直接使用<br>若版本过低或者未安装则执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# yum install python</div></pre></td></tr></table></figure></p>
<h3 id="安装rpm-build"><a href="#安装rpm-build" class="headerlink" title="安装rpm-build"></a>安装rpm-build</h3><ol>
<li><p>检测rpm-build是否已经安装</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# rpm -qa | grep rpm-build</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>若未安装，执行</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# yum install rpm-build</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装g-等依赖"><a href="#安装g-等依赖" class="headerlink" title="安装g++等依赖"></a>安装g++等依赖</h3><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# yum -y install gcc make gcc-c++ openssl-devel wget</div></pre></td></tr></table></figure></p>
<h3 id="安装NodeJS"><a href="#安装NodeJS" class="headerlink" title="安装NodeJS"></a>安装NodeJS</h3><ol>
<li><p>下载源码及解压</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# wget http://nodejs.org/dist/v0.10.26/node-v0.10.26.tar.gz</div><div class="line">[root@cloud01 ~]# tar -zvxf node-v0.10.26.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>编译及安装</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# cd node-v0.10.26</div><div class="line">[root@cloud01 ~]# ./configuration</div><div class="line">[root@cloud01 ~]# make &amp;&amp; make install</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>验证安装配置是否成功</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ol>
<li><p>下载并解压源码</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# wget http://www.apache.org/dist/ambari/ambari-2.1.2/apache-ambari-2.1.2-src.tar.gz</div><div class="line">[root@cloud01 ~]# tar xfvz apache-ambari-2.1.2-src.tar.gz</div><div class="line">[root@cloud01 ~]# cd apache-ambari-2.1.2-src</div></pre></td></tr></table></figure>
</li>
<li><p>编译</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# mvn versions:set -DnewVersion=2.1.2</div><div class="line">[root@cloud01 ~]# pushd ambari-metrics</div><div class="line">[root@cloud01 ~]# mvn versions:set -DnewVersion=2.1.2</div><div class="line">[root@cloud01 ~]# popd</div><div class="line">[root@cloud01 ~]# mvn -B clean install package rpm:rpm -DnewVersion=2.1.2 -DskipTests -Dpython.ver=&quot;python &gt;= 2.6&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>安装rpm</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@cloud01 ~]# yum install ambari-server*.rpm</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="错误总结"><a href="#错误总结" class="headerlink" title="错误总结"></a>错误总结</h2><ol>
<li><p>出现异常：ClassNotFoundException: org.slf4j.helpers.MarkerIgnoringBase</p>
<blockquote>
<p>使用低于Maven 3.3.3的版本，我用的是Maven 3.0.5</p>
</blockquote>
</li>
<li><p>node-gyp rebuilt卡住<br>原因是node-gyp rebuilt 会去下载源码rebuilt生成头文件，而国外的npm源非常慢，所以可以手动修改<br>执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install node-gyp </div><div class="line">node-gyp install --dist-url http://npm.taobao.org/mirrors/node</div></pre></td></tr></table></figure>
</li>
</ol>
<p>或者直接修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 获得 nodejs 版本号</div><div class="line">NODE_VERSION=`node -v | cut -d&apos;v&apos; -f 2`</div><div class="line"># 下载源码包</div><div class="line">wget http://npm.taobao.org/mirrors/node/v$NODE_VERSION/node-v$NODE_VERSION.tar.gz</div><div class="line"># 删除现有内容不完整的目录</div><div class="line">rm -rf ~/.node-gyp</div><div class="line">mkdir ~/.node-gyp</div><div class="line"># 解压缩并重命名到正确格式</div><div class="line">tar zxf node-v$NODE_VERSION.tar.gz -C ~/.node-gyp</div><div class="line">mv ~/.node-gyp/node-v$NODE_VERSION ~/.node-gyp/$NODE_VERSION</div><div class="line"># 创建一个标记文件</div><div class="line">printf &quot;9\n&quot;&gt;~/.node-gyp/$NODE_VERSION/installVersion</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ambari搭建Hadoop管理平台]]></title>
      <url>http://blog.jetmuffin.com/2015/10/19/building-hadoop-manage-platform-on-ambari/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Apache Ambari项目的目标是通过配置、管理、监控Hadoop集群，使得Hadoop集群的管理更加简单。Ambari提供了直观易用、基于Restful APIs的Web UI。<br><a id="more"></a><br>Ambari使得系统管理员可以：</p>
<ul>
<li>配置Hadoop集群<ul>
<li>Ambari提供了逐步安装Hadoop服务的向导</li>
<li>Ambari处理了Hadoop集群中复杂的配置</li>
</ul>
</li>
<li>管理Hadoop集群<ul>
<li>Ambari对整个Hadoop集群提供了中心管理服务，可以进行Hadoop的启动、终止和重新配置。</li>
</ul>
</li>
<li>监控Hadoop集群 <ul>
<li>Ambari提供了监控Hadoop集群健康和状态的控制台</li>
<li>Ambari使用<code>Ambari Metrics System</code>进行各项指标的收集</li>
<li>Ambari使用<code>Ambari Alert Framework</code>进行系统报警（当节点宕机或者剩余空间不足等）</li>
</ul>
</li>
</ul>
<h2 id="安装Ambari-Ubuntu-14-04"><a href="#安装Ambari-Ubuntu-14-04" class="headerlink" title="安装Ambari(Ubuntu 14.04)"></a>安装Ambari(Ubuntu 14.04)</h2><h3 id="step1-从服务器下载Ambari"><a href="#step1-从服务器下载Ambari" class="headerlink" title="step1: 从服务器下载Ambari"></a>step1: 从服务器下载Ambari</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /etc/apt/sources.list.d</div><div class="line">wget http://public-repo-1.hortonworks.com/ambari/ubuntu14/2.x/updates/2.1.2/ambari.list</div></pre></td></tr></table></figure>
<h3 id="step2-安装、启动Ambari-Server"><a href="#step2-安装、启动Ambari-Server" class="headerlink" title="step2: 安装、启动Ambari Server"></a>step2: 安装、启动Ambari Server</h3><p>从Ambari仓库下载Ambari Server：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-key adv --recv-keys --keyserver keyserver.ubuntu.com B9733A7A07513CAD</div><div class="line">apt-get update</div><div class="line">apt-get install ambari-server</div></pre></td></tr></table></figure></p>
<p>执行命令配置Ambari Server, Database, JDK, LDAP，和其他配置项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ambari-server setup</div></pre></td></tr></table></figure></p>
<p>启动 Ambari Server：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ambari-server start</div></pre></td></tr></table></figure></p>
<h3 id="step3-使用Ambari-Web-UI"><a href="#step3-使用Ambari-Web-UI" class="headerlink" title="step3: 使用Ambari Web UI"></a>step3: 使用Ambari Web UI</h3><p>浏览器打开地址<code>http://&lt;ambari-server-host&gt;:8080</code><br>使用账号<code>admin</code>和密码<code>admin</code>进行登录</p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="配置mysql数据库"><a href="#配置mysql数据库" class="headerlink" title="配置mysql数据库"></a>配置mysql数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div><div class="line">mysql&gt; create database ambari;</div><div class="line">mysql&gt; use ambari;</div><div class="line">Database changed</div><div class="line">mysql&gt;source /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql</div></pre></td></tr></table></figure>
<h2 id="设置ambari-server"><a href="#设置ambari-server" class="headerlink" title="设置ambari-server"></a>设置ambari-server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ambari-server setup</div></pre></td></tr></table></figure>
<p>过程中会要求配置运行用户、JDK、数据库等内容</p>
<h2 id="启动ambari-server"><a href="#启动ambari-server" class="headerlink" title="启动ambari-server"></a>启动ambari-server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ambari-server start</div></pre></td></tr></table></figure>
<p><strong>若启动失败，可以查看/var/log/ambari-server/ambari-ser.out</strong><br>对于以下错误：</p>
<blockquote>
<p>com.mysql.jdbc.exceptions.jdbc4.Communicationsxception: Communications link failure</p>
</blockquote>
<p>可以采取以下方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /etc/mysql/my.cnf</div><div class="line"># 将bind-address: 127.0.0.1 改为 bind-address: 0.0.0.0</div><div class="line">/etc/init.d/mysql restart</div><div class="line">ambari-server restart</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[转] 广义Fibonacci数列找循环节]]></title>
      <url>http://blog.jetmuffin.com/2015/09/20/generalized-fibonacci-sequence-to-find-the-circular-section/</url>
      <content type="html"><![CDATA[<h2 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h2><p>转自<a href="http://blog.csdn.net/ACdreamers" target="_blank" rel="external">ACDreamer的博客</a></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定<img src="http://img.blog.csdn.net/20140512141202250" alt="img-1">，满足<img src="http://img.blog.csdn.net/20140512141344500" alt="img-2">，求<img src="http://img.blog.csdn.net/20140512141547343" alt="img-3">的循环节长度。<br><a id="more"></a> </p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们知道矩阵的递推关系如下:</p>
<p><img src="http://img.blog.csdn.net/20140512141934171" alt="img-4"></p>
<p>然后继续有:</p>
<p><img src="http://img.blog.csdn.net/20140512142241625" alt="img-5"></p>
<p>那么，现在的问题就转化为求最小的<img src="http://img.blog.csdn.net/20140512142408500" alt="img-6">，使得<img src="http://img.blog.csdn.net/20140512142715562" alt="img-7"></p>
<p>所以我们可以先找出符合条件的一个<img src="http://img.blog.csdn.net/20140512142408500" alt="img-8">，然后枚举它的因子，找最小的。设</p>
<p><img src="http://img.blog.csdn.net/20140512143016218" alt="img-9"></p>
<p>为了好解决问题，我们需要对矩阵<img src="http://img.blog.csdn.net/20140512143448171" alt="img-10">进行相似对角化，即<img src="http://img.blog.csdn.net/20140512143448171" alt="img-11">的特征值</p>
<p>解得<img src="http://img.blog.csdn.net/20140512143448171" alt="img-11">的特征值为<img src="http://img.blog.csdn.net/20140512144649265" alt="img-12"></p>
<p>也就是说<img src="http://img.blog.csdn.net/20140512143448171" alt="img-12">的相似对角矩阵<img src="http://img.blog.csdn.net/20140512144531812" alt="img-13">为</p>
<p><img src="http://img.blog.csdn.net/20140512144745468" alt="img-14"></p>
<p>因为我们知道<img src="http://img.blog.csdn.net/20140512145327265" alt="img-15">，所以当<img src="http://img.blog.csdn.net/20140512145502218" alt="img-16">时，<img src="http://img.blog.csdn.net/20140512145712093" alt="img-17">，由于</p>
<p><img src="http://img.blog.csdn.net/20140512145910453" alt="img-18"></p>
<p>继续得到</p>
<p><img src="http://img.blog.csdn.net/20140512150102359" alt="img-19"></p>
<p>设<img src="http://img.blog.csdn.net/20140512150213093" alt="img-20">，那么分情况讨论：</p>
<ol>
<li><img src="http://img.blog.csdn.net/20140512151050140" alt="img-21">是模<img src="http://img.blog.csdn.net/20140512151151359" alt="img-22">的二次剩余，由费马小定理得<img src="http://img.blog.csdn.net/20140512151341546" alt="img-23">时，<img src="http://img.blog.csdn.net/20140512151440765" alt="img-24"></li>
<li><p><img src="http://img.blog.csdn.net/20140512151050140" alt="img-24">是模<img src="http://img.blog.csdn.net/20140512151151359" alt="img-22">的二次非剩余，则有</p>
<p><img src="http://img.blog.csdn.net/20140512153301078" alt="img-25">,根据欧拉准则有</p>
<p><img src="http://img.blog.csdn.net/20140512153500734" alt="img-26"></p>
<p>那么继续得到</p>
<p><img src="http://img.blog.csdn.net/20140512153750203" alt="img-27"></p>
<p>然后由费马小定理有<img src="http://img.blog.csdn.net/20140512153930718" alt="img-28">，同理有<img src="http://img.blog.csdn.net/20140512154020390" alt="img-29">所以，当<img src="http://img.blog.csdn.net/20140512154134531" alt="img-30">时，<img src="http://img.blog.csdn.net/20140512154236328" alt="img-31"></p>
</li>
<li><img src="http://img.blog.csdn.net/20140512154416203" alt="img-32">时，由于<img src="http://img.blog.csdn.net/20140512154508375" alt="img-33">不存在，所以无法完成相似对角化，好在<img src="http://img.blog.csdn.net/20140512154416203" alt="img-34">情况不存在。</li>
</ol>
<p>所以综上所述：</p>
<ul>
<li><img src="http://img.blog.csdn.net/20140512151050140" alt="img-35">是模<img src="http://img.blog.csdn.net/20140512151151359" alt="img-36">的二次剩余时，枚举<img src="http://img.blog.csdn.net/20140512151341546" alt="img-37">的因子</li>
<li><img src="http://img.blog.csdn.net/20140512151050140" alt="img-35">是模<img src="http://img.blog.csdn.net/20140512151151359" alt="img-36">的二次非剩余时，枚举<img src="http://img.blog.csdn.net/20140512154134531" alt="img-38">的因子</li>
</ul>
<p>找最小的因子<img src="http://img.blog.csdn.net/20140512155118687" alt="img-39">使得</p>
<p><img src="http://img.blog.csdn.net/20140512155210937" alt="img-40"></p>
<p>成立</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> LL MOD = <span class="number">1000000007</span>;</div><div class="line"></div><div class="line">LL fac[<span class="number">2</span>][<span class="number">505</span>];</div><div class="line"><span class="keyword">int</span> cnt,ct;</div><div class="line"></div><div class="line">LL pri[<span class="number">6</span>] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">109</span>, <span class="number">167</span>, <span class="number">500000003</span>&#125;;</div><div class="line">LL num[<span class="number">6</span>] = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Matrix</div><div class="line">&#123;</div><div class="line">    LL m[N][N];</div><div class="line">&#125; ;</div><div class="line"></div><div class="line">Matrix A;</div><div class="line">Matrix I = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</div><div class="line"></div><div class="line"><span class="function">Matrix <span class="title">multi</span><span class="params">(Matrix a,Matrix b)</span></span></div><div class="line">&#123;</div><div class="line">    Matrix c;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++)</div><div class="line">        &#123;</div><div class="line">            c.m[i][j]  =<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;N; k++)</div><div class="line">            &#123;</div><div class="line">                c.m[i][j] += a.m[i][k] * b.m[k][j];</div><div class="line">                c.m[i][j] %= MOD;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Matrix <span class="title">power</span><span class="params">(Matrix A,LL n)</span></span></div><div class="line">&#123;</div><div class="line">    Matrix ans = I, p = A;</div><div class="line">    <span class="keyword">while</span>(n)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            ans = multi(ans,p);</div><div class="line">            n--;</div><div class="line">        &#125;</div><div class="line">        n &gt;&gt;= <span class="number">1</span>;</div><div class="line">        p = multi(p,p);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick_mod</span><span class="params">(LL a,LL b)</span></span></div><div class="line">&#123;</div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    a %= MOD;</div><div class="line">    <span class="keyword">while</span>(b)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            ans = ans * a % MOD;</div><div class="line">            b--;</div><div class="line">        &#125;</div><div class="line">        b &gt;&gt;= <span class="number">1</span>;</div><div class="line">        a = a * a % MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Legendre</span><span class="params">(LL a,LL p)</span></span></div><div class="line">&#123;</div><div class="line">    LL t = quick_mod(a,(p<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span>(t == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dept,LL product = <span class="number">1</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(dept == cnt)</div><div class="line">    &#123;</div><div class="line">        fac[<span class="number">1</span>][ct++] = product;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=num[dept]; i++)</div><div class="line">    &#123;</div><div class="line">        dfs(dept+<span class="number">1</span>,product);</div><div class="line">        product *= pri[dept];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">OK</span><span class="params">(Matrix A,LL n)</span></span></div><div class="line">&#123;</div><div class="line">    Matrix ans = power(A,n);</div><div class="line">    <span class="keyword">return</span> ans.m[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span> &amp;&amp; ans.m[<span class="number">0</span>][<span class="number">1</span>] == <span class="number">0</span> &amp;&amp;</div><div class="line">           ans.m[<span class="number">1</span>][<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; ans.m[<span class="number">1</span>][<span class="number">1</span>] == <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    fac[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    fac[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</div><div class="line">    fac[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">500000003</span>;</div><div class="line">    fac[<span class="number">0</span>][<span class="number">3</span>] = <span class="number">1000000006</span>;</div><div class="line">    LL a,b,c,d;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d)</div><div class="line">    &#123;</div><div class="line">        LL t = a * a + <span class="number">4</span> * b;</div><div class="line">        A.m[<span class="number">0</span>][<span class="number">0</span>] = a;</div><div class="line">        A.m[<span class="number">0</span>][<span class="number">1</span>] = b;</div><div class="line">        A.m[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        A.m[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(Legendre(t,MOD) == <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(OK(A,fac[<span class="number">0</span>][i]))</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">cout</span>&lt;&lt;fac[<span class="number">0</span>][i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            ct = <span class="number">0</span>;</div><div class="line">            cnt = <span class="number">6</span>;</div><div class="line">            dfs(<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">            sort(fac[<span class="number">1</span>],fac[<span class="number">1</span>]+ct);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ct;i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(OK(A,fac[<span class="number">1</span>][i]))</div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">cout</span>&lt;&lt;fac[<span class="number">1</span>][i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2015 ACM 长春赛区网赛题解 （部分）]]></title>
      <url>http://blog.jetmuffin.com/2015/09/14/2015-ACM-changchun-online-solution/</url>
      <content type="html"><![CDATA[<h2 id="1001-Alisha’s-Party-优先队列）题目链接-HDOJ-5437"><a href="#1001-Alisha’s-Party-优先队列）题目链接-HDOJ-5437" class="headerlink" title="1001 Alisha’s Party (优先队列）题目链接 HDOJ-5437"></a>1001 Alisha’s Party (优先队列）<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5437" target="_blank" rel="external">题目链接 HDOJ-5437</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>Alisha开party, 到了的好友在门外等候，Alisha会开m次门，每次开门按给定的条件<code>(t,p)-&gt;在第t个好友到达时候开门，并且放进p个人</code>，若门外等候的人少于p个，则会全部放进来；最后会开一次门把所有人放进来；每次放进的p个人，按礼品价值高低顺序进入；得到一个好友进入的序列，最后求序列中的某几个序号对应的人名。</p>
<a id="more"></a>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先将所有的开门条件按时间排好序，然后用优先队列处理门外排队的人，循环模拟每个人到达的时间(i从1到k，第i时间时i-1号好友到达），将开门的计数器cnt置为0，然后当i等于某个开门条件时（即<code>i == open[k].t</code>)，将open[k].p个人出队并将他们的名字加入结果(vector)中。处理完所有的开门条件后，将队列中所有元素弹出，并加到结果中。</p>
<p>然后是这题的trick吧：</p>
<ul>
<li>优先队列中，如果礼物价值相同，按时间顺序先进先出</li>
<li>m个开门条件(t,p)不一定是按顺序给的，要自行排序</li>
<li>所有m个开门条件结束以后，Alisha会开一次门把所有人放进去，也就是说当m=0(不开门)的时候，所有人按礼物价值降序进入</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 150005 </span></div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">205</span>];  </div><div class="line">    <span class="keyword">int</span> w, t;  </div><div class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(node a,node b)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(a.w == b.w) <span class="keyword">return</span> a.t &gt; b.t;  </div><div class="line">        <span class="keyword">return</span> a.w &lt; b.w;  </div><div class="line">    &#125;  </div><div class="line">&#125;;</div><div class="line">node fri[maxn];</div><div class="line"><span class="keyword">struct</span> node1&#123;</div><div class="line">    <span class="keyword">int</span> t,p;</div><div class="line">&#125;open[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node1 a, node1 b)</span></span>&#123;  </div><div class="line">    <span class="keyword">return</span> a.t &lt; b.t;  </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t, k, m, query;  </div><div class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);  </div><div class="line">    <span class="keyword">while</span>(t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;k, &amp;m, &amp;query);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; k; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s %d"</span>,fri[i].name,&amp;fri[i].w);</div><div class="line">            fri[i].t = i;</div><div class="line">        &#125; </div><div class="line">        open[<span class="number">0</span>].t = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; m;i++)  </div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;open[i].t, &amp;open[i].p);  </div><div class="line">        priority_queue&lt;node&gt;q;  </div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line">        </div><div class="line">        sort(open, open + m, cmp);</div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= k; i++)&#123;</div><div class="line">            q.push(fri[i<span class="number">-1</span>]);</div><div class="line">            <span class="keyword">if</span>(i == open[cnt].t)&#123;</div><div class="line">                <span class="comment">//cout&lt;&lt;i&lt;&lt;endl;</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= open[cnt].p &amp;&amp; (!q.empty()); j++)&#123;</div><div class="line">                    node tmp = q.top();</div><div class="line">                    <span class="comment">//cout&lt;&lt;tmp.name&lt;&lt;endl;</span></div><div class="line">                    q.pop();</div><div class="line">                    ans.push_back(tmp.t);</div><div class="line">                &#125;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">            node tmp = q.top();</div><div class="line">            q.pop();</div><div class="line">            ans.push_back(tmp.t);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> len = ans.size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; query; i++)&#123;</div><div class="line">            <span class="keyword">int</span> x;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s"</span>, fri[ans[x<span class="number">-1</span>]].name);</div><div class="line">            <span class="keyword">if</span>(i == query<span class="number">-1</span>)</div><div class="line">               <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">               <span class="built_in">printf</span>(<span class="string">" "</span>);  </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1002-Ponds-DFS）题目链接-HDOJ-5438"><a href="#1002-Ponds-DFS）题目链接-HDOJ-5438" class="headerlink" title="1002 Ponds (DFS）题目链接 HDOJ-5438"></a>1002 Ponds (DFS）<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5438" target="_blank" rel="external">题目链接 HDOJ-5438</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定一个无向图，首先去掉度数小于2的顶点（<strong>是不断删去，删去一个顶点可能会再次出现需要删除的顶点，要删到直到不再出现为止</strong>)，然后对剩下的图计算其每个连通分量的顶点数，若顶点数为奇数，则将其权值加到最后的结果，输出到最后的结果。</p>
<ul>
<li>trick:<br>需要不断删去不符合节点直到不存在不符合节点为止，如下图情况：<br><img src="http://i1.tietuku.com/7ef99cd19149a4c2.png" alt="1002"><br>图1中所有顶点都会被去掉，图2中只剩下1,2,3</li>
</ul>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>首先用队列处理删点操作，先将所有符合删除条件的点入队，然后从队列中每弹出一个顶点，将其所有相邻顶点度数-1，若再次出现符合删除条件，则将新点也入队，直到队列为空。（注意用访问标记减少重复访问）；然后用DFS去遍历整个图，每访问完一个连通子图计算权值和并判断节点数。</p>
<ul>
<li>复杂度O(|V|)</li>
</ul>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</div><div class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; g[maxn];</div><div class="line">LL w[maxn];</div><div class="line"><span class="keyword">int</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> deg[maxn];</div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line">LL sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(vis[x])</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> len = g[x].size();</div><div class="line">    <span class="comment">// cout&lt;&lt;x&lt;&lt;" "&lt;&lt;sum&lt;&lt;" "&lt;&lt;cnt&lt;&lt;endl;</span></div><div class="line">    sum += w[x];</div><div class="line">    cnt++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">        <span class="keyword">int</span> v = g[x][i];</div><div class="line">        <span class="keyword">if</span>(!vis[v])&#123;</div><div class="line">            dfs(v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(deg[i] &lt; <span class="number">2</span>)&#123;</div><div class="line">            vis[i] = <span class="number">1</span>;</div><div class="line">            q.push(i);</div><div class="line">        &#125;   </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="keyword">int</span> len = g[u].size();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len; i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = g[u][i];</div><div class="line">            <span class="keyword">if</span>(!vis[v])&#123;</div><div class="line">                deg[v] --;</div><div class="line">                <span class="keyword">if</span>(deg[v] &lt; <span class="number">2</span>)&#123;</div><div class="line">                    vis[v] = <span class="number">1</span>;</div><div class="line">                    q.push(v);</div><div class="line">                &#125;                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="keyword">int</span> n,m;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span> , <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">memset</span>(deg,<span class="number">0</span>, <span class="keyword">sizeof</span>(deg));</div><div class="line">        <span class="built_in">memset</span>(g,<span class="number">0</span>, <span class="keyword">sizeof</span>(g));</div><div class="line">        ans = <span class="number">0</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,w+i);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u,v;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</div><div class="line">            g[u].push_back(v);</div><div class="line">            g[v].push_back(u);</div><div class="line">            deg[u]++;</div><div class="line">            deg[v]++;</div><div class="line">        &#125;</div><div class="line">        work(n);</div><div class="line">        <span class="comment">// for(int i = 1; i &lt;= n; i++)</span></div><div class="line">        <span class="comment">//     cout&lt;&lt;vis[i]&lt;&lt;" ";</span></div><div class="line">        <span class="comment">// cout&lt;&lt;endl;</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[i])&#123;</div><div class="line">                cnt = <span class="number">0</span>;</div><div class="line">                sum = <span class="number">0</span>;</div><div class="line">                dfs(i);</div><div class="line">                <span class="keyword">if</span>(cnt%<span class="number">2</span> == <span class="number">1</span>)</div><div class="line">                    ans += sum;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1005-Travel-并查集）-题目链接-HDOJ-5441"><a href="#1005-Travel-并查集）-题目链接-HDOJ-5441" class="headerlink" title="1005 Travel(并查集） 题目链接 HDOJ-5441"></a>1005 Travel(并查集） <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5441" target="_blank" rel="external">题目链接 HDOJ-5441</a></h2><p>之前没有做过并查集处理图的题目，该题之后上题解</p>
<h2 id="1006-Favorite-Donut（后缀数组）题目链接-HDOJ-5442"><a href="#1006-Favorite-Donut（后缀数组）题目链接-HDOJ-5442" class="headerlink" title="1006 Favorite Donut（后缀数组）题目链接 HDOJ-5442"></a>1006 Favorite Donut（后缀数组）<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5442" target="_blank" rel="external">题目链接 HDOJ-5442</a></h2><p>这题据说比较裸的后缀自动机，之后上题解</p>
<h2 id="1007-The-Water-Problem-水题）题目链接-HDOJ-5443"><a href="#1007-The-Water-Problem-水题）题目链接-HDOJ-5443" class="headerlink" title="1007 The Water Problem (水题）题目链接 HDOJ-5443"></a>1007 The Water Problem (水题）<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5443" target="_blank" rel="external">题目链接 HDOJ-5443</a></h2><p>签到题，没什么好说的，区间最大值，不需要RMQ，线段树什么的，直接O(nq）就能过，很好的手速题，5min看完题8min交题ORZ~</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n; i++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</div><div class="line">        <span class="keyword">int</span> q;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= q; i++)&#123;</div><div class="line">            <span class="keyword">int</span> l,r;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</div><div class="line">            <span class="keyword">int</span> max = <span class="number">-1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = l; j&lt;=r; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(a[j] &gt; max )</div><div class="line">                    max = a[j];</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1008-Elven-Postman-二叉排序树）题目链接-HDOJ-5444"><a href="#1008-Elven-Postman-二叉排序树）题目链接-HDOJ-5444" class="headerlink" title="1008 Elven Postman (二叉排序树）题目链接 HDOJ-5444"></a>1008 Elven Postman (二叉排序树）<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5444" target="_blank" rel="external">题目链接 HDOJ-5444</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>题目描述了一种房间的排序方式，又讲了给定的序列怎么来的，讲了一大堆，结果发现这树就是一颗倒着的二叉排序树（二叉搜索树），大的数放左节点，小的树放右节点。</p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>给定一个序列可以构造出一颗BST，然后根据查询条件去查找就行了，向左递归输出W，向右递归输出E。</p>
<p>复杂度：查询<code>O(log(q))</code></p>
<ul>
<li>trick:<br>按题意，给定的序列长度是1000，也就是说树的深度是1000，若用数组模拟，需要2^1000大小的数组，必然RE，因此要用指针做。</li>
</ul>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> <span class="keyword">bool</span> first;</div><div class="line">  </div><div class="line"> <span class="keyword">struct</span> BST&#123;</div><div class="line">      <span class="keyword">int</span> data;</div><div class="line">      BST *leftchild;</div><div class="line">      BST *rightchild;</div><div class="line"> &#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(BST *&amp;root,<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">     <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;</div><div class="line">         root=(BST *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BST));</div><div class="line">         root-&gt;data=x;</div><div class="line">         root-&gt;leftchild=root-&gt;rightchild=<span class="literal">NULL</span>;</div><div class="line">     &#125;<span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">if</span>(x&lt;root-&gt;data)&#123;</div><div class="line">             Build(root-&gt;leftchild,x);</div><div class="line">         &#125;<span class="keyword">else</span> </div><div class="line">             Build(root-&gt;rightchild,x);</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Search</span><span class="params">(<span class="keyword">int</span> v,BST *root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>)&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;data &gt; v)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"E"</span>);</div><div class="line">        Search(v, root-&gt;leftchild);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;data &lt;v)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"W"</span>);</div><div class="line">        Search(v, root-&gt;rightchild);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        BST *root=<span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">             <span class="keyword">int</span> x;</div><div class="line">             <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</div><div class="line">             Build(root,x);</div><div class="line">         &#125;</div><div class="line">        <span class="keyword">int</span> q;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++)&#123;</div><div class="line">            <span class="keyword">int</span> t;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">            Search(t,root);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1010-Unknown-Treasure-Lucas定理-中国剩余定理-按位乘法-题目链接-HDOJ-5446"><a href="#1010-Unknown-Treasure-Lucas定理-中国剩余定理-按位乘法-题目链接-HDOJ-5446" class="headerlink" title="1010 Unknown Treasure(Lucas定理+中国剩余定理+按位乘法)题目链接 HDOJ-5446"></a>1010 Unknown Treasure(Lucas定理+中国剩余定理+按位乘法)<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5446" target="_blank" rel="external">题目链接 HDOJ-5446</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>组合数取模，求C(n,m)mod(p1<em>p2</em>…pk)</p>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>先使用Lucas定理求出对于每个pi，C(n, m) % pi的值。再使用中国剩余定理对模数和余数求解即可。</p>
<ul>
<li>trick:<br>在用中国剩余定理的过程中，会出现long long * long long 结果爆掉了的情况，这个是导致WA的问题。。所以要手写一个按位乘法</li>
</ul>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m,k;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> lcm;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> remainer[<span class="number">20</span>];</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> divider[<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">extend_gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> &amp;x,<span class="keyword">long</span> <span class="keyword">long</span> &amp;y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (a==<span class="number">0</span> &amp;&amp; b==<span class="number">0</span>)</div><div class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span> (b==<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">       x=<span class="number">1</span>;</div><div class="line">       y=<span class="number">0</span>;</div><div class="line">       <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=extend_gcd(b,a%b,x,y);</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> temp=x;</div><div class="line">    x=y;</div><div class="line">    y=temp-a/b*y;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mod_reverse</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> d_p)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x,y;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=extend_gcd(a,d_p,x,y);</div><div class="line">    <span class="keyword">if</span> (ans!=<span class="number">1</span>)</div><div class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">       <span class="keyword">return</span> (x%d_p+d_p)%d_p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mul</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> mod)</span> </span>&#123;  </div><div class="line">    a = (a % mod + mod) % mod;  </div><div class="line">    b = (b % mod + mod) % mod;  </div><div class="line">  </div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">while</span>(b)&#123;  </div><div class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;  </div><div class="line">            ret += a;  </div><div class="line">            <span class="keyword">if</span>(ret &gt;= mod) ret -= mod;  </div><div class="line">        &#125;  </div><div class="line">        b &gt;&gt;= <span class="number">1</span>;  </div><div class="line">        a &lt;&lt;= <span class="number">1</span>;  </div><div class="line">        <span class="keyword">if</span>(a &gt;= mod) a -= mod;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> ret;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">crt</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> lcm)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span>;i&lt;k;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> others;</div><div class="line">        others=lcm/divider[i];</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mr=mod_reverse(others,divider[i]);</div><div class="line">        <span class="comment">//ans = (ans+remainer[i]*others*mr)%lcm;</span></div><div class="line">        ans = (ans + mul(mul(remainer[i],others,lcm),mr,lcm));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (ans+lcm)%lcm;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mod_pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> n_,<span class="keyword">long</span> <span class="keyword">long</span> p)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret=<span class="number">1</span>;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> A=a;</div><div class="line">    <span class="keyword">while</span>(n_)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (n_ &amp; <span class="number">1</span>)</div><div class="line">            ret=(ret*A)%p;</div><div class="line">        A=(A*A)%p;</div><div class="line">        n_&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> factorial[<span class="number">100010</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p)</span></span></div><div class="line">&#123;</div><div class="line">    factorial[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>;i &lt;= p;i++)</div><div class="line">        factorial[i] = factorial[i<span class="number">-1</span>]*i%p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Lucas</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> k_,<span class="keyword">long</span> <span class="keyword">long</span> p)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> re = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(a &amp;&amp; k_)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> aa = a%p;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> bb = k_%p;</div><div class="line">        <span class="keyword">if</span>(aa &lt; bb) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        re = re*factorial[aa]*mod_pow(factorial[bb]*factorial[aa-bb]%p,p<span class="number">-2</span>,p)%p;</div><div class="line">        a /= p;</div><div class="line">        k_ /= p;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> re;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;T;</div><div class="line">    <span class="keyword">while</span>(T--)</div><div class="line">    &#123;</div><div class="line">        lcm = <span class="number">1</span>;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span>;i&lt;k;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;p;</div><div class="line">            init(p);</div><div class="line">            divider[i] = p;</div><div class="line">            lcm = lcm*divider[i];</div><div class="line">            remainer[i] = Lucas(n,m,p);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;crt(lcm)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HHU ACM第五周 数论专题（二）题解]]></title>
      <url>http://blog.jetmuffin.com/2015/09/08/HHU-ACM-training-week-five-number-theory-solutions/</url>
      <content type="html"><![CDATA[<h2 id="1000-Zball-in-Tina-Town-HDOJ-5391"><a href="#1000-Zball-in-Tina-Town-HDOJ-5391" class="headerlink" title="1000 Zball in Tina Town HDOJ-5391"></a>1000 Zball in Tina Town <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5391" target="_blank" rel="external">HDOJ-5391</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>Z-ball在第n天会变为前一天的n倍，求最后的大小mod n，即求(n-1)!%n<br><a id="more"></a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>根据威尔逊定理(自行百度），</p>
<p>$f(x)=\begin{cases}n-1, &amp;x\in prime\cr 0, &amp;x\not \in prime \end{cases}$</p>
<p>此外有一个trick，即f(4)=2.<br>没看过威尔逊定理也没事，暴力求前几项打个表就能发现规律了</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=x;i++)  </div><div class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;  </div><div class="line">    <span class="keyword">return</span> x!=<span class="number">1</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> t;  </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);  </div><div class="line">    <span class="keyword">while</span>(t--)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">int</span> n;  </div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);  </div><div class="line">        <span class="keyword">if</span>(n==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">"2\n"</span>);  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(is_prime(n)) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n<span class="number">-1</span>);  </div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0\n"</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1001-C-Looooops-POJ-2115"><a href="#1001-C-Looooops-POJ-2115" class="headerlink" title="1001 C Looooops POJ-2115"></a>1001 C Looooops <a href="http://poj.org/problem?id=2115" target="_blank" rel="external">POJ-2115</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>循环开始数为variable = A，循环结束条件为variable = B,每次variable + 2，最大数范围为2^k，求循环执行几次</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>根据题意列出同余方程:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">`C * n \equiv B (mod 2^&#123;k&#125;) </div><div class="line"></div><div class="line"></div><div class="line">其中`C`,`B`,`2^k`均已知，符合拓展欧几里得算法（自行百度）的条件因此我们直接可以套用拓展欧几里得算法解同余方程。</div><div class="line"></div><div class="line">也有其他做法，不需要拓展欧几里得也能做出。</div><div class="line"></div><div class="line">### 代码</div><div class="line"></div><div class="line">```cpp</div><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace std;</div><div class="line">#define LL long long</div><div class="line">LL extgcd(LL a,LL b,LL &amp;x,LL &amp;y)&#123;</div><div class="line">    if(b == 0)&#123;</div><div class="line">        x=1;</div><div class="line">        y=0;</div><div class="line">        return a;</div><div class="line">    &#125;</div><div class="line">    LL d = extgcd(b, a%b, y, x);</div><div class="line">    y -= x*(a/b);</div><div class="line">    return d;</div><div class="line">&#125;</div><div class="line">int main()&#123;</div><div class="line">    LL A,B,C,K;</div><div class="line">    while(~scanf(&quot;%lld%lld%lld%lld&quot;,&amp;A,&amp;B,&amp;C,&amp;K))&#123;</div><div class="line">        if(A==0 &amp;&amp; B ==0 &amp;&amp; C ==0 &amp; K==0)</div><div class="line">            break;</div><div class="line">        LL x, y;</div><div class="line">        LL m = (1LL &lt;&lt; K);</div><div class="line">        LL gcd = extgcd(C, m, x, y);</div><div class="line">        LL b = (B - A + m) % m;</div><div class="line">        LL t = m / gcd; </div><div class="line">        if(b % gcd == 0)&#123;</div><div class="line">            LL ans = (b / gcd * x) % m; </div><div class="line">            ans = (m + ans) % m;</div><div class="line">            ans = (ans % t + t) % t;</div><div class="line">            cout&lt;&lt;ans&lt;&lt;endl;</div><div class="line">        &#125;else&#123;</div><div class="line">            cout&lt;&lt;&quot;FOREVER&quot;&lt;&lt;endl;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1002-Biorhythms-POJ-1006"><a href="#1002-Biorhythms-POJ-1006" class="headerlink" title="1002 Biorhythms POJ-1006"></a>1002 Biorhythms <a href="http://poj.org/problem?id=1006" target="_blank" rel="external">POJ-1006</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给出三个日期，分别对应于体力，情感，智力出现峰值的日期。然后再给出一个起始日期，要求从这一天开始，算出最少再过多少天后三个峰值同时出现。</p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>根据题意可以列出模线性方程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">\begin&#123;cases&#125;</div><div class="line">    x \equiv p (mod \28) \cr x \equiv e (mod \33) \cr x \equiv i (mod \35)\end&#123;cases&#125;</div></pre></td></tr></table></figure>
<p>然后根据中国剩余定理（自行百度），可以直接套用模板做出，下面给出通用的中国剩余定理模板，实际解这题中很多值已经可以直接算出来了,<strong>代码会更简单一些</strong></p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="keyword">int</span> m[<span class="number">3</span>] = &#123;<span class="number">23</span>, <span class="number">28</span>, <span class="number">33</span>&#125;;</div><div class="line"><span class="keyword">int</span> a[<span class="number">3</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">extgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</div><div class="line">        x=<span class="number">1</span>;</div><div class="line">        y=<span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> d = extgcd(b, a%b, y, x);</div><div class="line">    y -= x*(a/b);</div><div class="line">    <span class="keyword">return</span> d;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">crt</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> M = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        M *= m[i];</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</div><div class="line">        <span class="keyword">int</span> x, y;</div><div class="line">        <span class="keyword">int</span> t = M/m[i];</div><div class="line">        extgcd(t, m[i], x, y);</div><div class="line">        ret = (ret + t *x * a[i]) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> p, e, i, d;</div><div class="line">    <span class="keyword">int</span> x,y;</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;p,&amp;e,&amp;i,&amp;d))&#123;</div><div class="line">        cnt++;</div><div class="line">        <span class="keyword">if</span>(p==<span class="number">-1</span> &amp;&amp; e ==<span class="number">-1</span> &amp;&amp; i ==<span class="number">-1</span> &amp; d==<span class="number">-1</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        a[<span class="number">0</span>] = p;</div><div class="line">        a[<span class="number">1</span>] = e;</div><div class="line">        a[<span class="number">2</span>] = i;</div><div class="line">        <span class="keyword">int</span> ans = crt(<span class="number">3</span>);</div><div class="line">        ans = (ans - d) % <span class="number">21252</span>;</div><div class="line">        <span class="keyword">if</span>(ans &lt;= <span class="number">0</span>)</div><div class="line">            ans += <span class="number">21252</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: the next triple peak occurs in %d days.\n"</span>,cnt,ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1003-Infoplane-in-Tina-Town-HDOJ-5392"><a href="#1003-Infoplane-in-Tina-Town-HDOJ-5392" class="headerlink" title="1003 Infoplane in Tina Town HDOJ-5392"></a>1003 Infoplane in Tina Town <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5392" target="_blank" rel="external">HDOJ-5392</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给定置换A的序列，每次对初始序列[1,2,3,…,n]做A置换，求最少做几次A置换能够变回到原序列</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>根据题意，要求的是A置换的循环长度，根据定理，循环长度即为置换中所有循环节长度的最小公倍数。因此只要求出各个循环节的长度，并求总的最小公倍数即可。然而因为需要取模，而常规欧几里得算法求gcd再求lcm求最小公倍数不可取模，因此需要用分解质因数方法去求最小公倍数。</p>
<p>将每个数分解成质因数p的幂次的乘积的形式，则每个质因数在lcm中出现的次数为在每个a[i]中出现次数的最大值，统计每个质因数p出现的次数，最后做一次乘积即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lcm = p_&#123;1&#125;^&#123;b_&#123;1&#125;&#125;\times p_&#123;2&#125;^&#123;b_&#123;2&#125;&#125;\times p_&#123;3&#125;^&#123;b_&#123;3&#125;&#125;\times ... p_&#123;k&#125;^&#123;b_&#123;k&#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3000010</span>;</div><div class="line"><span class="keyword">const</span> LL mod = <span class="number">3221225473</span>;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> b[maxn];</div><div class="line"><span class="keyword">int</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</div><div class="line">        &#125; </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">int</span> k = i;</div><div class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span>(!vis[k])&#123;</div><div class="line">                    vis[k] = <span class="number">1</span>;</div><div class="line">                    len++;</div><div class="line">                    k = a[k];</div><div class="line">                &#125; <span class="comment">//求出len为循环节长度</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j*j &lt;= len; j++)&#123;</div><div class="line">                    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">while</span>(len % j == <span class="number">0</span>)&#123;</div><div class="line">                        cnt++;</div><div class="line">                        len /= j;</div><div class="line">                    &#125;</div><div class="line">                    b[j] = max(b[j], cnt);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(len &gt; <span class="number">1</span>)</div><div class="line">                    b[len] = max(b[len], <span class="number">1</span>);                </div><div class="line">                <span class="comment">//求最小公倍数</span></div><div class="line">        &#125;</div><div class="line">        LL ans = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b[i]; j++)</div><div class="line">                ans = ans * i % mod;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);       </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1004-233-Matrix-HDOJ-5015"><a href="#1004-233-Matrix-HDOJ-5015" class="headerlink" title="1004 233 Matrix HDOJ-5015"></a>1004 233 Matrix <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5015" target="_blank" rel="external">HDOJ-5015</a></h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>给定一个矩阵，矩阵的第一行为0，233,2333,23333.。。第一列为输入的序列，同时<code>ai,j = ai-1,j +ai,j-1( i,j ≠ 0)</code>，求a[n,m]。</p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>这题是一个很好的矩阵递推公式求解的题目，求解过程如下：</p>
<p>首先我们将矩阵的第一列进行一次转换：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">\begin&#123;pmatrix&#125;</div><div class="line">    0\\ </div><div class="line">    a[1]\\ </div><div class="line">    a[2]\\ </div><div class="line">    a[3]\\ </div><div class="line">    a[4]</div><div class="line">    \end&#123;pmatrix&#125;</div><div class="line"></div><div class="line">    \to</div><div class="line">    \begin&#123;pmatrix&#125;</div><div class="line">    23\\ </div><div class="line">    a[1]\\ </div><div class="line">    a[2]\\ </div><div class="line">    a[3]\\ </div><div class="line">    a[4]\\</div><div class="line">    3</div><div class="line">    \end&#123;pmatrix&#125;</div></pre></td></tr></table></figure>
<pre><code>那么由第一列转换为第二列即可表示为：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">\begin&#123;pmatrix&#125;</div><div class="line">23*10+3\\ </div><div class="line">a[1]+23*10+3\\ </div><div class="line">a[2]+a[1]+23*10+3\\ </div><div class="line">a[3]+a[2]+a[1]+23*10+3\\ </div><div class="line">a[4]+a[3]+a[2]+a[1]+23*10+3</div><div class="line">\end&#123;pmatrix&#125;</div></pre></td></tr></table></figure>
<pre><code>这样我们就能发现，`f[2,2] = f[1,2]+f[2,1]; f[3,2] = f[2,2]+f[3,1]` ....

顺手一推即可得到转移矩阵A为：
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">\begin&#123;bmatrix&#125;</div><div class="line">10 &amp;0 &amp;0 &amp;0 &amp;0 &amp;1\\</div><div class="line">10 &amp;1 &amp;0 &amp;0 &amp;0 &amp;1\\</div><div class="line">10 &amp;1 &amp;1 &amp;0 &amp;0 &amp;1\\</div><div class="line">10 &amp;1 &amp;1 &amp;1 &amp;0 &amp;1\\</div><div class="line">10 &amp;1 &amp;1 &amp;1 &amp;1 &amp;1\\</div><div class="line"> 0  &amp;0 &amp;0 &amp;0 &amp;0 &amp;1\\</div><div class="line">\end&#123;bmatrix&#125;</div></pre></td></tr></table></figure>
<p>然后呢可以得到<code>f[2]（第二列）= A*f[1]</code>,<code>f[n]=A*f[n-1]</code>, <code>f[n] = A^m*f[0]</code></p>
<p>然后套用矩阵快速幂就可以了</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">10000007</span>;</div><div class="line"><span class="keyword">struct</span> matrix</div><div class="line">&#123;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">long</span> m[<span class="number">15</span>][<span class="number">15</span>];</div><div class="line">  matrix()  </div><div class="line">  &#123;  </div><div class="line">      <span class="built_in">memset</span>(m,<span class="number">0</span>,<span class="keyword">sizeof</span>(m));  </div><div class="line">  &#125; </div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"></div><div class="line"><span class="function">matrix <span class="title">mul</span><span class="params">(matrix a, matrix b)</span></span>&#123;</div><div class="line">  matrix c;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n+<span class="number">2</span>; i++)</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n+<span class="number">2</span>; j++)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n+<span class="number">2</span>; k++)</div><div class="line">      &#123;</div><div class="line">        c.m[i][j] = (c.m[i][j] + a.m[i][k]*b.m[k][j] ) %mod;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">return</span> c;</div><div class="line">&#125; </div><div class="line"><span class="function">matrix <span class="title">pow</span><span class="params">(matrix a, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">  matrix b;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n+<span class="number">2</span>; i++)</div><div class="line">    b.m[i][i] = <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span>(k &gt;= <span class="number">1</span>)&#123;</div><div class="line">    <span class="comment">// cout&lt;&lt;k&lt;&lt;endl;</span></div><div class="line">    <span class="keyword">if</span>(k&amp;<span class="number">1</span>)</div><div class="line">      b = mul(b,a);</div><div class="line">    a = mul(a,a);</div><div class="line">    k = k/<span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</div><div class="line">    matrix ans,base;</div><div class="line">    ans.m[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">23</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ans.m[i+<span class="number">1</span>][<span class="number">1</span>]);  </div><div class="line">    &#125;  </div><div class="line">    ans.m[n+<span class="number">2</span>][<span class="number">1</span>]=<span class="number">3</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)base.m[i][<span class="number">1</span>]=<span class="number">10</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">2</span>;i++)base.m[i][n+<span class="number">2</span>]=<span class="number">1</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n+<span class="number">1</span>;i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=i;j++)base.m[i][j]=<span class="number">1</span>;  </div><div class="line">    &#125;  </div><div class="line">    base = <span class="built_in">pow</span>(base,m);</div><div class="line">    ans = mul(base,ans);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ans.m[n+<span class="number">1</span>][<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Floyd-Warshall算法 多源最短路径]]></title>
      <url>http://blog.jetmuffin.com/2015/09/05/floyd-warshall-multi-source-shortest-path/</url>
      <content type="html"><![CDATA[<h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>Floyd算法的原理即动态规划，令D(i,j)表示从i点到达j点的最短路径长度。那么从i点到达j点有两种可能：</p>
<ol>
<li>直接从i到达j不经过中间点k</li>
<li><p>i经过中间点k到达j，那么需要比较D(i,k)+D(k,j)和D(i,j)的大小并且更新最小值</p>
<p>我们遍历所有的点k,就可以得到从点i到j的最短路径了，而D数组不需要重新开辟，直接在邻接矩阵g上操作就行了</p>
</li>
</ol>
<a id="more"></a>
<h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">k: 1 -&gt;; n</div><div class="line">    i: 1 -&gt; n</div><div class="line">        j: 1 -&gt; n</div><div class="line">            g[i][j] = min(g[i][j],g[i][k]+g[k][j])</div></pre></td></tr></table></figure></p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="hdu-2544"><a href="#hdu-2544" class="headerlink" title="hdu 2544"></a>hdu 2544</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 100000000  </span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</div><div class="line"><span class="keyword">int</span> g[maxn][maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a&lt;b?a:b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">(<span class="keyword">int</span> n )</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k ++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">                g[i][j] = min(g[i][j], g[i][k] + g[k][j]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m),n+m)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">                <span class="keyword">if</span>(i == j)</div><div class="line">                    g[i][j] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    g[i][j] = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u,v,w;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</div><div class="line">            g[u][v] = g[v][u] = w;</div><div class="line">        &#125;</div><div class="line">        floyd(n);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,g[<span class="number">1</span>][n]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="poj1502"><a href="#poj1502" class="headerlink" title="poj1502"></a>poj1502</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 100000000  </span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</div><div class="line"><span class="keyword">int</span> g[maxn][maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a&lt;b?a:b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">(<span class="keyword">int</span> n )</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k ++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">                g[i][j] = min(g[i][j], g[i][k] + g[k][j]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">                g[i][j] = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</div><div class="line">                <span class="keyword">int</span> x;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x))  g[i][j] = g[j][i] = x;</div><div class="line">                <span class="keyword">else</span> <span class="built_in">scanf</span>(<span class="string">"x"</span>); <span class="comment">//input handle</span></div><div class="line">            &#125;</div><div class="line">        floyd(n);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(g[<span class="number">1</span>][i] &gt; ans)</div><div class="line">                ans = g[<span class="number">1</span>][i];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dijkstra算法 单源最短路径 堆优化]]></title>
      <url>http://blog.jetmuffin.com/2015/09/05/dijkstra-single-source-shortest-path-optimize-by-heap/</url>
      <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Dijkstra是用来解决只含有非负边权的单源最短路径问题。给定一个起始点s，算法可以求出s到其他所有点的最短路径距离。算法结束后会生成一棵最短路径树。<br><a id="more"></a></p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul>
<li>输入：图G（邻接矩阵或者邻接表）</li>
<li>输出：s到每一个点的最短路径</li>
<li><p>具体流程：</p>
<ol>
<li>初始化距离数组为INF</li>
<li>设置所有点都未访问过</li>
<li>找到所有未访问过的点中最小的一个，标记为访问过</li>
<li>对3中找到的点的所有相邻点进行松弛操作</li>
<li>重复3和4直到所有点都被访问过</li>
</ol>
</li>
<li>复杂度：朴素方法<code>O(|V|^2+|E|)</code>，最大堆维护距离<code>O(|E|+|V|log|V|)</code></li>
<li><p>算法动图</p>
<p><img src="http://pic002.cnblogs.com/images/2012/426620/2012073019540660.gif" alt="dijkstra"></p>
</li>
</ul>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>朴素的dijkstra相对于spfa没有任何优势，复杂度达到了<code>O(n^2)</code>的级别，但是只要加入了堆优化，复杂度可以降到<code>O(nlog(n))</code>,则体现出它的优势了。最小堆查询最小值的复杂度为`O(logn)</p>
<h3 id="最小堆模板"><a href="#最小堆模板" class="headerlink" title="最小堆模板"></a>最小堆模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>struct HeapElement {<br>    // key存储顶点序号，value存储到该顶点的最短距离<br>    int key, value;<br>};<br>struct MinHeap {<br>    HeapElement heap[MAXN];<br>    int position[MAXN];<br>    int size; // 顶点数<br>    void init() {<br>        heap[size=0].value = -INF;<br>        memset(position, 0, sizeof(position));<br>    }<br>    void insert(int key, int value) {<br>        heap[++size].key = key;<br>        heap[size].value = value;<br>        position[key] = size;<br>        siftUp(size);<br>    }<br>    void decrease(int index) {<br>        int x = heap[index].value;<br>        int y = heap[size].value;<br>        – size;<br>        if (index == size+1)<br>            return;  </p>
<pre><code>    swap(heap[index], heap[size+1]);  
    if (y &gt;= x) {  
        siftDown(index);      
    } else {  
        siftUp(index);    
    }  
}  
int delmin() {  
    int x = heap[1].key;  
    decrease(1);  
    return x;  
}  
void siftUp(int index) {  
    while (index &gt; 1) {  
        if (heap[index].value &lt; heap[index/2].value) {  
            swap(heap[index],heap[index/2]);      
        } else {  
            break;  
        }  
        index /= 2;  
    }  
}  
void siftDown(int index) {  
    while (index*2 &lt;= size) {  
        index *= 2;  
        if (index &lt; size &amp;&amp; heap[index].value &gt; heap[index+1].value) {  
            ++ index;  
        }  
        if (heap[index].value &lt; heap[index/2].value) {  
            swap(heap[index],heap[index/2]);  
        } else {  
            break;  
        }  
    }  
}  
void makeHeap() {  
    for (int i = size/2; i &gt; 0; -- i)   
        siftDown(i);  
}  
void swap(HeapElement &amp;a, HeapElement &amp;b) {  
    HeapElement temp = a;  
    a = b;  
    b = temp;  
    int tmp = position[a.key];  
    position[a.key] = position[b.key];  
    position[b.key] = tmp;  
}  
</code></pre><p>}H;  </p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="hdu-2544"><a href="#hdu-2544" class="headerlink" title="hdu 2544"></a>hdu 2544</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f  </span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> edge&#123;</div><div class="line">    <span class="keyword">int</span> i,w;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;edge&gt; g[maxn];</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">int</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;  </div><div class="line">    <span class="keyword">return</span> a&lt;b?a:b;  </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ; i++)</div><div class="line">        dis[i] = INF;</div><div class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> mark = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> mindis = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; dis[j] &lt; mindis)&#123;</div><div class="line">                mindis = dis[j];</div><div class="line">                mark = j;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="comment">//find vertex of minimal distance</span></div><div class="line">        vis[mark] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; g[mark].size(); j++)&#123;</div><div class="line">            <span class="keyword">int</span> v = g[mark][j].i;</div><div class="line">            <span class="keyword">int</span> w = g[mark][j].w;</div><div class="line">            <span class="keyword">if</span>(!vis[v])&#123;</div><div class="line">                dis[v] = min(dis[v],dis[mark]+w);</div><div class="line">            &#125;       </div><div class="line">        &#125;<span class="comment">//relax the adjacent edges of minimal vertex</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m),m+n)&#123;</div><div class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span>(g));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u,v,w;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</div><div class="line">            edge e;</div><div class="line">            e.i = v;</div><div class="line">            e.w = w;</div><div class="line">            g[u].push_back(e);</div><div class="line">            e.i = u;</div><div class="line">            g[v].push_back(e);</div><div class="line">        &#125;</div><div class="line">        dijkstra(n);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[n]);</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="hdu-2544-堆优化版本"><a href="#hdu-2544-堆优化版本" class="headerlink" title="hdu 2544 堆优化版本"></a>hdu 2544 堆优化版本</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7FFFFFFF  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">  </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">105</span>;  </div><div class="line"><span class="keyword">int</span> dist[SIZE];  </div><div class="line"><span class="keyword">int</span> G[SIZE][SIZE];  </div><div class="line"><span class="keyword">bool</span> vis[SIZE];  </div><div class="line"><span class="keyword">struct</span> HeapElement &#123;  </div><div class="line">    <span class="keyword">int</span> key, value;      </div><div class="line">&#125;;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(HeapElement &amp;ha, HeapElement &amp;hb)</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> key = ha.key;  </div><div class="line">    <span class="keyword">int</span> value = ha.value;  </div><div class="line">    ha.key = hb.key;  </div><div class="line">    ha.value = hb.value;  </div><div class="line">    hb.key = key;  </div><div class="line">    hb.value = value;  </div><div class="line">&#125;;  </div><div class="line"><span class="comment">// 使用邻接表储存图，线性表储存堆   </span></div><div class="line"><span class="keyword">struct</span> MinHeap &#123;  </div><div class="line">    HeapElement heap[SIZE];  </div><div class="line">    <span class="keyword">int</span> n;    <span class="comment">// 顶点数      </span></div><div class="line">          </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeheap</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n/<span class="number">2</span>; i &gt; <span class="number">0</span>; -- i)  </div><div class="line">            siftDown(i);  </div><div class="line">    &#125;;  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">siftUp</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> k = index;  </div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">1</span>) &#123;  </div><div class="line">            <span class="keyword">if</span> (heap[k].value &lt; heap[k/<span class="number">2</span>].value) &#123;  </div><div class="line">                swap(heap[k],heap[k/<span class="number">2</span>]);      </div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                <span class="keyword">break</span>;      </div><div class="line">            &#125;  </div><div class="line">            k /= <span class="number">2</span>;      </div><div class="line">        &#125;  </div><div class="line">    &#125;;  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> k = index;  </div><div class="line">        <span class="keyword">while</span> (k*<span class="number">2</span> &lt;= n) &#123;  </div><div class="line">            k *= <span class="number">2</span>;  </div><div class="line">            <span class="keyword">if</span> (k &lt; n &amp;&amp; heap[k].value &gt; heap[k+<span class="number">1</span>].value) &#123;  </div><div class="line">                ++ k;      </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">if</span> (heap[k].value &lt; heap[k/<span class="number">2</span>].value) &#123;  </div><div class="line">                swap(heap[k],heap[k/<span class="number">2</span>]);  </div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                <span class="keyword">break</span>;      </div><div class="line">            &#125;      </div><div class="line">        &#125;  </div><div class="line">    &#125;;  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(HeapElement element)</span> </span>&#123;  </div><div class="line">        heap[++n] = element;  </div><div class="line">        siftUp(n);      </div><div class="line">    &#125;;  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> x = heap[index].value;  </div><div class="line">        <span class="keyword">int</span> y = heap[n].value;  </div><div class="line">        n -= <span class="number">1</span>;  </div><div class="line">          </div><div class="line">        <span class="comment">// 若删除节点位于最末位置，则删除成功，无需其他操作。   </span></div><div class="line">        <span class="keyword">if</span> (index == n+<span class="number">1</span>)   </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line">          </div><div class="line">        heap[index] = heap[n+<span class="number">1</span>];  </div><div class="line">        <span class="keyword">if</span> (y &gt;= x) &#123;  </div><div class="line">            siftDown(index);      </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            siftUp(index);      </div><div class="line">        &#125;  </div><div class="line">    &#125;;  </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">decreaseMin</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> x = heap[<span class="number">1</span>].key;  </div><div class="line">        decrease(<span class="number">1</span>);  </div><div class="line">        <span class="keyword">return</span> x;  </div><div class="line">    &#125;;  </div><div class="line">&#125;H;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> src, <span class="keyword">int</span> n)</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> i, j, w;  </div><div class="line">    <span class="keyword">bool</span> flag;  </div><div class="line">      </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;  </div><div class="line">        <span class="keyword">if</span> (G[i][src] != INF) &#123;  </div><div class="line">            dist[i] = G[src][i];  </div><div class="line">            HeapElement h = &#123;i, dist[i]&#125;;  </div><div class="line">            H.insert(h);      </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            dist[i] = INF;      </div><div class="line">        &#125;      </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));  </div><div class="line">    vis[src] = <span class="literal">true</span>;  </div><div class="line">    dist[src] = <span class="number">0</span>;  </div><div class="line">      </div><div class="line">  </div><div class="line">      </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++ i) &#123;  </div><div class="line">  </div><div class="line">        <span class="keyword">int</span> node = H.decreaseMin();  <span class="comment">//get the vertex of minimal distance</span></div><div class="line">        vis[node] = <span class="literal">true</span>;  </div><div class="line">  </div><div class="line">        <span class="keyword">for</span> (w = <span class="number">1</span>; w &lt;= n; ++ w) &#123;  </div><div class="line">            flag = <span class="literal">false</span>;  </div><div class="line">            <span class="keyword">if</span> (!vis[w] &amp;&amp; G[node][w] != INF) &#123;  </div><div class="line">                <span class="keyword">if</span> (dist[node] &lt; dist[w] - G[node][w]) &#123;  </div><div class="line">                    dist[w] = dist[node] + G[node][w];   <span class="comment">//relax all adjacent of this vertex</span></div><div class="line">                          </div><div class="line">                &#125;   </div><div class="line">                <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= H.n; ++ j) &#123;       <span class="comment">//update minimal heap</span></div><div class="line">                        <span class="keyword">if</span> (H.heap[j].key == w) &#123;  </div><div class="line">                            H.heap[j].value = dist[w];  </div><div class="line">                            flag = <span class="literal">true</span>;  </div><div class="line">                            <span class="keyword">break</span>;      </div><div class="line">                        &#125;      </div><div class="line">                    &#125;      </div><div class="line">                  </div><div class="line">                <span class="keyword">if</span> (!flag) &#123;  </div><div class="line">                    HeapElement h = &#123;w, dist[w]&#125;;  </div><div class="line">                    H.insert(h);  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                    H.siftUp(j);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;      </div><div class="line">    &#125;  </div><div class="line">&#125;;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++ j)  </div><div class="line">            G[i][j] = INF;  </div><div class="line">    H.n = <span class="number">0</span>;  </div><div class="line">&#125;;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> N, M, a, b, c;  </div><div class="line">      </div><div class="line">      </div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M)!=EOF, N&amp;&amp;M) &#123;  </div><div class="line">        init(N);  </div><div class="line">          </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++ i) &#123;  </div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);  </div><div class="line">            <span class="keyword">if</span> (G[a][b] &gt; c) &#123;  </div><div class="line">                G[a][b] = c;  </div><div class="line">                G[b][a] = c;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">        dijkstra(<span class="number">1</span>, N);  </div><div class="line">          </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dist[N]);      </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="poj-1502"><a href="#poj-1502" class="headerlink" title="poj 1502"></a>poj 1502</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f  </span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</div><div class="line"><span class="keyword">int</span> dis[maxn],g[maxn][maxn];</div><div class="line"><span class="keyword">int</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a&lt;b?a:b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        dis[i] = INF;</div><div class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span> , <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> mark = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> mindis = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; dis[j] &lt; mindis)&#123;</div><div class="line">                mindis = dis[j];</div><div class="line">                mark = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        vis[mark] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(!vis[j])&#123;</div><div class="line">                dis[j] = min(dis[j], g[mark][j] + dis[mark]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">                g[i][j] = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</div><div class="line">                <span class="keyword">int</span> x;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x))  g[i][j] = g[j][i] = x;</div><div class="line">                <span class="keyword">else</span> <span class="built_in">scanf</span>(<span class="string">"x"</span>); <span class="comment">//input handle</span></div><div class="line">            &#125;</div><div class="line">        dijkstra(n);</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(dis[i] &gt; ans)</div><div class="line">                ans = dis[i];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SPFA 单源最短路径 队列优化版Bellman-ford]]></title>
      <url>http://blog.jetmuffin.com/2015/09/04/spfa-single-source-shortest-path-optimize-by-queue/</url>
      <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>SPFA是队列优化版的Bellman-ford，核心思想和Bellman-ford相同，不停松弛节点。但是在Bellman-ford中需要对所有边的相应点都进行松弛，进行了过多的不必要操作。而SPFA则是将松弛过的点加入队列维护，使得被松弛的点尽量少。这样使得最坏情况下SPFA复杂度等于Bellman-ford，一般情况下远大于Bellman-ford</p>
<a id="more"></a>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul>
<li>复杂度：最坏情况O(|V|+|E|)</li>
<li>输入：n 图的顶点数（|V|）<br>src 源点<br>g 邻接表</li>
<li>输出：dis dis[i]表示src到点i的最短距离</li>
</ul>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="hdu2544"><a href="#hdu2544" class="headerlink" title="hdu2544"></a>hdu2544</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7FFFFFFF   </span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">150</span>;</div><div class="line"><span class="built_in">vector</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; g[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">int</span> vis[maxn];</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n; i++)&#123;</div><div class="line">        dis[i] = INF;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    vis[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    q.push(<span class="number">1</span>);</div><div class="line">    <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> u = q.front();</div><div class="line">        q.pop();</div><div class="line">        vis[u] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> v = g[u][i].first;</div><div class="line">            <span class="keyword">int</span> w = g[u][i].second;</div><div class="line">            <span class="keyword">if</span>(dis[u] + w &lt; dis[v])&#123;</div><div class="line">                dis[v] = dis[u] + w;</div><div class="line">                <span class="keyword">if</span>(vis[v] == <span class="number">0</span>)&#123;</div><div class="line">                    vis[v] = <span class="number">1</span>;</div><div class="line">                    q.push(v);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m),m+n)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            g[i].clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">            <span class="keyword">int</span> u,v,w;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</div><div class="line">            g[u].push_back(make_pair(v,w));</div><div class="line">            g[v].push_back(make_pair(u,w));</div><div class="line">        &#125;</div><div class="line">        spfa(n);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[n]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Bellman-ford算法 图论 单源最短路径 求负权环]]></title>
      <url>http://blog.jetmuffin.com/2015/09/04/bellman-ford-compute-negative-weight-circle/</url>
      <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Bellman-ford算法可以用来计算图中的单源最短路径。同时该算法可以处理边权为负的情况（Dijkstra算法无法处理负权），同时可以判断图中是否含有负权环。</p>
<p>设dis[v]为从源点s到v的最短路径长度。对于任意与v相连的顶点u，dis[v]可以满足三角不等式，即<code>dis[v]&lt;=dis[u]+w(u,v)</code>，根据该性质可以设置松弛操作。<br><a id="more"></a><br>松弛一条边（u,v)：</p>
<ol>
<li><p>判断通过u对v的最短路径是否能够进行改进</p>
</li>
<li><p>若可以，更新d[v]</p>
</li>
</ol>
<p>伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">松弛（u,v,w): </div><div class="line">    if(d[v]&gt;d[u]+w(u,v))</div><div class="line">        d[v]=d[u]+w(u,v)</div></pre></td></tr></table></figure></p>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ol>
<li>如果完成<code>|V|-1</code>轮操作后还能进行松弛操作（即仍然存在<code>d[v]&gt;d[u]+w(u,v)</code>），那么图中有负权环</li>
<li>若不存在负权环，经过<code>|V|-1</code>操作，min_dis[v] = dis[v]</li>
</ol>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul>
<li>输入：图G（edge数组）和起点s</li>
<li>输出：s到每个点的最短路径，以及图G是否包含负权环</li>
<li>算法流程：</li>
</ul>
<ol>
<li>初始化dis数组, <code>dis[s] = 0, dis[i](1&lt;=i&lt;=n, i!=s) = INF</code></li>
<li>枚举每一条边，进行松弛操作</li>
<li>重复2操作<code>|V|-1</code>次</li>
<li>枚举每一条边，看是否还能进行松弛操作</li>
</ol>
<ul>
<li>算法复杂度： <code>O(|V||E|)</code></li>
</ul>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="hdu-2544"><a href="#hdu-2544" class="headerlink" title="hdu 2544"></a>hdu 2544</h3><p>求单源最短路径，直接使用即可，代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f  </span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Edge&#123;</div><div class="line">    <span class="keyword">int</span> u,v;</div><div class="line">    <span class="keyword">int</span> w;</div><div class="line">&#125;Edge;</div><div class="line"></div><div class="line">Edge edge[<span class="number">10010</span>];</div><div class="line"><span class="keyword">int</span> dis[<span class="number">110</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Bellman_Ford</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        dis[i] = INF;</div><div class="line">    &#125;</div><div class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>( dis[edge[j].u] &gt; dis[edge[j].v] + edge[j].w)</div><div class="line">                dis[edge[j].u] = dis[edge[j].v] + edge[j].w;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>( dis[edge[j].v] &gt; dis[edge[j].u] + edge[j].w)</div><div class="line">                dis[edge[j].v] = dis[edge[j].u] + edge[j].w;</div><div class="line">                </div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m),m+n)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;edge[i].u,&amp;edge[i].v,&amp;edge[i].w);</div><div class="line">        Bellman_Ford(n,m);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[n]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="判断负权环"><a href="#判断负权环" class="headerlink" title="判断负权环"></a>判断负权环</h3><p>只要在<code>|V|-1</code>次循环结束以后再枚举边即可</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Bellman_Ford</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        dis[i] = INF;</div><div class="line">    &#125;</div><div class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>( dis[edge[j].u] &gt; dis[edge[j].v] + edge[j].w)</div><div class="line">                dis[edge[j].u] = dis[edge[j].v] + edge[j].w;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>( dis[edge[j].v] &gt; dis[edge[j].u] + edge[j].w)</div><div class="line">                dis[edge[j].v] = dis[edge[j].u] + edge[j].w;</div><div class="line">                </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</div><div class="line">            <span class="keyword">if</span>( dis[edge[j].u] &gt; dis[edge[j].v] + edge[j].w || dis[edge[j].v] &gt; dis[edge[j].u] + edge[j].w)</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5392 Infoplane in Tina Town]]></title>
      <url>http://blog.jetmuffin.com/2015/09/04/hdu-5392-Infoplane-in-Tina-Town/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5392" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5392</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个置换a，求序列1-n经过多少次a置换能够再次变回序列1-n</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题意很明显，是求置换群的循环长度。</p>
<p>根据数论中的内容，循环长度等于所有循环节长度的最小公倍数，因此只要计算所有循环节的长度即可。</p>
<p>但是题目中提到需要对最后的答案进行求模处理，然而欧几里得算法求最小公倍数无法去模，因此要用质因数分解法进行求最小公倍数<br><a id="more"></a><br>复杂度：<code>O(nlog(n))</code></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3000010</span>;</div><div class="line"><span class="keyword">const</span> LL mod = <span class="number">3221225473</span>;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> b[maxn];</div><div class="line"><span class="keyword">int</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</div><div class="line">        &#125; </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">int</span> k = i;</div><div class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span>(!vis[k])&#123;</div><div class="line">                    vis[k] = <span class="number">1</span>;</div><div class="line">                    len++;</div><div class="line">                    k = a[k];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j*j &lt;= len; j++)&#123;</div><div class="line">                    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">while</span>(len % j == <span class="number">0</span>)&#123;</div><div class="line">                        cnt++;</div><div class="line">                        len /= j;</div><div class="line">                    &#125;</div><div class="line">                    b[j] = max(b[j], cnt);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(len &gt; <span class="number">1</span>)</div><div class="line">                    b[len] = max(b[len], <span class="number">1</span>);                </div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        LL ans = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b[i]; j++)</div><div class="line">                ans = ans * i % mod;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);       </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[求多个数的最小公倍数lcm]]></title>
      <url>http://blog.jetmuffin.com/2015/09/04/multi-number-lcm/</url>
      <content type="html"><![CDATA[<h2 id="欧几里得法"><a href="#欧几里得法" class="headerlink" title="欧几里得法"></a>欧几里得法</h2><p>由公式<code>lcm(a,b) = a*b/gcd(a,b)</code>可以得到两个数的lcm，同时多个数的最小公倍数可以先求前两个数的最小公倍数，再和第三个数求最小公倍数，以此类推。<br><a id="more"></a></p>
<h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p><code>O(nlog(n))</code></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> b == <span class="number">0</span>? a : gcd(b, a%b); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x*y/gcd(x,y);</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        ret = lcm(ret, a[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="分解质因数法"><a href="#分解质因数法" class="headerlink" title="分解质因数法"></a>分解质因数法</h2><p>将每个数分解成质因数p的幂次的乘积的形式，则每个质因数在lcm中出现的次数为在每个a[i]中出现次数的最大值，统计每个质因数p出现的次数，最后做一次乘积即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lcm = p_&#123;1&#125;^&#123;b_&#123;1&#125;&#125;\times p_&#123;2&#125;^&#123;b_&#123;2&#125;&#125;\times p_&#123;3&#125;^&#123;b_&#123;3&#125;&#125;\times ... p_&#123;k&#125;^&#123;b_&#123;k&#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><p><code>O(nlog(n))</code></p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j * j &lt;= a[i]; j++)&#123;</div><div class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(a[i] % j == <span class="number">0</span>)&#123;</div><div class="line">                cnt ++;</div><div class="line">                a[i] /= j;</div><div class="line">            &#125;</div><div class="line">            b[j] = max(b[j], cnt);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a[i] &gt; <span class="number">1</span>)&#123;</div><div class="line">            b[a[i]] = max(b[a[i]], <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">10000</span>; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b[i]; j++)</div><div class="line">            ret = ret * i % mod;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[大数乘法逆元求法总结]]></title>
      <url>http://blog.jetmuffin.com/2015/09/01/multiplicative-inverse-of-large-number/</url>
      <content type="html"><![CDATA[<h2 id="大数的乘法逆元"><a href="#大数的乘法逆元" class="headerlink" title="大数的乘法逆元"></a>大数的乘法逆元</h2><a id="more"></a>
<ol>
<li>暴力法</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i;  </div><div class="line">   <span class="keyword">for</span> (i=<span class="number">1</span>;;i++) &#123; <span class="keyword">if</span> (((<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)(n)*i-an)%M==<span class="number">0</span>) <span class="keyword">break</span>; &#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>欧拉函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">inv</span><span class="params">( <span class="keyword">long</span> <span class="keyword">long</span> n )</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>( n, M - <span class="number">2</span> )%M;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>拓展欧几里得算法</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//扩展欧几里德  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">exp_gcd</span><span class="params">( LL a ,LL b,LL &amp;x,LL &amp;y)</span> </span>&#123;  </div><div class="line">     <span class="keyword">if</span>( b == <span class="number">0</span> ) &#123;  </div><div class="line">         x = <span class="number">1</span>;  </div><div class="line">         y = <span class="number">0</span>;  </div><div class="line">     &#125;  </div><div class="line">     <span class="keyword">else</span> &#123;  </div><div class="line">          exp_gcd( b,a%b,x,y );  </div><div class="line">          LL t;  </div><div class="line">          t = x;  </div><div class="line">          x = y;  </div><div class="line">          y = t - a/b*y;  </div><div class="line">     &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//逆元  </span></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">getNN</span><span class="params">(LL x)</span> </span>&#123;  </div><div class="line">        LL now , t;  </div><div class="line">        exp_gcd( x, M,now,t );  </div><div class="line">        <span class="keyword">return</span> (now%M+M)%M;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>拓展欧几里得（简洁版）</p>
<pre><code class="cpp"><span class="function">int64 <span class="title">inv</span><span class="params">(int64 x)</span> </span>{    
<span class="comment">//简洁版求逆元    </span>
<span class="keyword">if</span>(x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;    
<span class="keyword">return</span>  inv(MOD%x) * (MOD - MOD/x) % MOD;    
}
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5328 Problem Killer 2015多校联训第四场 等差数列等比数列]]></title>
      <url>http://blog.jetmuffin.com/2015/08/01/hdu-5328-Problem-Killer-2015-summer-multi-school-trainning/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5328" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5328</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个序列，求其中等差数列或者等比数列的最大长度</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>思路很明确，对于从第二个起的输入数字，计算与前一个数的差和比，然后向后比较计数。值得一提的是，这题的数据非常严格，有很多的坑。下面列举以下：</p>
<ul>
<li>坑一：输入输出一定要scanf+printf，不然铁定超时</li>
<li>坑二：等比数列比值要用浮点数，浮点数相等比较要用精度，即<code>fabs(a-b)&lt;eps</code></li>
<li>坑三：用double不知为何TLE了好多发</li>
<li>坑四：精度太低会WA，1e-6才能过</li>
<li>坑五：精度过高同样会TLE</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">float</span> eps = <span class="number">0.000001</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line"><span class="comment">//    cin&gt;&gt;t;</span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">double</span> ap,gp;</div><div class="line">    <span class="keyword">int</span> nap,ngp;</div><div class="line">    <span class="keyword">int</span> max_nap,max_ngp;</div><div class="line">    <span class="keyword">double</span> fi,se,ne;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        n--;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;fi);</div><div class="line"></div><div class="line">        nap = <span class="number">1</span>;</div><div class="line">        ap = <span class="number">-1</span>;</div><div class="line">        max_nap = <span class="number">0</span>;</div><div class="line"></div><div class="line">        ngp = <span class="number">1</span>;</div><div class="line">        gp = <span class="number">-1</span>;</div><div class="line">        max_ngp = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">bool</span> iaSecond = <span class="literal">true</span>,ibSecond = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(n--)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;ne);</div><div class="line"></div><div class="line">            <span class="comment">//ap</span></div><div class="line">            <span class="keyword">if</span>(iaSecond)&#123;</div><div class="line">                iaSecond = <span class="literal">false</span>;</div><div class="line">                ap = ne - fi;</div><div class="line">                nap = <span class="number">2</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">fabs</span>(ap - (ne - se)) &lt; eps)&#123;</div><div class="line">                    nap++;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    ap = ne-se;</div><div class="line">                    max_nap = max_nap&gt;nap?max_nap:nap;</div><div class="line">                    nap = <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//gp</span></div><div class="line">            <span class="keyword">if</span>(ibSecond)&#123;</div><div class="line">                ibSecond = <span class="literal">false</span>;</div><div class="line">                gp = ne / fi;</div><div class="line">                ngp = <span class="number">2</span>;</div><div class="line">                <span class="comment">// cout &lt;&lt; ne/fi &lt;&lt;endl;</span></div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">// cout &lt;&lt; ne/se &lt;&lt;endl;</span></div><div class="line">                <span class="comment">// cout&lt;&lt;fabs(gp - (ne / se))&lt;&lt;endl;</span></div><div class="line">                <span class="keyword">if</span>(<span class="built_in">fabs</span>(gp - (ne / se)) &lt; eps)&#123;</div><div class="line">                    ngp++; </div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    gp = ne/se;</div><div class="line">                    max_ngp = max_ngp&gt;ngp?max_ngp:ngp;</div><div class="line">                    ngp = <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            se = ne;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        max_nap = max_nap&gt;nap?max_nap:nap;</div><div class="line">        max_ngp = max_ngp&gt;ngp?max_ngp:ngp;</div><div class="line">        <span class="keyword">if</span>(max_nap &gt; max_ngp)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max_nap);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max_ngp);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5327 Olympiad 2015多校联训第四场 水题]]></title>
      <url>http://blog.jetmuffin.com/2015/08/01/hdu-5327-Olympiad-2015-summer-multi-school-trainning/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5327" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5327</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>求<code>[a,b]</code>范围内，各位都不重复的数字的个数</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>求各位不重复，逐位分解打标记即可；然后对于个数，可以直接打表<code>f[i]</code>表示<code>1-i</code>中符合条件的数的个数，然后对于每次查询，输出<code>f[b]-f[a-1]</code>即可</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">  <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</div><div class="line">  <span class="keyword">while</span>(n)&#123;</div><div class="line">    <span class="keyword">int</span> t = n%<span class="number">10</span>;</div><div class="line">    n /= <span class="number">10</span>;</div><div class="line">    a[t] ++;</div><div class="line">    <span class="keyword">if</span>(a[t] &gt;= <span class="number">2</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  f[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++)</div><div class="line">    <span class="keyword">if</span>(check(i))</div><div class="line">      f[i] = f[i<span class="number">-1</span>] + <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">      f[i] = f[i<span class="number">-1</span>];</div><div class="line">  <span class="keyword">int</span> t;</div><div class="line">  <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">  <span class="keyword">while</span>(t--)&#123;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;f[b]-f[a<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5317 RGCDQ 2015多校联训第三场 树状数组]]></title>
      <url>http://blog.jetmuffin.com/2015/08/01/hdu-5317-RGCDQ-2015-multi-school-training/</url>
      <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="cpp"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000010</span>;
<span class="keyword">int</span> c[MAXN];
<span class="keyword">int</span> n;
<span class="keyword">bool</span> test[MAXN];
<span class="keyword">int</span> tot,factor_num;
<span class="keyword">int</span> prim[<span class="number">500000</span>];

<span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span>
</span>{
    <span class="keyword">return</span> x&amp;(-x);
}

<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> val)</span>
</span>{
    <span class="keyword">while</span>(i &lt;= n)
    {
        c[i] = max(c[i],val);
        i += lowbit(i);
    }
}

<span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> i)</span>
</span>{
    <span class="keyword">int</span> s = <span class="number">0</span>;
    <span class="keyword">while</span>(i &gt; <span class="number">0</span>)
    {
        s = max(s,c[i]);
        i -= lowbit(i);
    }
    <span class="keyword">return</span> s;
}

<span class="keyword">int</span> a[MAXN];
<span class="keyword">int</span> b[MAXN];
<span class="keyword">int</span> ans[MAXN];

<span class="keyword">struct</span> Node
{
    <span class="keyword">int</span> l,r;
    <span class="keyword">int</span> index;
}node[MAXN];

<span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span>
</span>{
    <span class="keyword">return</span> a.l &gt; b.l;
}

<span class="function"><span class="keyword">void</span> <span class="title">getPrim</span><span class="params">()</span>
</span>{
    <span class="built_in">memset</span>(test,<span class="literal">true</span>,<span class="keyword">sizeof</span>(test));
    <span class="built_in">memset</span>(prim,<span class="number">0</span>,<span class="keyword">sizeof</span>(prim));
    tot = <span class="number">0</span>;
    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)
    {
        <span class="keyword">if</span> (test[i])
        {
                    prim[tot] = i;
                    tot++;
        }
        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;(j&lt;tot &amp;&amp; i*prim[j]&lt;=n);j++)
        {
            test[i*prim[j]] = <span class="literal">false</span>;
            <span class="keyword">if</span> (i%prim[j]==<span class="number">0</span>)
            <span class="keyword">break</span>;
        }
    }
}

<span class="function"><span class="keyword">void</span> <span class="title">resolve</span><span class="params">(<span class="keyword">int</span> now)</span>
</span>{
     factor_num = <span class="number">0</span>;
     <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot;i++)
     {
         <span class="keyword">if</span> (test[now])
         {
               factor_num++;
               <span class="keyword">return</span>;
         }
         <span class="keyword">if</span> (now%prim[i]==<span class="number">0</span>)
         {
               factor_num++;
         }
         <span class="keyword">while</span> (now%prim[i]==<span class="number">0</span>)
         {
               now=now/prim[i];
         }
         <span class="keyword">if</span> (prim[i]&gt;now)
            <span class="keyword">break</span>;
      }
}

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>
</span>{
    <span class="keyword">int</span> T;
    n = <span class="number">0</span>;
    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);
    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;T;i++)
    {
        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;node[i].l,&amp;node[i].r);
        node[i].index = i;
        <span class="keyword">if</span> (node[i].r&gt;n)
            n = node[i].r;
    }
    getPrim();
    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)
    {
        resolve(i);
        a[i] = factor_num;
    }
    sort(node,node+T,cmp);
    <span class="keyword">int</span> i = n;
    <span class="keyword">int</span> j = <span class="number">0</span>;
    <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));
    <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));
    <span class="keyword">while</span>(j &lt; T)
    {
        <span class="keyword">while</span>(i &gt; <span class="number">1</span> &amp;&amp; i&gt;= node[j].l)
        {
            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k*k&lt;=a[i];k++)
            {
                <span class="keyword">if</span>(a[i]%k==<span class="number">0</span>)
                {
                    <span class="keyword">if</span>(b[k]!=<span class="number">0</span>)
                    {
                        add(b[k],k);
                    }
                    b[k] = i;
                    <span class="keyword">if</span>(k!=a[i]/k)
                    {
                        <span class="keyword">if</span>(b[a[i]/k]!=<span class="number">0</span>)
                        {
                            add(b[a[i]/k],a[i]/k);
                        }
                        b[a[i]/k]=i;
                    }
                }
            }
            i--;
        }
        <span class="keyword">while</span>(j&lt;T &amp;&amp; node[j].l&gt;i)
        {
            ans[node[j].index]=Max(node[j].r);
            j++;
        }
    }
    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;T;i++)
        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);
    <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5319 Painter 2015多校联训第三场 暴力]]></title>
      <url>http://blog.jetmuffin.com/2015/08/01/hdu-5319-Painter-2015-summer-multi-school-training/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5319" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5319</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>每次R操作只能从<code>\</code>斜线方向画，B操作只能从<code>/</code>斜线方向画，给定最后状态，问最少得画几次才能达到。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>思路比较明确，只要进行逆运算，消除R，B，G就行了，消除的方法就从左下角往右上角依次进行R的消除（<code>&#39;R&#39;-&gt;&#39;.&#39;,&#39;G&#39;-&gt;&#39;B&#39;</code>)，再从左上角到右下角依次进行B的消除(<code>&#39;B&#39;-&gt;&#39;.&#39;,&#39;G&#39;-&gt;&#39;R&#39;</code>)，然后每次斜线消除若碰到相反的字母或’.’，就增加一次计数就行了</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">55</span>][<span class="number">55</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;T;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="keyword">while</span>(T--)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,<span class="built_in">map</span>[i]);</div><div class="line">        &#125;</div><div class="line">        m = <span class="built_in">strlen</span>(<span class="built_in">map</span>[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;m;l++)&#123;</div><div class="line">            <span class="keyword">int</span> i=<span class="number">0</span>,j=l;</div><div class="line">            <span class="keyword">while</span>(i&lt;n &amp;&amp; j&lt;m)&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] != <span class="string">'R'</span> &amp;&amp; <span class="built_in">map</span>[i][j] != <span class="string">'G'</span>)&#123;</div><div class="line">                    i++;</div><div class="line">                    j++;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> isR = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(i&lt;n &amp;&amp; j&lt;m)&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="string">'R'</span> || <span class="built_in">map</span>[i][j] == <span class="string">'G'</span>)&#123;</div><div class="line">                    isR = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="string">'G'</span>)</div><div class="line">                        <span class="built_in">map</span>[i][j] = <span class="string">'B'</span>;</div><div class="line">                    i++;</div><div class="line">                    j++;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(isR)&#123;</div><div class="line">                        cnt++;</div><div class="line">                    &#125;</div><div class="line">                    isR = <span class="number">0</span>;</div><div class="line">                    i++;</div><div class="line">                    j++;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(isR)&#123;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;n;l++)&#123;</div><div class="line">            <span class="keyword">int</span> i=l,j=<span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(i&lt;n &amp;&amp; j&lt;m)&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] != <span class="string">'R'</span> &amp;&amp; <span class="built_in">map</span>[i][j] != <span class="string">'G'</span>)&#123;</div><div class="line">                    i++;</div><div class="line">                    j++;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> isR = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(i&lt;n &amp;&amp; j&lt;m)&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="string">'R'</span> || <span class="built_in">map</span>[i][j] == <span class="string">'G'</span>)&#123;</div><div class="line">                    isR = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="string">'G'</span>)</div><div class="line">                        <span class="built_in">map</span>[i][j] = <span class="string">'B'</span>;</div><div class="line">                    i++;</div><div class="line">                    j++;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(isR)&#123;</div><div class="line">                        cnt++;</div><div class="line">                    &#125;</div><div class="line">                    isR = <span class="number">0</span>;</div><div class="line">                    i++;</div><div class="line">                    j++;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(isR)&#123;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;m;l++)&#123;</div><div class="line">            <span class="keyword">int</span> i=n<span class="number">-1</span>,j=l;</div><div class="line">            <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&lt;m)&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] != <span class="string">'B'</span>)&#123;</div><div class="line">                    i--;</div><div class="line">                    j++;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> isR = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&lt;m)&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="string">'B'</span>)&#123;</div><div class="line">                    isR = <span class="number">1</span>;</div><div class="line">                    i--;</div><div class="line">                    j++;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(isR)&#123;</div><div class="line">                        cnt++;</div><div class="line">                    &#125;</div><div class="line">                    isR = <span class="number">0</span>;</div><div class="line">                    i--;</div><div class="line">                    j++;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(isR)&#123;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=n<span class="number">-2</span>;l&gt;=<span class="number">0</span>;l--)&#123;</div><div class="line">            <span class="keyword">int</span> i=l,j=<span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&lt;m)&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] != <span class="string">'B'</span>)&#123;</div><div class="line">                    i--;</div><div class="line">                    j++;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> isR = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&lt;m)&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[i][j] == <span class="string">'B'</span>)&#123;</div><div class="line">                    isR = <span class="number">1</span>;</div><div class="line">                    i--;</div><div class="line">                    j++;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(isR)&#123;</div><div class="line">                        cnt++;</div><div class="line">                    &#125;</div><div class="line">                    isR = <span class="number">0</span>;</div><div class="line">                    i--;</div><div class="line">                    j++;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(isR)&#123;</div><div class="line">                cnt++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5326 Work 2015多校联训第三场 并查集]]></title>
      <url>http://blog.jetmuffin.com/2015/08/01/hdu-5326-Work-2015-summer-multi-school-training/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5326" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5326</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>题意非常像裸并查集，每个员工都有一个直系上司，给定员工的管理状态，求管理k个下级员工的员工有多数个</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本题比并查集简单，不需要用到查询部分，只要进行合并，添加一个子节点时将节点合并至父节点，更新权值即可，因为数据量小，所以直接遍历一遍求<code>a[i] = k</code>的个数就行了</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400</span></div><div class="line"><span class="keyword">int</span> pre[MAXN];</div><div class="line"><span class="keyword">int</span> a[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    pre[j] = i;</div><div class="line">    a[i]++;</div><div class="line">    <span class="keyword">while</span>(pre[i] != <span class="number">-1</span>)&#123;</div><div class="line">        a[pre[i]]++;</div><div class="line">        i = pre[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n,k;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k) != EOF)&#123;</div><div class="line">        <span class="built_in">memset</span>(pre,<span class="number">-1</span>,<span class="keyword">sizeof</span>(pre));</div><div class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</div><div class="line">        <span class="keyword">int</span> x,y;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</div><div class="line">            merge(x,y);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(a[i] == k)</div><div class="line">                cnt++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 1054 Strategic Game 贪心]]></title>
      <url>http://blog.jetmuffin.com/2015/07/27/hdu-1054-Strategic-Game-greedy/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1054" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=1054</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个二分图（给图的方式太蛋疼，输入输出好麻烦），在任意节点放置哨兵使得可以覆盖整个图。图的节点数<code>n &lt;= 1500</code></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这题看似一道很裸的二分图最小点覆盖（或者最大匹配），然而我并不会这些内容，所以一直在想其他策略。</p>
<p>一开始有一种贪心思路是，将点以度数进行排序，因为取度数较大的点上放一个哨兵的收益最大，因此需要动态维护一个堆，使得这个堆堆顶始终是度数最大的点，然后从堆顶取点，并将点对应的相邻点度数一次减1，然后将度数为0的点直接踢出堆外以减小复杂度。而这个堆可以是二叉堆，修改、删除、插入、取堆顶元素的操作复杂度均为<code>O(logn)</code>，然而我这块儿也学得不好，直接敲模板又比较麻烦。</p>
<p>所以从思路二继续尝试其他思路，发现从相反反向考虑，度数较大的点放哨兵收益最大，而度数最小的点（二分图无孤立点）即度数为1的点放哨兵度数收益最小，因此从反方向考虑这个问题的话，就是尽量不要再度数为1的点上放哨兵，而是用它的邻点取代它。因此我们维护一个队列，放置所有度数为1的点，每次取出队首<code>u</code>，并取出第一个邻点<code>v</code>，将邻点<code>v</code>的所有邻点度数更新，若出现度数为1的点则再加入队列。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="cpp"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;
<span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1600</span>;
<span class="keyword">int</span> deg[maxn];
<span class="keyword">int</span> vis[maxn];
<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[maxn];
<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{
    <span class="keyword">int</span> n;
<span class="comment">//  freopen("in.txt","r",stdin);</span>
    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)){
        <span class="built_in">memset</span>(deg,<span class="number">0</span>,<span class="keyword">sizeof</span>(deg));
        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));
        <span class="built_in">memset</span>(edge,<span class="number">0</span>,<span class="keyword">sizeof</span>(edge));

        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++){
            <span class="keyword">int</span> m,u;
            <span class="built_in">scanf</span>(<span class="string">"%d:(%d)"</span>,&amp;u,&amp;m);
            <span class="keyword">if</span>(m &gt; <span class="number">0</span>){
                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; m; j++){
                    <span class="keyword">int</span> v;
                    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);
                    edge[u].push_back(v);
                    edge[v].push_back(u);
                    deg[u]++;
                    deg[v]++;
                }
            }
        }
<span class="comment">//      for(int i = 0 ; i &lt; n; i++){</span>
<span class="comment">//          cout&lt;&lt;deg[i]&lt;&lt;" ";</span>
<span class="comment">//      }</span>
<span class="comment">//      cout&lt;&lt;endl;</span>
        <span class="keyword">if</span>(n == <span class="number">1</span>){
            <span class="built_in">puts</span>(<span class="string">"1"</span>);
            <span class="keyword">continue</span>;
        }           
        <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++){
            <span class="keyword">if</span>(deg[i] == <span class="number">1</span>)
                q.push(i);
        }
        <span class="keyword">int</span> ans = <span class="number">0</span>;
        <span class="keyword">while</span>(!q.empty()){
            <span class="keyword">int</span> u = q.front();
            q.pop();
            <span class="keyword">if</span>(vis[u])
                <span class="keyword">continue</span>;
            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edge[u].size(); i++){
                <span class="keyword">int</span> v = edge[u][i];
                <span class="keyword">if</span>(!vis[v]){
                    vis[v] = <span class="number">1</span>;
                    ans++;
                    <span class="comment">//选1个放烧饼 </span>
                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; edge[v].size(); j++){
                        <span class="keyword">int</span> w = edge[v][j];
                        deg[w] --;
                        <span class="keyword">if</span>(deg[w] == <span class="number">1</span> &amp;&amp; !vis[w]){
                            q.push(w);
                        }
                    }
                    <span class="keyword">break</span>; 
                }
            }
        }

        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;
    }

}
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构总结 - 线段树专题]]></title>
      <url>http://blog.jetmuffin.com/2015/07/26/segment-tree/</url>
      <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>线段数是一种特殊的数据结构，它是一颗<code>完全二叉树</code>，它的每个节点保存一条线段，主要用来做高效的动态查询。线段树的区间查询复杂度为<code>o(logn)</code>,更新复杂度也为<code>o(logn)</code></p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ol>
<li><p>构造 <code>void build(int l,int r, int rt)</code></p>
<p>构造线段树的过程是一个递归的过程，不停二分给定的区间<code>[l,r]</code>，若<code>l=r</code>时，则直接赋值。<code>rt</code>表示当前要构建的节点，而<code>l</code>和<code>r</code>为递归区间，每次以<code>m=(l+r)/2</code>为二分点，构建左子树和右子树，然后将左子树和右子树的信息向上更新(<code>pushup</code>)。这里及以下代码以求区间和的线段树为例。</p>
<p>void build(int l,int r, int rt){</p>
<pre><code>add[rt] = 0;
if(l == r){
    return;
}
int m = (l + r) &gt;&gt; 1;
build(lson);
build(rson);
pushup(rt);
</code></pre><p>}<br>`</p>
</li>
<li><p>查询<code>query(int L,int R,int l, int r, int rt)</code><br>线段树查询也运用了分治的思想，不断二分起始区间，直到和查询出现交集，再回溯并合并到结果中，若有延迟更新标记，则进行更新再进行回溯。查询区间<code>[L,R]</code>和二分区间<code>[l,r]</code>满足关系有以下几种（m为二分区间中点）：</p>
</li>
</ol>
<ul>
<li><code>L &lt;= l &lt;= r &lt;= R</code>，即二分区间在查询区间以内，则直接回溯<code>[l,r]</code>合并到查询结果中</li>
<li><code>L &lt;= m</code>,则继续二分左儿子，直至<code>m &lt; L</code>，并把属于区间内的结果回溯到最后的结果</li>
<li><code>m &lt;= R</code>，则继续二分右儿子，直至<code>m &gt; R</code>，并把结果回溯刀最后结果<pre>`LL query(int L,int R,int l, int r, int rt){
    if(L <= l="" &&="" r="" <="R){" return="" sum[rt];="" }="" pushdown(rt,="" -="" +="" 1);="" int="" m="(l" r)="">> 1;
    LL ret = 0;
    if(L <= m)="" ret="" +="query(L," r,="" lson);="" if(m="" <="" r)="" rson);="" return="" ret;="" }="" `<="" pre="">
</=></=></pre></li>
</ul>
<ol>
<li>更新</li>
</ol>
<ul>
<li><p>点更新<code>void updatep(int p, int add, int l, int r, int rt)</code><br>点更新的操作比较无闹，不断二分区间<code>[l,r]</code>，直至<code>l == r</code>，就相当于在区间<code>[l,r]</code>中二分查找p，然后将其加上需要加的数即可。</p>
<pre>`void updatep(int p, int add, int l, int r, int rt)  
{  
    if( l == r )  
    {  
        sum[rt] += add;  
        return ;  
    }  
    int m = ( l + r ) >> 1;  
    if(p <= m)="" updatep(p,="" add,="" lson);="" else="" rson);="" pushup(rt);="" }="" `<="" pre="">
</=></pre></li>
<li><p>区间更新<code>void update(int L,int R,int c,int l,int r,int rt)</code><br>区间更新的二分过程和区间查询的过程相同，二分出现出现区间查询中的情况一则进行更新，但是需要注意的是，为了降低区间更新复杂度，需要使用延迟标记，等到查询时再向下更新到底。因此对于情况一只进行标记更新和当前节点更新，同时做一次向下更新。对于情况二和情况三，分别更新左右子树，并向上做一次更新。<br><pre>`void update(int L,int R,int c,int l,int r,int rt){</pre></p>
<pre><code>if(L &lt;= l &amp;&amp; r &lt;=R){
    add[rt] += c;
    sum[rt] += (LL)c * (r - l + 1);
    return;
}
pushdown(rt,r - l + 1);
int m = (l+r) &gt;&gt; 1;
if(L &lt;= m) update(L, R, c, lson);
if(m &lt; R) update(L, R, c, rson);
pushup(rt);
</code></pre><p>}</p>
</li>
</ul>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="线段树普遍题型有区间求和及区间最值（RMQ），之后会慢慢在此博客进行持续更新。"><a href="#线段树普遍题型有区间求和及区间最值（RMQ），之后会慢慢在此博客进行持续更新。" class="headerlink" title="线段树普遍题型有区间求和及区间最值（RMQ），之后会慢慢在此博客进行持续更新。"></a>线段树普遍题型有区间求和及区间最值（RMQ），之后会慢慢在此博客进行持续更新。</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5311 Hidden String BestCoder 1st Anniversary B 暴搜]]></title>
      <url>http://blog.jetmuffin.com/2015/07/26/hdu-5311-Hidden-String-BestCoder-1st-Anniversary-B-search/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5311" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5311</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>指定串为”anniversary”，在输入串中找到不相交的三段，拼起来数指定串，<code>len(s)</code>范围为100</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这题卡了挺久主要是题意理解问题，一直以为这三段不需要顺序拼接，例如<code>sary1ver1anni</code>这种应该页输出<code>YES</code>，然而并不是。事实上是简单的顺序拼接，这样的话可以进行最最暴力的for循环搜索了，搜索过程可以用KMP加速以下，而KMP的起始位置是动态变化的就行了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;p, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;next)</span></span></div><div class="line">&#123;</div><div class="line">    next.resize(p.size());</div><div class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (i != p.size() - <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//这里注意，i==0的时候实际上求的是next[1]的值，以此类推</span></div><div class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || p[i] == p[j])</div><div class="line">        &#123;</div><div class="line">            ++i;</div><div class="line">            ++j;</div><div class="line">            next[i] = j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            j = next[j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; p, <span class="keyword">const</span> <span class="keyword">int</span> sIndex = <span class="number">0</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;next(p.size());</div><div class="line">    getNext(p, next);<span class="comment">//获取next数组，保存到vector中</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> i = sIndex, j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i != s.length() &amp;&amp; j != p.length())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] == p[j])</div><div class="line">        &#123;</div><div class="line">            ++i;</div><div class="line">            ++j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            j = next[j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> j == p.length() ? i - j: <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">        <span class="built_in">string</span> s0 = <span class="string">"anniversary"</span>;</div><div class="line">        <span class="keyword">int</span> len0 = s0.size();</div><div class="line">        <span class="built_in">string</span> s1, s2, s3;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len0; ++i) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len0; ++j) &#123;</div><div class="line">                s1.clear();</div><div class="line">                s2.clear();</div><div class="line">                s3.clear();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; i; ++t) &#123;</div><div class="line">                    s1 += s0[t];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = i; t &lt; j; ++t) &#123;</div><div class="line">                    s2 += s0[t];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = j; t &lt; len0; ++t) &#123;</div><div class="line">                    s3 += s0[t];</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// cout &lt;&lt; s1 &lt;&lt; " " &lt;&lt; s2 &lt;&lt; " " &lt;&lt; s3 &lt;&lt; endl;</span></div><div class="line">                <span class="keyword">int</span> idx = kmp(s, s1);</div><div class="line">                <span class="keyword">if</span> (idx == <span class="number">-1</span>) &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125; </div><div class="line"></div><div class="line">                <span class="comment">//printf("%d %d   111\n", i, j);</span></div><div class="line">                idx = kmp(s, s2, idx + s1.size());</div><div class="line">                <span class="keyword">if</span> (idx == <span class="number">-1</span>) &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//printf("222\n");</span></div><div class="line">                idx = kmp(s, s3, idx + s2.size());</div><div class="line">                <span class="keyword">if</span> (idx == <span class="number">-1</span>) &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                flag= <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5305 Friends 2015多校联训第二场 搜索]]></title>
      <url>http://blog.jetmuffin.com/2015/07/26/hdu-5305-Friends-2015-summer-multi-school-trainning-search/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5305" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5305</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>对题意的理解可以抽象成，当前已知一个<code>图</code>，图最多的点数为<code>8</code>,然后将图中的部分边进行<code>染色</code>，然后使得每个点对应的边有一半是黑边，一半是白边。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>一开始接触题的想法是，既然数据范围小，可以直接进行搜索，然而一开始的策略是对点进行搜索，每个点枚举一半的边，进行染色，然后再搜下一个点进行染色，方法非常复杂，后来就没用继续下去了。</p>
<p>然而及时看了下<code>staus</code>发现大家过得时间非常短，一般都是<code>15ms</code>或<code>30ms</code>就通过了，然后一度以为是结论题，只要统计边和点的信息就可以解出题了，结果不是。</p>
<p>看了题解后发现做法应该是按边取搜索。可以先进行一次粗略的<code>剪枝</code>，统计每个点的度数，若出现奇数直接输出0；</p>
<p>然后将每个点的<code>白边数</code>和<code>黑边数</code>分别置为度数的一半，然后枚举保存的边，分别按染白和染黑进行搜索，知道搜索出结果。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="cpp"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;

<span class="meta">#<span class="meta-keyword">define</span> LL long long</span>
<span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span>
<span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span>

<span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span>
<span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span>
<span class="meta">#<span class="meta-keyword">define</span> pi acos(-1.0)</span>
<span class="meta">#<span class="meta-keyword">define</span> inf 0x3fffffff</span>
<span class="keyword">int</span> n,m;
<span class="keyword">struct</span> edge{
    <span class="keyword">int</span> u,v;
}e[<span class="number">100</span>];
<span class="keyword">int</span> deg[<span class="number">10</span>];
<span class="keyword">int</span> c1[<span class="number">10</span>];
<span class="keyword">int</span> c2[<span class="number">10</span>];
<span class="keyword">int</span> ans = <span class="number">0</span>;
<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur)</span></span>{
<span class="comment">//    cout&lt;&lt;"cur: "&lt;&lt;cur&lt;&lt;endl;</span>
<span class="comment">//    for(int i = 1; i &lt;= n; i ++){</span>
<span class="comment">//        cout&lt;&lt;c1[i]&lt;&lt;" ";</span>
<span class="comment">//    }</span>
<span class="comment">//    cout&lt;&lt;endl;</span>
<span class="comment">//    for(int i = 1; i &lt;= n; i ++){</span>
<span class="comment">//        cout&lt;&lt;c2[i]&lt;&lt;" ";</span>
<span class="comment">//    }</span>
<span class="comment">//    cout&lt;&lt;endl;    </span>
    <span class="keyword">if</span>(cur == m+<span class="number">1</span>){
        ans++;
        <span class="keyword">return</span>;
    }
    <span class="keyword">int</span> v = e[cur].v;
    <span class="keyword">int</span> u = e[cur].u;
    <span class="keyword">if</span>(c1[u] &amp;&amp; c1[v]){
        c1[u] --;
        c1[v] --;
        dfs(cur+<span class="number">1</span>);
        c1[u] ++;
        c1[v] ++;
    }
    <span class="keyword">if</span>(c2[u] &amp;&amp; c2[v]){
        c2[u] --;
        c2[v] --;
        dfs(cur+<span class="number">1</span>);
        c2[u] ++;
        c2[v] ++;
    }
    <span class="keyword">return</span>;
}
<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>
</span>{
    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span>
        freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);
        <span class="comment">//freopen("out.txt","w",stdout);</span>
    <span class="meta">#<span class="meta-keyword">endif</span></span>

    <span class="keyword">int</span> t;
    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);
    <span class="keyword">while</span>(t--){
        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);
        ans = <span class="number">0</span>;
        <span class="built_in">memset</span>(deg,<span class="number">0</span>,<span class="keyword">sizeof</span>(deg));
        <span class="built_in">memset</span>(c1,<span class="number">0</span>,<span class="keyword">sizeof</span>(c1));
        <span class="built_in">memset</span>(c2,<span class="number">0</span>,<span class="keyword">sizeof</span>(c2));
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=m; i++){
            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;e[i].u,&amp;e[i].v);
            deg[e[i].v]++;
            deg[e[i].u]++;
        }    
        <span class="keyword">int</span> flag = <span class="number">1</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++){
            <span class="keyword">if</span>(deg[i] &amp; <span class="number">1</span>){
                flag = <span class="number">0</span>;
                <span class="keyword">break</span>;
            }
            c1[i] = deg[i]/<span class="number">2</span>;
            c2[i] = deg[i]/<span class="number">2</span>;
        }
        <span class="keyword">if</span>(!flag){
            <span class="built_in">puts</span>(<span class="string">"0"</span>);
            <span class="keyword">continue</span>;
        }
        dfs(<span class="number">1</span>);
        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);
    }
}
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5088 2015多校联训第一场 1001 因数分解]]></title>
      <url>http://blog.jetmuffin.com/2015/07/21/hdu-5088-2015-multi-school-training-1001-solution/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=5288" target="_blank" rel="external">OO’s Sequence</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>题意比较明确，f(l,r)表示[l,r]区间内，满足条件（对于任意区间内的某个数i自身外的其他数j，均不存在i%j==0）的i的个数，最后则是要求所有区间（枚举所有区间）的f函数和。<br><a id="more"></a></p>
<p>n范围为10^5，a<sub>i</sub>范围10^4</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一开始上手总觉得这复杂度怎么做很难达到n^2以内，之后经良哥指点得出一好方法。与其求区间内满足条件的i的个数，不如求i有贡献的区间。</p>
<p>对于每个i，获取其左端能整除它的最近的数的下标l,其右端能整除它的最近的数的下标r，对于区间[l+1,r-1]之内的所有包括i在内的子区间均有贡献作用，而在[1,l]和[r,n]之间因为存在数能够整除i，因此i不满足题意条件，无贡献。因此只要枚举所有的数i,累加(i - l[i] + 1) * (r[i] - i + 1)即为答案。</p>
<p>所以问题就变为如何获取l和r，最开始的想法是暴力向两端枚举，果断超时；然后考虑用素数的特点取剪枝枚举，结果超时+1,而且对于1的情况还不好判断；最后考虑分解因数，用数组维护每个数出现位置，对于当前数i，枚举其因数，并取其最接近于i的一个。</p>
<p>再交一发后发现还是会T，最后提前用vector对10^4范围的数打了一个因数表，然后进行枚举，就能过了。。ORZ</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="cpp"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span>
  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span>
  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span>
  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span>
  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span>
  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span>
  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span>
  <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;
  <span class="meta">#<span class="meta-keyword">define</span> LL long long</span>
  <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;
  <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;
  <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10001</span>;
  <span class="keyword">int</span> f[maxn];
  <span class="keyword">int</span> l[maxn];
  <span class="keyword">int</span> r[maxn];
  <span class="keyword">int</span> vis[maxn];
  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fa[<span class="number">10010</span>]; 

  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{
    <span class="keyword">int</span> n;
    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++)  
      {  
          <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)  
          {  
              <span class="keyword">if</span>(i%j==<span class="number">0</span>)  
              {  
                  fa[i].push_back(j);   
              }   
          }   
      }   
    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)){
      <span class="keyword">int</span> cnt = <span class="number">0</span>;
      <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));
      <span class="comment">// m.clear();</span>
      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n; i++){
        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,f+i);
      }
      LL ans = <span class="number">0</span>;
      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n; i++){
        l[i] = <span class="number">1</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; fa[f[i]].size();k++ ){
          <span class="keyword">int</span> j = fa[f[i]][k];
          <span class="keyword">if</span>(vis[j]){
            <span class="comment">// cout&lt;&lt;i&lt;&lt;" "&lt;&lt;f[i]&lt;&lt;" "&lt;&lt;j&lt;&lt;" "&lt;&lt;vis[j]&lt;&lt;" @"&lt;&lt;endl;</span>
            <span class="keyword">int</span> t = i - vis[j] - <span class="number">1</span>;
            <span class="keyword">if</span>(t &lt; i - l[i])
              l[i] = vis[j] + <span class="number">1</span>;
          }    
        }   
        vis[f[i]] = i;
      }
      <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));
      <span class="keyword">for</span>(<span class="keyword">int</span> i = n ; i &gt; <span class="number">0</span>; i--){
        r[i] = n;
        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; fa[f[i]].size();k++ ){
          <span class="keyword">int</span> j = fa[f[i]][k];
          <span class="keyword">if</span>(vis[j]){
              <span class="comment">// cout&lt;&lt;f[i]&lt;&lt;" "&lt;&lt;j&lt;&lt;" "&lt;&lt;"#"&lt;&lt;endl;</span>
              <span class="keyword">int</span> t = vis[j] - i - <span class="number">1</span>;
              <span class="keyword">if</span>(t &lt; r[i] - i )
                r[i] = vis[j] - <span class="number">1</span>;
          }
        }
        vis[f[i]] = i;
      }

      <span class="comment">// for(int i = 1 ; i &lt;= n; i++){</span>
      <span class="comment">//   cout&lt;&lt;l[i]&lt;&lt;" "&lt;&lt;i&lt;&lt;" "&lt;&lt;r[i]&lt;&lt;endl;</span>
      <span class="comment">// }</span>
      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n; i++){
        ans = (ans + (i - l[i]  + <span class="number">1</span>) * (r[i] - i + <span class="number">1</span>) )% mod;
      }    
      <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);
    }
  }
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基础算法训练 - 排序专题]]></title>
      <url>http://blog.jetmuffin.com/2015/07/12/basic-algorithm-training-sort/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前的算法和数据结构基础不是很扎实，从现在开始，弄懂每个算法的原理，打好基础。</p>
<h2 id="1-快速排序"><a href="#1-快速排序" class="headerlink" title="1.快速排序"></a>1.快速排序</h2><p>快排的核心思想是分治，核心算法则是对数组的划分：</p>
<p>`quicksort(A,p,r):</p>
<p>if p &lt; r</p>
<p>q = partition(A,p,r)</p>
<p>quicksort(A,p,q-1)</p>
<p>quicksort(A,q+1,r)`</p>
<p>其中划分函数partition的核心操作是：</p>
<ol>
<li>将数组最后一个元素A[r]作为比较对象</li>
<li>i = p-1 , j = p, j不停自加，判断A[r]和A[j]大小，若A[j]小于A[r]则将后游标i前进1位，并交换a[i]和a[j]</li>
<li>最后交换a[i+1]和a[r]</li>
<li>交换所得目的数将所有比a[r]小的数放在数组前面，所有比a[r]大的数放在数组后面，a[r]则在数组中间，返回数字为比a[r]小的数的个数</li>
</ol>
<p>代码：</p>
<p>`#include <iostream></iostream></p>
<p>using namespace std;</p>
<p>int a[100] = {13,19,9,5,12,8,7,4,21,2,6,11};</p>
<p>void swap(int &amp;x,int &amp;y){</p>
<p>  int t = x;</p>
<p>  x = y;</p>
<p>  y = t;</p>
<p>}</p>
<p>int partition(int p,int r){</p>
<p>  int i = p - 1;</p>
<p>  int j = p;</p>
<p>  for(;j &lt; r; j++){</p>
<pre><code>if(a[j] &lt; a[r]){

  i++;

  swap(a[i],a[j]);

}
</code></pre><p>  }</p>
<p>  swap(a[r],a[i+1]);</p>
<p>  return i+1;</p>
<p>}</p>
<p>void quicksort(int p,int r){</p>
<p>  if(p &lt; r){</p>
<pre><code>int q = partition(p,r);

quicksort(p,q-1);

quicksort(q+1,r);
</code></pre><p>  }</p>
<p>}</p>
<p>int main(){</p>
<p> quicksort(0,11); </p>
<p>  // int n = partition(0,11);</p>
<p>  for(int i = 0 ; i &lt; 12;i++)</p>
<pre><code>cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;
</code></pre><p>  cout&lt;&lt;endl;</p>
<p>}`</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 1176 免费馅饼 变型数塔 dp]]></title>
      <url>http://blog.jetmuffin.com/2015/06/27/hdu-1176-free-pie-dp/</url>
      <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题目：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1176" target="_blank" rel="external">题目链接</a></p>
<p>按题意，t时间会落下一个馅饼在x位置，而处于x’位置的gameboy只能拿到x’+1、x’、x’-1三个位置的馅饼，若将馅饼下落信息用一个数组f[t][x]，发现对于每个i，j，gameboy只能取得f[i+1][j+1]，f[i+1][j-1]，f[i+1][j]三个值，要使得最后取得的值最大，一看这是典型的数塔问题，然后就可以用dp轻松解决了</p>
<p>注意：由于数组每层在计算后不再使用，所以直接用原数组进行滚动，从下往上将结果累加即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pi acos(-1.0)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3fffffff</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200055 </span></div><div class="line"></div><div class="line"><span class="keyword">int</span> f[maxn][<span class="number">20</span>]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxx</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> max(max(a,b),c);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line"></div><div class="line">	    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line"></div><div class="line">		<span class="comment">//freopen("out.txt","w",stdout);</span></div><div class="line"></div><div class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">	<span class="keyword">int</span> n;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)&#123;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> t,x;</div><div class="line"></div><div class="line">		<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</div><div class="line"></div><div class="line">		<span class="keyword">int</span> mx = <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++)&#123;</div><div class="line"></div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x,&amp;t);</div><div class="line"></div><div class="line">			f[t][x+<span class="number">1</span>] ++;</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(t &gt; mx) mx = t; </div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = mx <span class="number">-1</span> ; i &gt; <span class="number">0</span>; i--)&#123;</div><div class="line"></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">11</span>;j++)&#123;</div><div class="line"></div><div class="line">				f[i][j] += maxx(f[i+<span class="number">1</span>][j],f[i+<span class="number">1</span>][j<span class="number">-1</span>],f[i+<span class="number">1</span>][j+<span class="number">1</span>]);</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,maxx(f[<span class="number">1</span>][<span class="number">5</span>],f[<span class="number">1</span>][<span class="number">6</span>],f[<span class="number">1</span>][<span class="number">7</span>]));</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[文本挖掘初步 - 文本特征值提取]]></title>
      <url>http://blog.jetmuffin.com/2015/06/26/text-mining-feature-extraction/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>继续上文<a href="http://www.jetmuffin.com/archives/225" target="_blank" rel="external">文本中文分词</a>的内容，本文的目的是从文本中提取出其特征向量，以便之后的分类器进行分类。</p>
<h2 id="语料库"><a href="#语料库" class="headerlink" title="语料库"></a>语料库</h2><p>本文采用Sougou实验室的语料库，下载地址为：<a href="http://www.sogou.com/labs/dl/c.html" target="_blank" rel="external">搜狗实验室文本分类资料</a>。其中预料文件大小不一，有mini版(136K)，精简版(30M)，以及完整版(108M)，这里笔者就直接上最大的语料了～:lol:</p>
<p><strong>文档结构：</strong></p>
<ul>
<li>C000007 汽车</li>
<li>C000008 财经</li>
<li>C000010  IT</li>
<li>C000013 健康</li>
<li>C000014 体育</li>
<li>C000016 旅游</li>
<li>C000020 教育</li>
<li>C000022 招聘</li>
<li>C000023 文学</li>
<li>C000024 军事</li>
</ul>
<p><strong>注意：</strong>搜狗的语料库均为GBK编码，若在Linux环境下会出现乱码影响处理，建议修改文件编码为utf-8</p>
<h2 id="词袋模型"><a href="#词袋模型" class="headerlink" title="词袋模型"></a>词袋模型</h2><p>利用中文分词工具，我们对每篇文章进行分词，去停用词后，用一个Map存储每个词的相关信息，保存形式为单词 &lt;词的文本字符串, 词的相关属性&gt;，其中单词(Term)的相关属性有(词性、tf、df、tfidf、chi等)。这样，遍历数据集目录和文件，就能去将全部的文档分词，最终就能构建词袋模型。</p>
<p>其中词(Term)的类如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.jetmuffin.TextClassifier.common;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Term</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String word;</div><div class="line">    <span class="keyword">private</span> String lexicalCategory = <span class="string">"unknown"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> freq = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> tf;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> idf;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> tfidf = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> chi = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</div><div class="line">        ....</div><div class="line">    &#125;</div><div class="line">    ......</div></pre></td></tr></table></figure>
<p>而词袋的存储Map格式如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalDocCount;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> List labels = <span class="keyword">new</span> ArrayList();</div><div class="line"><span class="comment">// Map&lt;类别, 文档数量&gt;</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Integer&gt; labelledTotalDocCountMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line"><span class="comment">// Map&lt;类别, Map&lt;文档 ,Map&lt;词, 词信息&gt;&gt;&gt;</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Map&lt;String, Map&lt;String, Term&gt;&gt;&gt; termTable = <span class="keyword">new</span> HashMap&lt;String, Map&lt;String, Map&lt;String, Term&gt;&gt;&gt;();</div><div class="line"><span class="comment">// Map&lt;词 ,Map&lt;类别, Set&lt;文档&gt;&gt;&gt;</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Map&lt;String, Set&gt;&gt; invertedTable = <span class="keyword">new</span> HashMap&lt;String, Map&lt;String, Set&gt;&gt;();</div></pre></td></tr></table></figure>
<h2 id="特征值-TFIDF-计算"><a href="#特征值-TFIDF-计算" class="headerlink" title="特征值(TFIDF)计算"></a>特征值(TFIDF)计算</h2><p>tfidf是文本分类中最常使用的特征权值，其中tf(Term Frequency)为词频，idf为(Inverse Document Frequency)，tf反映了该词在该类文本中的热门程度，而idf则反映了该词对于其他文本更好的区别能力。</p>
<p>tfidf的计算方式如下：</p>
<p><img src="http://i4.tietuku.com/218e13597b4ea3d8.png" alt="tf"><img src="http://i4.tietuku.com/c20eec142f06b175.png" alt=""><img src="http://i4.tietuku.com/a15b04b7d23c4837.png" alt=""></p>
<h2 id="卡方拟合检验"><a href="#卡方拟合检验" class="headerlink" title="卡方拟合检验"></a>卡方拟合检验</h2><p>经上一步计算出的tfidf值作为文章的特征值，但因为文章所包含的词往往非常多，特征向量的维数巨大，可能会达到上千维之多。因此需要对文章的特征向量进行降维。</p>
<p>进行降维，可以达到以下效果：</p>
<ul>
<li>避免过拟合（over fitting），提高分类准确度</li>
<li>通过降维，大大节省计算时间和空间<br>我们选择基于卡方统计量（chi-square statistic， CHI）技术来实现选择，这里根据计算公式：</li>
</ul>
<p><img src="http://i4.tietuku.com/2dce06a9ac95d718.jpg" alt=""></p>
<p>其中，公式中各个参数的含义，说明如下：</p>
<ul>
<li>N：训练数据集文档总数</li>
<li>A：在一个类别中，包含某个词的文档的数量</li>
<li>B：在一个类别中，排除该类别，其他类别包含某个词的文档的数量</li>
<li>C：在一个类别中，不包含某个词的文档的数量</li>
<li>D：在一个类别中，不包含某个词也不在该类别中的文档的数量<br>使用卡方统计量，为每个类别下的每个词都进行计算得到一个CHI值，然后对这个类别下的所有的词基于CHI值进行排序，选择出最大的topN个词；最后将多个类别下选择的多组topN个词进行合并，得到最终的特征向量。</li>
</ul>
<h2 id="向量空间模型"><a href="#向量空间模型" class="headerlink" title="向量空间模型"></a>向量空间模型</h2><p>提取文档的特征向量，目的是建立向量空间模型，每个文档 dj 可以用标引项向量来表示  (a1j,a2j,…,aMj)  <img src="http://i4.tietuku.com/e665571f39dec3cb.png" alt=""></p>
<p>利用向量空间模型，可以很容易计算出两个文档的相似度：</p>
<ul>
<li>余弦公式（计算向量夹角）</li>
<li><p>欧式距离（计算两点距离）<br>计算出了文本相似度（文本距离），则可以进行我们的下，即进行分类器的建立了。我们将在后续的文章继续研究不同的分类方法对文本的分类，包括：</p>
</li>
<li><p>KNN</p>
</li>
<li>SVM</li>
<li>Naive Bayes</li>
<li>BP Neural Network (furthermore, RBF Neural Network)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5245 Joyful ACM上海大都会邀请赛 J题 概率]]></title>
      <url>http://blog.jetmuffin.com/2015/06/06/hdu-5245-Joyful-ACM-shanghai-invitation-J-probability/</url>
      <content type="html"><![CDATA[<p><strong>题目：</strong><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5245" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5245</a></p>
<a id="more"></a>
<p><strong>题意：</strong>给定一个n行m列的方阵，每次选2个点(x1,y1),(x2,y2)，由这两个点为左上角和右下角可以确定一个矩形区域，将这个区域的格子涂黑；进行以上操作k次，问被涂黑的格子的数量的期望。</p>
<p><strong>分析：</strong>针对每个格子(i,j)计算其被涂黑的概率，再将其相加则为涂黑格子数量期望，再进行k次操作即为答案。</p>
<p>每个格子，可以分为以下几个区域：</p>
<p><img src="http://i1.tietuku.com/c190679b1de67e2e.png" alt=""></p>
<p>对于整个方阵，取一个点的种类共有m<em>n种，取两个点则有m<sup>2</sup></em>n<sup>2</sup>种。</p>
<p>按后考虑将该格子(i,j),即图中的5号格子涂黑的种类数量。根据点1(x1,y1)的位置，可以确定点2(x2,y2)的位置分布，即可确定种类数。</p>
<ul>
<li>若(x1,y1)在区域1,则(x2,y2)必然在区域5,6,7,8，种数(i-1)<em>(j-1)</em>(n-i+1)*(m-j+1);</li>
<li>若(x1,y1)在区域2,则(x2,y2)必然在区域4,5,6,7,8,9，种数(i-1)<em>1</em>m*(n-i+1);</li>
<li>若(x1,y1)在区域3,则(x2,y2)必然在区域4,5,7,8，种数(i-1)<em>(m-j)</em>(n-i+1)*j;</li>
<li>若(x1,y1)在区域4,则(x2,y2)必然在区域2,3,5,6,8,9，种数1<em>(j-1)</em>n*(m-j+1);</li>
<li>若(x1,y1)在区域5,则(x2,y2)必然在区域1,2,3,4,5,6,7,8,9，种数m<em>n</em>1*1;</li>
<li>若(x1,y1)在区域6,则(x2,y2)必然在区域1,2,4,5,7,8，种数(m-j)<em>1</em>n*j;</li>
<li>若(x1,y1)在区域7,则(x2,y2)必然在区域2,3,5,6，种数i<em>(m-j+1)</em>(n-i)*(j-1);</li>
<li>若(x1,y1)在区域8,则(x2,y2)必然在区域1,2,3,4,5,6，种数(n-i)<em>1</em>m*i;</li>
<li>若(x1,y1)在区域9,则(x2,y2)必然在区域1,2,4,5，种数(n-i)<em>(m-j)</em>i*j;</li>
</ul>
<p>最后将种数相加再除以总数即为概率，对每个点的概率相加则为总该率，然后做k次就是答案了。</p>
<p><strong>代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t;</div><div class="line"></div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line"></div><div class="line">        cnt++;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> k;</div><div class="line"></div><div class="line">        <span class="keyword">double</span> n,m;</div><div class="line"></div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</div><div class="line"></div><div class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++ )</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</div><div class="line"></div><div class="line">                <span class="keyword">double</span> tot = <span class="number">0.0</span>;</div><div class="line"></div><div class="line">                tot += (i<span class="number">-1</span>)*(j<span class="number">-1</span>)*(n-i+<span class="number">1</span>)*(m-j+<span class="number">1</span>);</div><div class="line"></div><div class="line">                tot += (i<span class="number">-1</span>)*<span class="number">1</span>*m*(n-i+<span class="number">1</span>);</div><div class="line"></div><div class="line">                tot += (i<span class="number">-1</span>)*(m-j)*(n-i+<span class="number">1</span>)*j;</div><div class="line"></div><div class="line">                tot += <span class="number">1</span>*(j<span class="number">-1</span>)*n*(m-j+<span class="number">1</span>);</div><div class="line"></div><div class="line">                tot += m*n*<span class="number">1</span>*<span class="number">1</span>;</div><div class="line"></div><div class="line">                tot += (m-j)*<span class="number">1</span>*n*j;</div><div class="line"></div><div class="line">                tot += i*(m-j+<span class="number">1</span>)*(n-i)*(j<span class="number">-1</span>);</div><div class="line"></div><div class="line">                tot += (n-i)*<span class="number">1</span>*m*i;</div><div class="line"></div><div class="line">                tot += (n-i)*(m-j)*i*j;</div><div class="line"></div><div class="line">                tot = tot /n/n/m/m; </div><div class="line"></div><div class="line">                ans += <span class="number">1</span> - <span class="built_in">pow</span>(<span class="number">1</span>-tot,k);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,cnt,<span class="keyword">int</span>(ans+<span class="number">0.5</span>));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5241 Friends ACM上海大都会邀请赛 F题]]></title>
      <url>http://blog.jetmuffin.com/2015/06/06/hdu-5241-Friends-ACM-shanghai-invitation-F/</url>
      <content type="html"><![CDATA[<p><strong>题目：</strong><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5241" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5241</a></p>
<a id="more"></a>
<p><strong>题意：</strong>Mike会n种语言，而从Alice到Irene会的语言满足一系列的子集关系，问题为给定第一个n，所有的情况总数数量。</p>
<p><strong>分析：</strong>由于各种语言互相独立，所以最后的答案肯定是一个数的n次方，即k<sup>n</sup>，而对于这个k可以用暴力的方法解出来，即当n=1的时候的数量，以下为解法：</p>
<p>各个小伙伴的语言关系如下图，其中有向箭头表示语言”≥”。</p>
<p><img src="http://i1.tietuku.com/e3384532b1bd57d2.png" alt=""></p>
<p>可以从图中得出的答案是，以a,b,c,d,e,f,g,h,i表示Alice, Bob, Carol, Dave, Eve, Frank, Gloria, Henry and Irene所会语言种数（0或者1）的可能性数量，则满足以下条件：</p>
<pre style="padding-left: 30px;">a = n
d = n
e = min(a,d)
g = d
b = min(a,g)
c = min(b,e)
f = min(g,e)
h = g
i = h
</pre>

<p>再根据以上条件暴力解的k的大小为32：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> n = <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">0</span>; a &lt;= n;a++)</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">0</span>; d &lt;=n ; d++)</div><div class="line"></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> e = <span class="number">0</span>;e &lt;= min(a,d);e++)</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> g = <span class="number">0</span>; g&lt;= d;g++)</div><div class="line"></div><div class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> b = <span class="number">0</span>; b&lt;= min(a,g);b++)</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c&lt;= min(b,e);c++)</div><div class="line"></div><div class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> f = <span class="number">0</span>; f&lt;= min(g,e);f++)</div><div class="line"></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> h = <span class="number">0</span> ; h&lt;=g;h++)</div><div class="line"></div><div class="line">                  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= h ;i++)</div><div class="line"></div><div class="line">                    ans++;</div><div class="line"></div><div class="line">  <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">&#125;`</div><div class="line"></div><div class="line">然后直接上java的大数就行了！</div><div class="line"></div><div class="line">`<span class="keyword">import</span> java.math.BigInteger;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Main &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> t = sc.nextInt();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(t &gt; <span class="number">0</span>)&#123;</div><div class="line"></div><div class="line">            t--;</div><div class="line"></div><div class="line">            cnt++;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> n = sc.nextInt();</div><div class="line"></div><div class="line">            BigInteger base = BigInteger.valueOf(<span class="number">32</span>);</div><div class="line"></div><div class="line">            BigInteger ans = BigInteger.valueOf(<span class="number">1</span>);</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++)&#123;</div><div class="line"></div><div class="line">                ans = ans.multiply(base);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"Case #"</span> + cnt +<span class="string">": "</span>+ans);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[文本挖掘初步 - 文本中文分词]]></title>
      <url>http://blog.jetmuffin.com/2015/06/05/text-mining-chinese-segments/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>中文分词(Chinese Word Segmentation)指的是将一个汉字序列切分成一个一个单独的词。</p>
<p>如同编译原理中的词法分析的重要性,中文分词是文本挖掘的基础,需要通过机器自动将输入的句子切分成一个个的词语,才能进行更多的处理.</p>
<p>中文分词和英文分词最大的区别在于,英文单词之间是以空格作为自然分界符的，而汉语是以字为基本的书写单位，词语之间没有明显的区分标记,因此中文分词的难度比英文分词大了很多.</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>分词算法可分为三大类：基于字典、词库匹配的分词方法,基于词频度统计的分词方法和基于知识理解的分词方法。</p>
<p>1<strong>. 基于字典,词库(字符串匹配)的分词方法</strong></p>
<p>这种方法按照一定策略将待分析的汉字串与一个“充分大的”机器词典中的词条进行匹配，若在词典中找到某个字符串，则匹配成功。识别出一个词，根据扫描方向的不同分为正向匹配和逆向匹配。采用该方法的分词算法主要有:</p>
<ul>
<li>正向最大匹配法（由左到右的方向）</li>
<li>逆向最大匹配法（由右到左的方向）</li>
<li>最少切分（使每一句中切出的词数最小）</li>
</ul>
<p>2.<strong>基于词频度统计的分词方法</strong></p>
<p>这是一种全切分方法。它不依靠词典,而是将文章中任意两个字同时出现的频率进行统计,次数越高的就可能是一个词。它首先切分出与词表匹配的所有可能的词,运用统计语言模型和决策算法决定最优的切分结果。它的优点在于可以发现所有的切分歧义并且容易将新词提取出来。</p>
<p>3.<strong>基于知识理解的分词</strong></p>
<p>该方法主要基于句法、语法分析，并结合语义分析，通过对上下文内容所提供信息的分析对词进行定界，它通常包括三个部分：分词子系统、句法语义子系统、总控部分。在总控部分的协调下，分词子系统可以获得有关词、句子等的句法和语义信息来对分词歧义进行判断。这类方法试图让机器具有人类的理解能力，需要使用大量的语言知识和信息。由于汉语语言知识的笼统、复杂性，难以将各种语言信息组织成机器可直接读取的形式。因此目前基于知识的分词系统还处在试验阶段。</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>在中文分词领域,有很多已经非常成熟的分词工具可以被使用,以下对各工具的算法和效率(根据网上情报)进行总结.</p>
<p>1.<strong>ICTCLAS(NLPIR)</strong></p>
<p><a href="http://ictclas.nlpir.org/" target="_blank" rel="external">http://ictclas.nlpir.org/</a></p>
<p>ICTCLAS是中国科学院计算技术研究所在多年研究基础上，耗时一年研制出了基于多层隐马模型(HMM)的汉语词法分析系统 ，功能有：中文分词；词性标注；自定义词典等。分词正确率高,分词速度快.源代码数以C++编写的,并提供JAVA接口.</p>
<p>速度: 单机 (996KB/s)</p>
<p>2.<strong>Stanford Word Segmenter || CRF++</strong></p>
<p><a href="http://nlp.stanford.edu/software/segmenter.shtml" target="_blank" rel="external">http://nlp.stanford.edu/software/segmenter.shtml</a></p>
<p>这两个中文分词工具都是基于条件随机场CRF(<span lang="EN-US">C</span><span lang="EN-US">onditional<span class="Apple-converted-space"> </span></span><span lang="EN-US">R</span><span lang="EN-US">andom</span><span lang="EN-US"><span class="Apple-converted-space"> </span>F</span><span lang="EN-US">ield)模型实现的,<span lang="ZH-CN">其基本思路是对汉字进行标注即由字构词</span><span lang="EN-US">(</span><span lang="ZH-CN">组词</span><span lang="EN-US">)</span><span lang="ZH-CN">，不仅考虑了文字词语出现的频率信息，同时考虑上下文语境，具备较好的学习能力，因此其对歧义词和未登录词的识别都具有良好的效果；其不足之处是训练周期较长，运营时计算量较大.</span></span></p>
<p>速度: (暂未获得)</p>
<p>3.<strong>Mmseg </strong></p>
<p><a href="http://technology.chtsai.org/mmseg/" target="_blank" rel="external">http://technology.chtsai.org/mmseg/</a></p>
<p>Mmseg是典型的基于字典的中文分词工具,其主要实现原理是基于最大匹配算法.它提供Simple和Complex两种最大匹配算法,即简单的和复杂的.简单的最大匹配算法从字符串开头开始,获取最长的匹配串;而复杂的最大匹配算法则针对存在歧义的单词,向前再看两个单词再进行判断.</p>
<p>Mmseg支持在lucene和solr中使用,在该二者中配置Mmseg,即可对中文文本进行分词索引.这也是Mmseg被使用广泛的一个原因.同时因为其实现原理简单,效果也很不错,且提供Java支持(Mmseg4j),也是很受欢迎的一款分词工具.</p>
<p>速度: complex 60W字/s (1200 KB/s)  ；simple 100W字/s (1900 KB/s)</p>
<p>4.<strong>IKAnalyzer</strong></p>
<p><a href="http://code.google.com/p/ik-analyzer/downloads/list" target="_blank" rel="external">http://code.google.com/p/ik-analyzer/downloads/list</a></p>
<p>IKAnalyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包。采用了特有的”正向迭代最细粒度切分算法”(我还没取研究这个算法),支持细粒度和智能分词两种切分模式.同样,IKAnalyzer也提供了对Solr和Lucene的支持.</p>
<p>速度: IK2012 160W字/s (3000KB/s)</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>根据分词的成功率,速率以及使用接口简单,在之后的所有后续挖掘过程中将采用ICTCLAS2015作为分词器,所以需要对其进行简单的封装.</p>
<p>JNA实现接口CLibrary:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.jetmuffin.analyzer;</div><div class="line"><span class="keyword">import</span> com.sun.jna.Library;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CLibrary</span> <span class="keyword">extends</span> <span class="title">Library</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NLPIR_Init</span><span class="params">(String sDataPath, <span class="keyword">int</span> encoding, String sLicenceCode)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">NLPIR_ParagraphProcess</span><span class="params">(String sSrc, <span class="keyword">int</span> bPOSTagged)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">NLPIR_GetKeyWords</span><span class="params">(String sLine, <span class="keyword">int</span> nMaxKeyLimit, <span class="keyword">boolean</span> bWeightOut)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">NLPIR_GetFileKeyWords</span><span class="params">(String sLine, <span class="keyword">int</span> nMaxKeyLimit, <span class="keyword">boolean</span> bWeightOut)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NLPIR_AddUserWord</span><span class="params">(String sWord)</span></span>;<span class="comment">//add by qp 2008.11.10</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NLPIR_DelUsrWord</span><span class="params">(String sWord)</span></span>;<span class="comment">//add by qp 2008.11.10</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NLPIR_ImportUserDict</span><span class="params">(String sWord,<span class="keyword">boolean</span> bOverWrite)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">NLPIR_WordFreqStat</span><span class="params">(String sWord)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">NLPIR_GetLastErrorMsg</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">NLPIR_Exit</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>接口实现类Nlpir:
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.jetmuffin.analyzer;</div><div class="line"><span class="keyword">import</span> com.sun.jna.Native;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NLPIR</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CLibrary Instance;</div><div class="line">    <span class="keyword">private</span> String systemCharset;</div><div class="line">    <span class="keyword">private</span> String systemFolder;</div><div class="line">    <span class="keyword">int</span> charsetType;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NLPIR</span><span class="params">()</span></span>&#123;</div><div class="line">        systemFolder = <span class="string">"/home/jeff/src/ICTCLAS2015"</span>;  <span class="comment">//ICTCLAS的目录,包括字典文件等</span></div><div class="line">        systemCharset = <span class="string">"UTF-8"</span>;  <span class="comment">//默认字符集</span></div><div class="line">        charsetType = <span class="number">1</span>;</div><div class="line"></div><div class="line">        Instance = (CLibrary) Native.loadLibrary(</div><div class="line">                <span class="string">"/home/jeff/src/ICTCLAS2015/lib/linux32/libNLPIR.so"</span>, CLibrary.class);  <span class="comment">//ICTCLAS的so文件地址</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CLibrary <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Instance;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setInstance</span><span class="params">(CLibrary instance)</span> </span>&#123;</div><div class="line">            Instance = instance;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getSystemCharset</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> systemCharset;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSystemCharset</span><span class="params">(String systemCharset)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.systemCharset = systemCharset;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getSystemFolder</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> systemFolder;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSystemFolder</span><span class="params">(String systemFolder)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.systemFolder = systemFolder;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCharsetType</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> charsetType;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharsetType</span><span class="params">(<span class="keyword">int</span> charsetType)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.charsetType = charsetType;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.jetmuffin.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> com.jetmuffin.NLPIR;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNlpir</span> </span>&#123;</div><div class="line">        <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">        NLPIR nlpir = <span class="keyword">new</span> NLPIR();</div><div class="line">        nlpir.Instance.NLPIR_Init(nlpir.getSystemFolder(),nlpir.getCharsetType() ,nlpir.getSystemCharset());</div><div class="line">        String nativeBytes = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        String sInput = <span class="string">"什么是机器学习"</span>;</div><div class="line">        nlpir.Instance.NLPIR_ImportUserDict(<span class="string">"/home/jeff/workspace/data/dict"</span>, <span class="keyword">false</span>);  <span class="comment">//加载用户自定义词典</span></div><div class="line">        nativeBytes = nlpir.Instance.NLPIR_ParagraphProcess(sInput, <span class="number">0</span>); <span class="comment">//分词</span></div><div class="line">        String[] words = nativeBytes.split(<span class="string">" "</span>);  <span class="comment">//分词结果以空格进行分割</span></div><div class="line">        System.out.println(words.length); <span class="comment">//输出分词词数</span></div><div class="line">        System.out.println(nativeBytes);  <span class="comment">//输出分词结果</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">3    </div><div class="line">什么 是 机器学习</div></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>进行分类器的封装以后,可以继续进行之后的文本挖掘内容.以上均为本人拙见,且本人为NLP菜鸟,望大牛予以指正! :)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[文本挖掘初步 - 对自由文本进行信息抽取]]></title>
      <url>http://blog.jetmuffin.com/2015/05/10/text-mining-extract-information-from-text/</url>
      <content type="html"><![CDATA[<h2 id="文本挖掘"><a href="#文本挖掘" class="headerlink" title="文本挖掘"></a>文本挖掘</h2><p>最近的一个比赛，做的主体部分是文本挖掘，核心内容是从一堆自由文本（大多是爬虫爬取内容）中提取出可用的数据。因为刚刚接触这个领域，所以很多内容是边学边做，顺便做做记录。</p>
<p>文本挖掘需要用到的内容有机器学习（Machine Learning)，数据挖掘(Data Mining)，自然语言处理(Natural Language Process)等多个领域的内容，因此在之后的文章依次记录相应学习过程。</p>
<a id="more"></a>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>准备采取的过程为以下步骤：</p>
<ul>
<li><a href="http://www.jetmuffin.com/archives/225" target="_blank" rel="external">文本中文分词</a></li>
<li><a href="http://www.jetmuffin.com/archives/272" target="_blank" rel="external">文本特征值提取</a></li>
<li><a href="#">利用机器学习方法进行文本分类</a></li>
<li><a href="#">分类信息挖掘</a></li>
</ul>
<h2 id="感激"><a href="#感激" class="headerlink" title="感激"></a>感激</h2><p>整个学习和开发过程中查阅了很多资料，以下几个博主的文章对我有很大帮助，对此表示感谢：</p>
<ul>
<li><a href="http://shiyanjun.cn/archives/548.html" target="_blank" rel="external">使用libsvm实现文本分类 - Yanjun</a></li>
<li><a href="http://www.cnblogs.com/finallyliuyu/archive/2010/09/02/1816293.html" target="_blank" rel="external">K-means文本聚类系列 - finallyliuyu</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[编程之美初赛第三题 质数相关 小数据解法]]></title>
      <url>http://blog.jetmuffin.com/2015/04/25/beautiful-of-coding-3/</url>
      <content type="html"><![CDATA[<p><div class="limit"><div>时间限制:2000ms</div><div>单点时限:1000ms</div><div>内存限制:256MB</div></div><div></div></p>
<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>两个数a和 b (a&lt;b)被称为质数相关，是指a × p = b，这里p是一个质数。一个集合S被称为质数相关，是指S中存在两个质数相关的数，否则称S为质数无关。如{2, 8, 17}质数无关，但{2, 8, 16}, {3, 6}质数相关。现在给定一个集合S，问S的所有质数无关子集中，最大的子集的大小。</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><a id="more"></a>
<p>第一行为一个数T，为数据组数。之后每组数据包含两行。</p>
<p>第一行为N，为集合S的大小。第二行为N个整数，表示集合内的数。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>对于每组数据输出一行，形如”Case #X: Y”。X为数据编号，从1开始，Y为最大的子集的大小。</p>
<h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1 ≤ T ≤ 20</p>
<p>集合S内的数两两不同且范围在1到500000之间。</p>
<p>小数据</p>
<p>1 ≤ N ≤ 15</p>
<p>大数据</p>
<p>1 ≤ N ≤ 1000</p>
<p><dl class="des"><dt>样例输入</dt><dd><pre>3<br>5<br>2 4 8 16 32<br>5<br>2 3 4 6 9<br>3<br>1 2 3</pre></dd></dl></p>
<p>小数据解法：</p>
<p>模拟选择每个组合，判断其中每两个子元素做商是否为素数，小数据不会超时，大数据要通过图来做，之后提供。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500001</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> f[<span class="number">15</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator itj;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> prime[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">IsPrime</span><span class="params">()</span></span>&#123;</div><div class="line">    prime[<span class="number">0</span>]=prime[<span class="number">1</span>]=<span class="number">0</span>;prime[<span class="number">2</span>]=<span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;maxn;i++)</div><div class="line">        prime[i]=i%<span class="number">2</span>==<span class="number">0</span>?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> t=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(maxn*<span class="number">1.0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=t;i++)</div><div class="line">            <span class="keyword">if</span>(prime[i])</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i*i;j&lt;maxn;j+=<span class="number">2</span>*i)<span class="comment">//优化</span></div><div class="line">                    prime[j]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(it = v.begin();it!=v.end();it++)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(v.size() == <span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(it = v.begin();it!=v.end()<span class="number">-1</span>;it++)&#123;</div><div class="line">        <span class="keyword">for</span>(itj = v.begin()+<span class="number">1</span>;itj!=v.end();itj++)&#123;</div><div class="line">            <span class="keyword">int</span> x = *it;</div><div class="line">            <span class="keyword">int</span> y = *itj;</div><div class="line">            <span class="comment">//cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl;</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span>(y%x==<span class="number">0</span>)&#123;</div><div class="line">            <span class="comment">//     cout&lt;&lt;"sub:"&lt;&lt;y/x&lt;&lt;endl;</span></div><div class="line">                <span class="keyword">if</span>(prime[y/x])</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="keyword">int</span>)<span class="number">1</span>&lt;&lt;count; i++)&#123;</div><div class="line">        v.clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; count; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(i &amp; (<span class="number">1</span>&lt;&lt;j))&#123;</div><div class="line">                <span class="comment">//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;endl;</span></div><div class="line">                v.push_back(f[j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//output();</span></div><div class="line">        <span class="keyword">if</span>(check())&#123;</div><div class="line">            <span class="keyword">if</span>(v.size() &gt; ans)</div><div class="line">                ans = v.size();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;T;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cnt = <span class="number">0</span> ; cnt &lt; T; cnt ++)&#123;</div><div class="line">        ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;f[i];</div><div class="line">        sort(f,f+n);</div><div class="line">        IsPrime();</div><div class="line">        solve(n);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;cnt+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[蓝桥杯算法训练-逆序对 解题报告]]></title>
      <url>http://blog.jetmuffin.com/2015/03/28/blue-bridge-cup-training-reverse-couples/</url>
      <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>大体意思是，根据输入构建一棵二叉树，其中以其叶子节点从左到右为一数列，为了使得该数列的逆序对最少，可以对每个非叶子节点进行调换左右字数操作，求最少的逆序对。</p>
<h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>题目标明用平衡二叉树进行处理，可以选择用Splay树或者AVL树进行处理，考虑到之前求逆序对的题目原型一般用归并排序进行，所以这里我打算用<strong>归并排序</strong>加<strong>动态规划</strong>处理。</p>
<a id="more"></a>
<p>由于题目中特殊的树结构，所以将传统的归并排序的二分改为递归到叶子节点，再合并到根节点。根据其<strong>最优子结构</strong>，要使得整体逆序对最少，也就是每个子树的逆序对最少，以此类推。可以很容易得到递推公式：</p>
<blockquote>
<p>f(root) = f(left) +　ｆ(right) + min(merge(left , right) , merge(right , left));</p>
</blockquote>
<p>合并时的思路为，a[i]和b[j]分别表示两个序列的相应元素，若a[i] &gt; b[j]，则a[i]之后的数均大于b[j]，因为该序列为从小到大排序的，这样就可以统计逆序对了。</p>
<p>同理可以统计顺序对，顺序对则对应了调换子树后的逆序对，比较顺序对和逆序对的大小，然后求f(root)，同时合并序列至根节点。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pi acos(-1.0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3fffffff</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">	LL min;</div><div class="line">&#125;; </div><div class="line"></div><div class="line">LL ans;</div><div class="line"></div><div class="line">LL maxx=<span class="number">0</span>;</div><div class="line"></div><div class="line">LL maxxx = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function">node <span class="title">merge</span><span class="params">(node l,node r)</span></span>;</div><div class="line"></div><div class="line"><span class="function">node <span class="title">build_tree</span><span class="params">(LL i)</span></span>&#123;</div><div class="line"><span class="comment">//	printf("node %d:\n",i);</span></div><div class="line">	<span class="keyword">int</span> x;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);	</div><div class="line">	node t;</div><div class="line">	t.min = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(x != <span class="number">0</span>)</div><div class="line">		t.v.push_back(x);</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">		node l = build_tree(i+<span class="number">1</span>);</div><div class="line">		node r = build_tree(i+<span class="number">1</span>);</div><div class="line">		t = merge(l,r);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(i == <span class="number">1</span>)</div><div class="line">		ans = t.min;	</div><div class="line">	<span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">node <span class="title">merge</span><span class="params">(node l,node r)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(l.v.size() &gt; maxx)</div><div class="line">		maxx = l.v.size();</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(r.v.size() &gt; maxx)</div><div class="line">		maxx = r.v.size();</div><div class="line"></div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span> ,j = <span class="number">0</span>;</div><div class="line">	LL l_cnt = <span class="number">0</span>,r_cnt = <span class="number">0</span>;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;tmp;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(i &lt; l.v.size() &amp;&amp; j &lt; r.v.size())&#123;</div><div class="line">		<span class="keyword">if</span>(l.v[i] == r.v[j])&#123;</div><div class="line">			tmp.push_back(l.v[i]);</div><div class="line">			tmp.push_back(r.v[j]);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(l.v[i] &lt; r.v[j])&#123;</div><div class="line">			r_cnt += r.v.size() - j;</div><div class="line">			tmp.push_back(l.v[i++]); </div><div class="line">		&#125; <span class="keyword">else</span>&#123;</div><div class="line">			l_cnt += l.v.size() - i;</div><div class="line">			tmp.push_back(r.v[j++]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(i &lt; l.v.size())</div><div class="line">		tmp.push_back(l.v[i++]);</div><div class="line">	<span class="keyword">while</span>(j &lt; r.v.size())</div><div class="line">		tmp.push_back(r.v[j++]);</div><div class="line">	node root;</div><div class="line">	root.min = l.min + r.min + min(l_cnt,r_cnt);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; tmp.size();k++)&#123;</div><div class="line"><span class="comment">//		printf("%d ",tmp[k]);</span></div><div class="line">		root.v.push_back(tmp[k]);</div><div class="line">	&#125;</div><div class="line"><span class="comment">//	printf("\n");</span></div><div class="line">	<span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">	    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);<span class="comment">//freopen("output.txt","w",stdout);</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	LL n;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	build_tree(<span class="number">1</span>);</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>最后提交OJ的时候发现25组只通过了12组，48分，也就是说该方法还是有问题，理论上复杂度为<code>o(nlogn)</code>，但是数据过强，所以待我习得Splay大法后写一份Splay的解法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5179 BestCoder #31 1002 beautiful number 解题报告]]></title>
      <url>http://blog.jetmuffin.com/2015/03/07/hdu-5179-BestCoder-31-1002-beautiful-number-solution/</url>
      <content type="html"><![CDATA[<p>题目要求找出1e9范围内的满足条件的数，且对于每次查询要给出范围内的数的个数，复杂度条件非常苛刻。</p>
<p>但是该类数本身数量就不多，于是想到离线算出所有数，然后二分答案。</p>
<p>离线求这些数的方法可以DFS或者直接暴力，为了方便我就直接暴力了，半分钟左右出答案。</p>
<a id="more"></a>
<p>离线代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> x[<span class="number">9</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> len;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">while</span>(n&gt;<span class="number">0</span>)</div><div class="line"></div><div class="line">  &#123;</div><div class="line"></div><div class="line">    x[i++] = n % <span class="number">10</span>;</div><div class="line"></div><div class="line">    n /= <span class="number">10</span>;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  len = i;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len - <span class="number">1</span>; i++)</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(x[i] &gt; x[i+<span class="number">1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len ; i++)</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(x[i] == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len - <span class="number">1</span>; i++)</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++)</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(x[j] % x[i] != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">  freopen(<span class="string">"out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line"></div><div class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">999999999</span>; i++)</div><div class="line"></div><div class="line">  &#123;</div><div class="line"></div><div class="line">    work(i);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(check())</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">      cnt++;</div><div class="line"></div><div class="line">      <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">","</span>;    </div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">  <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">&#125;`</div><div class="line"></div><div class="line">求出这些数大概有<span class="number">1299</span>个，然后对于每次查询，可以直接遍历范围在L～R之间的个数，也可以二分L，二分R，然后序号相减，代码很长，前方高能预警。</div><div class="line"></div><div class="line">`<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">31</span>,<span class="number">33</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">44</span>,<span class="number">51</span>,<span class="number">55</span>,<span class="number">61</span>,<span class="number">62</span>,<span class="number">63</span>,<span class="number">66</span>,<span class="number">71</span>,<span class="number">77</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">84</span>,<span class="number">88</span>,<span class="number">91</span>,<span class="number">93</span>,<span class="number">99</span>,<span class="number">111</span>,<span class="number">211</span>,<span class="number">221</span>,<span class="number">222</span>,<span class="number">311</span>,<span class="number">331</span>,<span class="number">333</span>,<span class="number">411</span>,<span class="number">421</span>,<span class="number">422</span>,<span class="number">441</span>,<span class="number">442</span>,<span class="number">444</span>,<span class="number">511</span>,<span class="number">551</span>,<span class="number">555</span>,<span class="number">611</span>,<span class="number">621</span>,<span class="number">622</span>,<span class="number">631</span>,<span class="number">633</span>,<span class="number">661</span>,<span class="number">662</span>,<span class="number">663</span>,<span class="number">666</span>,<span class="number">711</span>,<span class="number">771</span>,<span class="number">777</span>,<span class="number">811</span>,<span class="number">821</span>,<span class="number">822</span>,<span class="number">841</span>,<span class="number">842</span>,<span class="number">844</span>,<span class="number">881</span>,<span class="number">882</span>,<span class="number">884</span>,<span class="number">888</span>,<span class="number">911</span>,<span class="number">931</span>,<span class="number">933</span>,<span class="number">991</span>,<span class="number">993</span>,<span class="number">999</span>,<span class="number">1111</span>,<span class="number">2111</span>,<span class="number">2211</span>,<span class="number">2221</span>,<span class="number">2222</span>,<span class="number">3111</span>,<span class="number">3311</span>,<span class="number">3331</span>,<span class="number">3333</span>,<span class="number">4111</span>,<span class="number">4211</span>,<span class="number">4221</span>,<span class="number">4222</span>,<span class="number">4411</span>,<span class="number">4421</span>,<span class="number">4422</span>,<span class="number">4441</span>,<span class="number">4442</span>,<span class="number">4444</span>,<span class="number">5111</span>,<span class="number">5511</span>,<span class="number">5551</span>,<span class="number">5555</span>,<span class="number">6111</span>,<span class="number">6211</span>,<span class="number">6221</span>,<span class="number">6222</span>,<span class="number">6311</span>,<span class="number">6331</span>,<span class="number">6333</span>,<span class="number">6611</span>,<span class="number">6621</span>,<span class="number">6622</span>,<span class="number">6631</span>,<span class="number">6633</span>,<span class="number">6661</span>,<span class="number">6662</span>,<span class="number">6663</span>,<span class="number">6666</span>,<span class="number">7111</span>,<span class="number">7711</span>,<span class="number">7771</span>,<span class="number">7777</span>,<span class="number">8111</span>,<span class="number">8211</span>,<span class="number">8221</span>,<span class="number">8222</span>,<span class="number">8411</span>,<span class="number">8421</span>,<span class="number">8422</span>,<span class="number">8441</span>,<span class="number">8442</span>,<span class="number">8444</span>,<span class="number">8811</span>,<span class="number">8821</span>,<span class="number">8822</span>,<span class="number">8841</span>,<span class="number">8842</span>,<span class="number">8844</span>,<span class="number">8881</span>,<span class="number">8882</span>,<span class="number">8884</span>,<span class="number">8888</span>,<span class="number">9111</span>,<span class="number">9311</span>,<span class="number">9331</span>,<span class="number">9333</span>,<span class="number">9911</span>,<span class="number">9931</span>,<span class="number">9933</span>,<span class="number">9991</span>,<span class="number">9993</span>,<span class="number">9999</span>,<span class="number">11111</span>,<span class="number">21111</span>,<span class="number">22111</span>,<span class="number">22211</span>,<span class="number">22221</span>,<span class="number">22222</span>,<span class="number">31111</span>,<span class="number">33111</span>,<span class="number">33311</span>,<span class="number">33331</span>,<span class="number">33333</span>,<span class="number">41111</span>,<span class="number">42111</span>,<span class="number">42211</span>,<span class="number">42221</span>,<span class="number">42222</span>,<span class="number">44111</span>,<span class="number">44211</span>,<span class="number">44221</span>,<span class="number">44222</span>,<span class="number">44411</span>,<span class="number">44421</span>,<span class="number">44422</span>,<span class="number">44441</span>,<span class="number">44442</span>,<span class="number">44444</span>,<span class="number">51111</span>,<span class="number">55111</span>,<span class="number">55511</span>,<span class="number">55551</span>,<span class="number">55555</span>,<span class="number">61111</span>,<span class="number">62111</span>,<span class="number">62211</span>,<span class="number">62221</span>,<span class="number">62222</span>,<span class="number">63111</span>,<span class="number">63311</span>,<span class="number">63331</span>,<span class="number">63333</span>,<span class="number">66111</span>,<span class="number">66211</span>,<span class="number">66221</span>,<span class="number">66222</span>,<span class="number">66311</span>,<span class="number">66331</span>,<span class="number">66333</span>,<span class="number">66611</span>,<span class="number">66621</span>,<span class="number">66622</span>,<span class="number">66631</span>,<span class="number">66633</span>,<span class="number">66661</span>,<span class="number">66662</span>,<span class="number">66663</span>,<span class="number">66666</span>,<span class="number">71111</span>,<span class="number">77111</span>,<span class="number">77711</span>,<span class="number">77771</span>,<span class="number">77777</span>,<span class="number">81111</span>,<span class="number">82111</span>,<span class="number">82211</span>,<span class="number">82221</span>,<span class="number">82222</span>,<span class="number">84111</span>,<span class="number">84211</span>,<span class="number">84221</span>,<span class="number">84222</span>,<span class="number">84411</span>,<span class="number">84421</span>,<span class="number">84422</span>,<span class="number">84441</span>,<span class="number">84442</span>,<span class="number">84444</span>,<span class="number">88111</span>,<span class="number">88211</span>,<span class="number">88221</span>,<span class="number">88222</span>,<span class="number">88411</span>,<span class="number">88421</span>,<span class="number">88422</span>,<span class="number">88441</span>,<span class="number">88442</span>,<span class="number">88444</span>,<span class="number">88811</span>,<span class="number">88821</span>,<span class="number">88822</span>,<span class="number">88841</span>,<span class="number">88842</span>,<span class="number">88844</span>,<span class="number">88881</span>,<span class="number">88882</span>,<span class="number">88884</span>,<span class="number">88888</span>,<span class="number">91111</span>,<span class="number">93111</span>,<span class="number">93311</span>,<span class="number">93331</span>,<span class="number">93333</span>,<span class="number">99111</span>,<span class="number">99311</span>,<span class="number">99331</span>,<span class="number">99333</span>,<span class="number">99911</span>,<span class="number">99931</span>,<span class="number">99933</span>,<span class="number">99991</span>,<span class="number">99993</span>,<span class="number">99999</span>,<span class="number">111111</span>,<span class="number">211111</span>,<span class="number">221111</span>,<span class="number">222111</span>,<span class="number">222211</span>,<span class="number">222221</span>,<span class="number">222222</span>,<span class="number">311111</span>,<span class="number">331111</span>,<span class="number">333111</span>,<span class="number">333311</span>,<span class="number">333331</span>,<span class="number">333333</span>,<span class="number">411111</span>,<span class="number">421111</span>,<span class="number">422111</span>,<span class="number">422211</span>,<span class="number">422221</span>,<span class="number">422222</span>,<span class="number">441111</span>,<span class="number">442111</span>,<span class="number">442211</span>,<span class="number">442221</span>,<span class="number">442222</span>,<span class="number">444111</span>,<span class="number">444211</span>,<span class="number">444221</span>,<span class="number">444222</span>,<span class="number">444411</span>,<span class="number">444421</span>,<span class="number">444422</span>,<span class="number">444441</span>,<span class="number">444442</span>,<span class="number">444444</span>,<span class="number">511111</span>,<span class="number">551111</span>,<span class="number">555111</span>,<span class="number">555511</span>,<span class="number">555551</span>,<span class="number">555555</span>,<span class="number">611111</span>,<span class="number">621111</span>,<span class="number">622111</span>,<span class="number">622211</span>,<span class="number">622221</span>,<span class="number">622222</span>,<span class="number">631111</span>,<span class="number">633111</span>,<span class="number">633311</span>,<span class="number">633331</span>,<span class="number">633333</span>,<span class="number">661111</span>,<span class="number">662111</span>,<span class="number">662211</span>,<span class="number">662221</span>,<span class="number">662222</span>,<span class="number">663111</span>,<span class="number">663311</span>,<span class="number">663331</span>,<span class="number">663333</span>,<span class="number">666111</span>,<span class="number">666211</span>,<span class="number">666221</span>,<span class="number">666222</span>,<span class="number">666311</span>,<span class="number">666331</span>,<span class="number">666333</span>,<span class="number">666611</span>,<span class="number">666621</span>,<span class="number">666622</span>,<span class="number">666631</span>,<span class="number">666633</span>,<span class="number">666661</span>,<span class="number">666662</span>,<span class="number">666663</span>,<span class="number">666666</span>,<span class="number">711111</span>,<span class="number">771111</span>,<span class="number">777111</span>,<span class="number">777711</span>,<span class="number">777771</span>,<span class="number">777777</span>,<span class="number">811111</span>,<span class="number">821111</span>,<span class="number">822111</span>,<span class="number">822211</span>,<span class="number">822221</span>,<span class="number">822222</span>,<span class="number">841111</span>,<span class="number">842111</span>,<span class="number">842211</span>,<span class="number">842221</span>,<span class="number">842222</span>,<span class="number">844111</span>,<span class="number">844211</span>,<span class="number">844221</span>,<span class="number">844222</span>,<span class="number">844411</span>,<span class="number">844421</span>,<span class="number">844422</span>,<span class="number">844441</span>,<span class="number">844442</span>,<span class="number">844444</span>,<span class="number">881111</span>,<span class="number">882111</span>,<span class="number">882211</span>,<span class="number">882221</span>,<span class="number">882222</span>,<span class="number">884111</span>,<span class="number">884211</span>,<span class="number">884221</span>,<span class="number">884222</span>,<span class="number">884411</span>,<span class="number">884421</span>,<span class="number">884422</span>,<span class="number">884441</span>,<span class="number">884442</span>,<span class="number">884444</span>,<span class="number">888111</span>,<span class="number">888211</span>,<span class="number">888221</span>,<span class="number">888222</span>,<span class="number">888411</span>,<span class="number">888421</span>,<span class="number">888422</span>,<span class="number">888441</span>,<span class="number">888442</span>,<span class="number">888444</span>,<span class="number">888811</span>,<span class="number">888821</span>,<span class="number">888822</span>,<span class="number">888841</span>,<span class="number">888842</span>,<span class="number">888844</span>,<span class="number">888881</span>,<span class="number">888882</span>,<span class="number">888884</span>,<span class="number">888888</span>,<span class="number">911111</span>,<span class="number">931111</span>,<span class="number">933111</span>,<span class="number">933311</span>,<span class="number">933331</span>,<span class="number">933333</span>,<span class="number">991111</span>,<span class="number">993111</span>,<span class="number">993311</span>,<span class="number">993331</span>,<span class="number">993333</span>,<span class="number">999111</span>,<span class="number">999311</span>,<span class="number">999331</span>,<span class="number">999333</span>,<span class="number">999911</span>,<span class="number">999931</span>,<span class="number">999933</span>,<span class="number">999991</span>,<span class="number">999993</span>,<span class="number">999999</span>,<span class="number">1111111</span>,<span class="number">2111111</span>,<span class="number">2211111</span>,<span class="number">2221111</span>,<span class="number">2222111</span>,<span class="number">2222211</span>,<span class="number">2222221</span>,<span class="number">2222222</span>,<span class="number">3111111</span>,<span class="number">3311111</span>,<span class="number">3331111</span>,<span class="number">3333111</span>,<span class="number">3333311</span>,<span class="number">3333331</span>,<span class="number">3333333</span>,<span class="number">4111111</span>,<span class="number">4211111</span>,<span class="number">4221111</span>,<span class="number">4222111</span>,<span class="number">4222211</span>,<span class="number">4222221</span>,<span class="number">4222222</span>,<span class="number">4411111</span>,<span class="number">4421111</span>,<span class="number">4422111</span>,<span class="number">4422211</span>,<span class="number">4422221</span>,<span class="number">4422222</span>,<span class="number">4441111</span>,<span class="number">4442111</span>,<span class="number">4442211</span>,<span class="number">4442221</span>,<span class="number">4442222</span>,<span class="number">4444111</span>,<span class="number">4444211</span>,<span class="number">4444221</span>,<span class="number">4444222</span>,<span class="number">4444411</span>,<span class="number">4444421</span>,<span class="number">4444422</span>,<span class="number">4444441</span>,<span class="number">4444442</span>,<span class="number">4444444</span>,<span class="number">5111111</span>,<span class="number">5511111</span>,<span class="number">5551111</span>,<span class="number">5555111</span>,<span class="number">5555511</span>,<span class="number">5555551</span>,<span class="number">5555555</span>,<span class="number">6111111</span>,<span class="number">6211111</span>,<span class="number">6221111</span>,<span class="number">6222111</span>,<span class="number">6222211</span>,<span class="number">6222221</span>,<span class="number">6222222</span>,<span class="number">6311111</span>,<span class="number">6331111</span>,<span class="number">6333111</span>,<span class="number">6333311</span>,<span class="number">6333331</span>,<span class="number">6333333</span>,<span class="number">6611111</span>,<span class="number">6621111</span>,<span class="number">6622111</span>,<span class="number">6622211</span>,<span class="number">6622221</span>,<span class="number">6622222</span>,<span class="number">6631111</span>,<span class="number">6633111</span>,<span class="number">6633311</span>,<span class="number">6633331</span>,<span class="number">6633333</span>,<span class="number">6661111</span>,<span class="number">6662111</span>,<span class="number">6662211</span>,<span class="number">6662221</span>,<span class="number">6662222</span>,<span class="number">6663111</span>,<span class="number">6663311</span>,<span class="number">6663331</span>,<span class="number">6663333</span>,<span class="number">6666111</span>,<span class="number">6666211</span>,<span class="number">6666221</span>,<span class="number">6666222</span>,<span class="number">6666311</span>,<span class="number">6666331</span>,<span class="number">6666333</span>,<span class="number">6666611</span>,<span class="number">6666621</span>,<span class="number">6666622</span>,<span class="number">6666631</span>,<span class="number">6666633</span>,<span class="number">6666661</span>,<span class="number">6666662</span>,<span class="number">6666663</span>,<span class="number">6666666</span>,<span class="number">7111111</span>,<span class="number">7711111</span>,<span class="number">7771111</span>,<span class="number">7777111</span>,<span class="number">7777711</span>,<span class="number">7777771</span>,<span class="number">7777777</span>,<span class="number">8111111</span>,<span class="number">8211111</span>,<span class="number">8221111</span>,<span class="number">8222111</span>,<span class="number">8222211</span>,<span class="number">8222221</span>,<span class="number">8222222</span>,<span class="number">8411111</span>,<span class="number">8421111</span>,<span class="number">8422111</span>,<span class="number">8422211</span>,<span class="number">8422221</span>,<span class="number">8422222</span>,<span class="number">8441111</span>,<span class="number">8442111</span>,<span class="number">8442211</span>,<span class="number">8442221</span>,<span class="number">8442222</span>,<span class="number">8444111</span>,<span class="number">8444211</span>,<span class="number">8444221</span>,<span class="number">8444222</span>,<span class="number">8444411</span>,<span class="number">8444421</span>,<span class="number">8444422</span>,<span class="number">8444441</span>,<span class="number">8444442</span>,<span class="number">8444444</span>,<span class="number">8811111</span>,<span class="number">8821111</span>,<span class="number">8822111</span>,<span class="number">8822211</span>,<span class="number">8822221</span>,<span class="number">8822222</span>,<span class="number">8841111</span>,<span class="number">8842111</span>,<span class="number">8842211</span>,<span class="number">8842221</span>,<span class="number">8842222</span>,<span class="number">8844111</span>,<span class="number">8844211</span>,<span class="number">8844221</span>,<span class="number">8844222</span>,<span class="number">8844411</span>,<span class="number">8844421</span>,<span class="number">8844422</span>,<span class="number">8844441</span>,<span class="number">8844442</span>,<span class="number">8844444</span>,<span class="number">8881111</span>,<span class="number">8882111</span>,<span class="number">8882211</span>,<span class="number">8882221</span>,<span class="number">8882222</span>,<span class="number">8884111</span>,<span class="number">8884211</span>,<span class="number">8884221</span>,<span class="number">8884222</span>,<span class="number">8884411</span>,<span class="number">8884421</span>,<span class="number">8884422</span>,<span class="number">8884441</span>,<span class="number">8884442</span>,<span class="number">8884444</span>,<span class="number">8888111</span>,<span class="number">8888211</span>,<span class="number">8888221</span>,<span class="number">8888222</span>,<span class="number">8888411</span>,<span class="number">8888421</span>,<span class="number">8888422</span>,<span class="number">8888441</span>,<span class="number">8888442</span>,<span class="number">8888444</span>,<span class="number">8888811</span>,<span class="number">8888821</span>,<span class="number">8888822</span>,<span class="number">8888841</span>,<span class="number">8888842</span>,<span class="number">8888844</span>,<span class="number">8888881</span>,<span class="number">8888882</span>,<span class="number">8888884</span>,<span class="number">8888888</span>,<span class="number">9111111</span>,<span class="number">9311111</span>,<span class="number">9331111</span>,<span class="number">9333111</span>,<span class="number">9333311</span>,<span class="number">9333331</span>,<span class="number">9333333</span>,<span class="number">9911111</span>,<span class="number">9931111</span>,<span class="number">9933111</span>,<span class="number">9933311</span>,<span class="number">9933331</span>,<span class="number">9933333</span>,<span class="number">9991111</span>,<span class="number">9993111</span>,<span class="number">9993311</span>,<span class="number">9993331</span>,<span class="number">9993333</span>,<span class="number">9999111</span>,<span class="number">9999311</span>,<span class="number">9999331</span>,<span class="number">9999333</span>,<span class="number">9999911</span>,<span class="number">9999931</span>,<span class="number">9999933</span>,<span class="number">9999991</span>,<span class="number">9999993</span>,<span class="number">9999999</span>,<span class="number">11111111</span>,<span class="number">21111111</span>,<span class="number">22111111</span>,<span class="number">22211111</span>,<span class="number">22221111</span>,<span class="number">22222111</span>,<span class="number">22222211</span>,<span class="number">22222221</span>,<span class="number">22222222</span>,<span class="number">31111111</span>,<span class="number">33111111</span>,<span class="number">33311111</span>,<span class="number">33331111</span>,<span class="number">33333111</span>,<span class="number">33333311</span>,<span class="number">33333331</span>,<span class="number">33333333</span>,<span class="number">41111111</span>,<span class="number">42111111</span>,<span class="number">42211111</span>,<span class="number">42221111</span>,<span class="number">42222111</span>,<span class="number">42222211</span>,<span class="number">42222221</span>,<span class="number">42222222</span>,<span class="number">44111111</span>,<span class="number">44211111</span>,<span class="number">44221111</span>,<span class="number">44222111</span>,<span class="number">44222211</span>,<span class="number">44222221</span>,<span class="number">44222222</span>,<span class="number">44411111</span>,<span class="number">44421111</span>,<span class="number">44422111</span>,<span class="number">44422211</span>,<span class="number">44422221</span>,<span class="number">44422222</span>,<span class="number">44441111</span>,<span class="number">44442111</span>,<span class="number">44442211</span>,<span class="number">44442221</span>,<span class="number">44442222</span>,<span class="number">44444111</span>,<span class="number">44444211</span>,<span class="number">44444221</span>,<span class="number">44444222</span>,<span class="number">44444411</span>,<span class="number">44444421</span>,<span class="number">44444422</span>,<span class="number">44444441</span>,<span class="number">44444442</span>,<span class="number">44444444</span>,<span class="number">51111111</span>,<span class="number">55111111</span>,<span class="number">55511111</span>,<span class="number">55551111</span>,<span class="number">55555111</span>,<span class="number">55555511</span>,<span class="number">55555551</span>,<span class="number">55555555</span>,<span class="number">61111111</span>,<span class="number">62111111</span>,<span class="number">62211111</span>,<span class="number">62221111</span>,<span class="number">62222111</span>,<span class="number">62222211</span>,<span class="number">62222221</span>,<span class="number">62222222</span>,<span class="number">63111111</span>,<span class="number">63311111</span>,<span class="number">63331111</span>,<span class="number">63333111</span>,<span class="number">63333311</span>,<span class="number">63333331</span>,<span class="number">63333333</span>,<span class="number">66111111</span>,<span class="number">66211111</span>,<span class="number">66221111</span>,<span class="number">66222111</span>,<span class="number">66222211</span>,<span class="number">66222221</span>,<span class="number">66222222</span>,<span class="number">66311111</span>,<span class="number">66331111</span>,<span class="number">66333111</span>,<span class="number">66333311</span>,<span class="number">66333331</span>,<span class="number">66333333</span>,<span class="number">66611111</span>,<span class="number">66621111</span>,<span class="number">66622111</span>,<span class="number">66622211</span>,<span class="number">66622221</span>,<span class="number">66622222</span>,<span class="number">66631111</span>,<span class="number">66633111</span>,<span class="number">66633311</span>,<span class="number">66633331</span>,<span class="number">66633333</span>,<span class="number">66661111</span>,<span class="number">66662111</span>,<span class="number">66662211</span>,<span class="number">66662221</span>,<span class="number">66662222</span>,<span class="number">66663111</span>,<span class="number">66663311</span>,<span class="number">66663331</span>,<span class="number">66663333</span>,<span class="number">66666111</span>,<span class="number">66666211</span>,<span class="number">66666221</span>,<span class="number">66666222</span>,<span class="number">66666311</span>,<span class="number">66666331</span>,<span class="number">66666333</span>,<span class="number">66666611</span>,<span class="number">66666621</span>,<span class="number">66666622</span>,<span class="number">66666631</span>,<span class="number">66666633</span>,<span class="number">66666661</span>,<span class="number">66666662</span>,<span class="number">66666663</span>,<span class="number">66666666</span>,<span class="number">71111111</span>,<span class="number">77111111</span>,<span class="number">77711111</span>,<span class="number">77771111</span>,<span class="number">77777111</span>,<span class="number">77777711</span>,<span class="number">77777771</span>,<span class="number">77777777</span>,<span class="number">81111111</span>,<span class="number">82111111</span>,<span class="number">82211111</span>,<span class="number">82221111</span>,<span class="number">82222111</span>,<span class="number">82222211</span>,<span class="number">82222221</span>,<span class="number">82222222</span>,<span class="number">84111111</span>,<span class="number">84211111</span>,<span class="number">84221111</span>,<span class="number">84222111</span>,<span class="number">84222211</span>,<span class="number">84222221</span>,<span class="number">84222222</span>,<span class="number">84411111</span>,<span class="number">84421111</span>,<span class="number">84422111</span>,<span class="number">84422211</span>,<span class="number">84422221</span>,<span class="number">84422222</span>,<span class="number">84441111</span>,<span class="number">84442111</span>,<span class="number">84442211</span>,<span class="number">84442221</span>,<span class="number">84442222</span>,<span class="number">84444111</span>,<span class="number">84444211</span>,<span class="number">84444221</span>,<span class="number">84444222</span>,<span class="number">84444411</span>,<span class="number">84444421</span>,<span class="number">84444422</span>,<span class="number">84444441</span>,<span class="number">84444442</span>,<span class="number">84444444</span>,<span class="number">88111111</span>,<span class="number">88211111</span>,<span class="number">88221111</span>,<span class="number">88222111</span>,<span class="number">88222211</span>,<span class="number">88222221</span>,<span class="number">88222222</span>,<span class="number">88411111</span>,<span class="number">88421111</span>,<span class="number">88422111</span>,<span class="number">88422211</span>,<span class="number">88422221</span>,<span class="number">88422222</span>,<span class="number">88441111</span>,<span class="number">88442111</span>,<span class="number">88442211</span>,<span class="number">88442221</span>,<span class="number">88442222</span>,<span class="number">88444111</span>,<span class="number">88444211</span>,<span class="number">88444221</span>,<span class="number">88444222</span>,<span class="number">88444411</span>,<span class="number">88444421</span>,<span class="number">88444422</span>,<span class="number">88444441</span>,<span class="number">88444442</span>,<span class="number">88444444</span>,<span class="number">88811111</span>,<span class="number">88821111</span>,<span class="number">88822111</span>,<span class="number">88822211</span>,<span class="number">88822221</span>,<span class="number">88822222</span>,<span class="number">88841111</span>,<span class="number">88842111</span>,<span class="number">88842211</span>,<span class="number">88842221</span>,<span class="number">88842222</span>,<span class="number">88844111</span>,<span class="number">88844211</span>,<span class="number">88844221</span>,<span class="number">88844222</span>,<span class="number">88844411</span>,<span class="number">88844421</span>,<span class="number">88844422</span>,<span class="number">88844441</span>,<span class="number">88844442</span>,<span class="number">88844444</span>,<span class="number">88881111</span>,<span class="number">88882111</span>,<span class="number">88882211</span>,<span class="number">88882221</span>,<span class="number">88882222</span>,<span class="number">88884111</span>,<span class="number">88884211</span>,<span class="number">88884221</span>,<span class="number">88884222</span>,<span class="number">88884411</span>,<span class="number">88884421</span>,<span class="number">88884422</span>,<span class="number">88884441</span>,<span class="number">88884442</span>,<span class="number">88884444</span>,<span class="number">88888111</span>,<span class="number">88888211</span>,<span class="number">88888221</span>,<span class="number">88888222</span>,<span class="number">88888411</span>,<span class="number">88888421</span>,<span class="number">88888422</span>,<span class="number">88888441</span>,<span class="number">88888442</span>,<span class="number">88888444</span>,<span class="number">88888811</span>,<span class="number">88888821</span>,<span class="number">88888822</span>,<span class="number">88888841</span>,<span class="number">88888842</span>,<span class="number">88888844</span>,<span class="number">88888881</span>,<span class="number">88888882</span>,<span class="number">88888884</span>,<span class="number">88888888</span>,<span class="number">91111111</span>,<span class="number">93111111</span>,<span class="number">93311111</span>,<span class="number">93331111</span>,<span class="number">93333111</span>,<span class="number">93333311</span>,<span class="number">93333331</span>,<span class="number">93333333</span>,<span class="number">99111111</span>,<span class="number">99311111</span>,<span class="number">99331111</span>,<span class="number">99333111</span>,<span class="number">99333311</span>,<span class="number">99333331</span>,<span class="number">99333333</span>,<span class="number">99911111</span>,<span class="number">99931111</span>,<span class="number">99933111</span>,<span class="number">99933311</span>,<span class="number">99933331</span>,<span class="number">99933333</span>,<span class="number">99991111</span>,<span class="number">99993111</span>,<span class="number">99993311</span>,<span class="number">99993331</span>,<span class="number">99993333</span>,<span class="number">99999111</span>,<span class="number">99999311</span>,<span class="number">99999331</span>,<span class="number">99999333</span>,<span class="number">99999911</span>,<span class="number">99999931</span>,<span class="number">99999933</span>,<span class="number">99999991</span>,<span class="number">99999993</span>,<span class="number">99999999</span>,<span class="number">111111111</span>,<span class="number">211111111</span>,<span class="number">221111111</span>,<span class="number">222111111</span>,<span class="number">222211111</span>,<span class="number">222221111</span>,<span class="number">222222111</span>,<span class="number">222222211</span>,<span class="number">222222221</span>,<span class="number">222222222</span>,<span class="number">311111111</span>,<span class="number">331111111</span>,<span class="number">333111111</span>,<span class="number">333311111</span>,<span class="number">333331111</span>,<span class="number">333333111</span>,<span class="number">333333311</span>,<span class="number">333333331</span>,<span class="number">333333333</span>,<span class="number">411111111</span>,<span class="number">421111111</span>,<span class="number">422111111</span>,<span class="number">422211111</span>,<span class="number">422221111</span>,<span class="number">422222111</span>,<span class="number">422222211</span>,<span class="number">422222221</span>,<span class="number">422222222</span>,<span class="number">441111111</span>,<span class="number">442111111</span>,<span class="number">442211111</span>,<span class="number">442221111</span>,<span class="number">442222111</span>,<span class="number">442222211</span>,<span class="number">442222221</span>,<span class="number">442222222</span>,<span class="number">444111111</span>,<span class="number">444211111</span>,<span class="number">444221111</span>,<span class="number">444222111</span>,<span class="number">444222211</span>,<span class="number">444222221</span>,<span class="number">444222222</span>,<span class="number">444411111</span>,<span class="number">444421111</span>,<span class="number">444422111</span>,<span class="number">444422211</span>,<span class="number">444422221</span>,<span class="number">444422222</span>,<span class="number">444441111</span>,<span class="number">444442111</span>,<span class="number">444442211</span>,<span class="number">444442221</span>,<span class="number">444442222</span>,<span class="number">444444111</span>,<span class="number">444444211</span>,<span class="number">444444221</span>,<span class="number">444444222</span>,<span class="number">444444411</span>,<span class="number">444444421</span>,<span class="number">444444422</span>,<span class="number">444444441</span>,<span class="number">444444442</span>,<span class="number">444444444</span>,<span class="number">511111111</span>,<span class="number">551111111</span>,<span class="number">555111111</span>,<span class="number">555511111</span>,<span class="number">555551111</span>,<span class="number">555555111</span>,<span class="number">555555511</span>,<span class="number">555555551</span>,<span class="number">555555555</span>,<span class="number">611111111</span>,<span class="number">621111111</span>,<span class="number">622111111</span>,<span class="number">622211111</span>,<span class="number">622221111</span>,<span class="number">622222111</span>,<span class="number">622222211</span>,<span class="number">622222221</span>,<span class="number">622222222</span>,<span class="number">631111111</span>,<span class="number">633111111</span>,<span class="number">633311111</span>,<span class="number">633331111</span>,<span class="number">633333111</span>,<span class="number">633333311</span>,<span class="number">633333331</span>,<span class="number">633333333</span>,<span class="number">661111111</span>,<span class="number">662111111</span>,<span class="number">662211111</span>,<span class="number">662221111</span>,<span class="number">662222111</span>,<span class="number">662222211</span>,<span class="number">662222221</span>,<span class="number">662222222</span>,<span class="number">663111111</span>,<span class="number">663311111</span>,<span class="number">663331111</span>,<span class="number">663333111</span>,<span class="number">663333311</span>,<span class="number">663333331</span>,<span class="number">663333333</span>,<span class="number">666111111</span>,<span class="number">666211111</span>,<span class="number">666221111</span>,<span class="number">666222111</span>,<span class="number">666222211</span>,<span class="number">666222221</span>,<span class="number">666222222</span>,<span class="number">666311111</span>,<span class="number">666331111</span>,<span class="number">666333111</span>,<span class="number">666333311</span>,<span class="number">666333331</span>,<span class="number">666333333</span>,<span class="number">666611111</span>,<span class="number">666621111</span>,<span class="number">666622111</span>,<span class="number">666622211</span>,<span class="number">666622221</span>,<span class="number">666622222</span>,<span class="number">666631111</span>,<span class="number">666633111</span>,<span class="number">666633311</span>,<span class="number">666633331</span>,<span class="number">666633333</span>,<span class="number">666661111</span>,<span class="number">666662111</span>,<span class="number">666662211</span>,<span class="number">666662221</span>,<span class="number">666662222</span>,<span class="number">666663111</span>,<span class="number">666663311</span>,<span class="number">666663331</span>,<span class="number">666663333</span>,<span class="number">666666111</span>,<span class="number">666666211</span>,<span class="number">666666221</span>,<span class="number">666666222</span>,<span class="number">666666311</span>,<span class="number">666666331</span>,<span class="number">666666333</span>,<span class="number">666666611</span>,<span class="number">666666621</span>,<span class="number">666666622</span>,<span class="number">666666631</span>,<span class="number">666666633</span>,<span class="number">666666661</span>,<span class="number">666666662</span>,<span class="number">666666663</span>,<span class="number">666666666</span>,<span class="number">711111111</span>,<span class="number">771111111</span>,<span class="number">777111111</span>,<span class="number">777711111</span>,<span class="number">777771111</span>,<span class="number">777777111</span>,<span class="number">777777711</span>,<span class="number">777777771</span>,<span class="number">777777777</span>,<span class="number">811111111</span>,<span class="number">821111111</span>,<span class="number">822111111</span>,<span class="number">822211111</span>,<span class="number">822221111</span>,<span class="number">822222111</span>,<span class="number">822222211</span>,<span class="number">822222221</span>,<span class="number">822222222</span>,<span class="number">841111111</span>,<span class="number">842111111</span>,<span class="number">842211111</span>,<span class="number">842221111</span>,<span class="number">842222111</span>,<span class="number">842222211</span>,<span class="number">842222221</span>,<span class="number">842222222</span>,<span class="number">844111111</span>,<span class="number">844211111</span>,<span class="number">844221111</span>,<span class="number">844222111</span>,<span class="number">844222211</span>,<span class="number">844222221</span>,<span class="number">844222222</span>,<span class="number">844411111</span>,<span class="number">844421111</span>,<span class="number">844422111</span>,<span class="number">844422211</span>,<span class="number">844422221</span>,<span class="number">844422222</span>,<span class="number">844441111</span>,<span class="number">844442111</span>,<span class="number">844442211</span>,<span class="number">844442221</span>,<span class="number">844442222</span>,<span class="number">844444111</span>,<span class="number">844444211</span>,<span class="number">844444221</span>,<span class="number">844444222</span>,<span class="number">844444411</span>,<span class="number">844444421</span>,<span class="number">844444422</span>,<span class="number">844444441</span>,<span class="number">844444442</span>,<span class="number">844444444</span>,<span class="number">881111111</span>,<span class="number">882111111</span>,<span class="number">882211111</span>,<span class="number">882221111</span>,<span class="number">882222111</span>,<span class="number">882222211</span>,<span class="number">882222221</span>,<span class="number">882222222</span>,<span class="number">884111111</span>,<span class="number">884211111</span>,<span class="number">884221111</span>,<span class="number">884222111</span>,<span class="number">884222211</span>,<span class="number">884222221</span>,<span class="number">884222222</span>,<span class="number">884411111</span>,<span class="number">884421111</span>,<span class="number">884422111</span>,<span class="number">884422211</span>,<span class="number">884422221</span>,<span class="number">884422222</span>,<span class="number">884441111</span>,<span class="number">884442111</span>,<span class="number">884442211</span>,<span class="number">884442221</span>,<span class="number">884442222</span>,<span class="number">884444111</span>,<span class="number">884444211</span>,<span class="number">884444221</span>,<span class="number">884444222</span>,<span class="number">884444411</span>,<span class="number">884444421</span>,<span class="number">884444422</span>,<span class="number">884444441</span>,<span class="number">884444442</span>,<span class="number">884444444</span>,<span class="number">888111111</span>,<span class="number">888211111</span>,<span class="number">888221111</span>,<span class="number">888222111</span>,<span class="number">888222211</span>,<span class="number">888222221</span>,<span class="number">888222222</span>,<span class="number">888411111</span>,<span class="number">888421111</span>,<span class="number">888422111</span>,<span class="number">888422211</span>,<span class="number">888422221</span>,<span class="number">888422222</span>,<span class="number">888441111</span>,<span class="number">888442111</span>,<span class="number">888442211</span>,<span class="number">888442221</span>,<span class="number">888442222</span>,<span class="number">888444111</span>,<span class="number">888444211</span>,<span class="number">888444221</span>,<span class="number">888444222</span>,<span class="number">888444411</span>,<span class="number">888444421</span>,<span class="number">888444422</span>,<span class="number">888444441</span>,<span class="number">888444442</span>,<span class="number">888444444</span>,<span class="number">888811111</span>,<span class="number">888821111</span>,<span class="number">888822111</span>,<span class="number">888822211</span>,<span class="number">888822221</span>,<span class="number">888822222</span>,<span class="number">888841111</span>,<span class="number">888842111</span>,<span class="number">888842211</span>,<span class="number">888842221</span>,<span class="number">888842222</span>,<span class="number">888844111</span>,<span class="number">888844211</span>,<span class="number">888844221</span>,<span class="number">888844222</span>,<span class="number">888844411</span>,<span class="number">888844421</span>,<span class="number">888844422</span>,<span class="number">888844441</span>,<span class="number">888844442</span>,<span class="number">888844444</span>,<span class="number">888881111</span>,<span class="number">888882111</span>,<span class="number">888882211</span>,<span class="number">888882221</span>,<span class="number">888882222</span>,<span class="number">888884111</span>,<span class="number">888884211</span>,<span class="number">888884221</span>,<span class="number">888884222</span>,<span class="number">888884411</span>,<span class="number">888884421</span>,<span class="number">888884422</span>,<span class="number">888884441</span>,<span class="number">888884442</span>,<span class="number">888884444</span>,<span class="number">888888111</span>,<span class="number">888888211</span>,<span class="number">888888221</span>,<span class="number">888888222</span>,<span class="number">888888411</span>,<span class="number">888888421</span>,<span class="number">888888422</span>,<span class="number">888888441</span>,<span class="number">888888442</span>,<span class="number">888888444</span>,<span class="number">888888811</span>,<span class="number">888888821</span>,<span class="number">888888822</span>,<span class="number">888888841</span>,<span class="number">888888842</span>,<span class="number">888888844</span>,<span class="number">888888881</span>,<span class="number">888888882</span>,<span class="number">888888884</span>,<span class="number">888888888</span>,<span class="number">911111111</span>,<span class="number">931111111</span>,<span class="number">933111111</span>,<span class="number">933311111</span>,<span class="number">933331111</span>,<span class="number">933333111</span>,<span class="number">933333311</span>,<span class="number">933333331</span>,<span class="number">933333333</span>,<span class="number">991111111</span>,<span class="number">993111111</span>,<span class="number">993311111</span>,<span class="number">993331111</span>,<span class="number">993333111</span>,<span class="number">993333311</span>,<span class="number">993333331</span>,<span class="number">993333333</span>,<span class="number">999111111</span>,<span class="number">999311111</span>,<span class="number">999331111</span>,<span class="number">999333111</span>,<span class="number">999333311</span>,<span class="number">999333331</span>,<span class="number">999333333</span>,<span class="number">999911111</span>,<span class="number">999931111</span>,<span class="number">999933111</span>,<span class="number">999933311</span>,<span class="number">999933331</span>,<span class="number">999933333</span>,<span class="number">999991111</span>,<span class="number">999993111</span>,<span class="number">999993311</span>,<span class="number">999993331</span>,<span class="number">999993333</span>,<span class="number">999999111</span>,<span class="number">999999311</span>,<span class="number">999999331</span>,<span class="number">999999333</span>,<span class="number">999999911</span>,<span class="number">999999931</span>,<span class="number">999999933</span>,<span class="number">999999991</span>,<span class="number">999999993</span>,<span class="number">999999999</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n = <span class="number">1299</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> T;</div><div class="line"></div><div class="line">  <span class="built_in">cin</span>&gt;&gt;T;</div><div class="line"></div><div class="line">  <span class="keyword">while</span>(T--)</div><div class="line"></div><div class="line">  &#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> L,R;</div><div class="line"></div><div class="line">    <span class="built_in">cin</span>&gt;&gt;L&gt;&gt;R;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; n;i++)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(f[i]&gt;= L &amp;&amp; f[i]&lt;=R)</div><div class="line"></div><div class="line">        ans++;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hdu 5178 BestCoder #31 1001 Pairs 解题报告]]></title>
      <url>http://blog.jetmuffin.com/2015/03/06/hdu-5178-Pairs/</url>
      <content type="html"><![CDATA[<p>题意简单，找到线段上距离小于k的点对的个数。</p>
<p>解法为，先排序所有点，然后遍历每个点x[a]，二分刚好小于b=x[a]+k的所在点下标，表示a和a+1～b之间的点都为符合点。然后累加b-a即可。</p>
<p>用lower_bound会WA，要用upper_bound或者自己手写二分，问题出在当x[b]=x[a]+k时的区别。</p>
<a id="more"></a>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> x[MAXN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> T;</div><div class="line"></div><div class="line">  <span class="built_in">cin</span>&gt;&gt;T;</div><div class="line"></div><div class="line">  <span class="keyword">while</span>(T--)</div><div class="line"></div><div class="line">  &#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n,k;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x[i]);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sort(x,x+n);</div><div class="line"></div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">      <span class="keyword">int</span> b = upper_bound(x + i + <span class="number">1</span>, x + n, x[i] + k) - x - i - <span class="number">1</span>;</div><div class="line"></div><div class="line">      <span class="comment">// cout&lt;&lt;b&lt;&lt;endl;</span></div><div class="line"></div><div class="line">      ans += b; </div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[弹出框popover点击框外区域关闭弹出框效果]]></title>
      <url>http://blog.jetmuffin.com/2015/03/04/popover/</url>
      <content type="html"><![CDATA[<p>bootstrap用多了，前不久自己写一个popover，弹出很简单，但是让弹出框失去焦点消失时有点问题，记录一下：</p>
<p>原先的想法是获取鼠标点击范围，若鼠标点击在弹出框之外，则绑定事件关闭弹出框，代码如下：</p>
<a id="more"></a>
<p>然而这样非常的麻烦，</p>
<p>`<div class="login-popover"></div></p>
<p>…</p>
<p></p>
<p><div id="black-layer"></div>`</p>
<p>之后发现加了一层黑色的遮罩后，弹出框必定在遮罩上方，这样其实只要给黑色遮罩绑定事件即可。</p>
<p>代码：</p>
<p>`// 关闭登录框</p>
<p>var close_login_box= function (){</p>
<pre><code>$(&apos;#black-layer&apos;).fadeOut();

$(&apos;#login-pop&apos;).fadeOut();
</code></pre><p>};</p>
<p>// 登录按钮点击事件</p>
<p>$(‘#login-btn’).click(function(){</p>
<pre><code>$(&apos;#black-layer&apos;).fadeIn();

$(&apos;#login-pop&apos;).fadeIn();

return false;
</code></pre><p>});</p>
<p>// 点击黑色区域直接关闭登陆框</p>
<p>$(‘#black-layer’).click(close_login_box);`</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BestCoder #29 1002 hdu 5171 GTY's birthday gift 题解]]></title>
      <url>http://blog.jetmuffin.com/2015/02/07/bestCoder-29-1002-hdu-5171-gty-s-birthday-gift-solution/</url>
      <content type="html"><![CDATA[<p>假期放松了太多，状态太差，水题都WA了好几发。。</p>
<p>先是第一题，思路很简单，取个对数判断大小就行了，然后脑抽了居然直接用“==”进行判断，事实上应该要用精度判断，然后卡到第二题做出来才想到。。ORZ</p>
<p>然后是第二题，读题后很容易可以发现最后的答案是取最大的2个数a,b，进行相加，然后得到第三个数a+b，再相加得到a+2b，反复下去类似斐波那契数列。然后可以得出a的系数是从斐波那契的某一项开始的前n项和-1，b同理是前某项和-2，然后用矩阵快速幂o(log(n))轻松搞定斐波那契，再加上数列所有数的和即可。</p>
<p>官方题解是直接从线性方程推出转移矩阵，然后根据三阶矩阵快速幂求得解，同样可用。</p>
<a id="more"></a>
<p>这里值得一提的是，我竟然直接无视题目中的<strong>mod 10000007</strong>，然后想当然地感觉这个数会按往常一样取int范围内最大的质数<strong>1000000007</strong>，然后按着事先打好的模板，结果failed final test了。。这也警告之后不能按照打好的模板来。。还是得自己纯手打好。。</p>
<p>HACK时看到好多人直接for循环跑。。交了两发，都Invalid Input的了，听群里人才知道。。数据最后要换行。。ORZ</p>
<p>本来这场2题保证涨分，紫名近在眼前。。可惜啊，还是要努力啊！</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> MOD = <span class="number">10000007</span>;</div><div class="line"></div><div class="line">LL a[<span class="number">100005</span>];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Mat&#123;</div><div class="line"></div><div class="line">    LL m[N][N];</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">Mat <span class="keyword">operator</span> * (Mat a,Mat b)&#123;</div><div class="line"></div><div class="line">    Mat c;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(c.m,<span class="number">0</span>,<span class="keyword">sizeof</span>(c.m));</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; N; i++)</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; N; j++)</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; N; k++)</div><div class="line"></div><div class="line">            &#123;</div><div class="line"></div><div class="line">                c.m[i][j] = (c.m[i][j]%MOD + (a.m[i][k]%MOD) * (b.m[k][j]% MOD) % MOD) % MOD;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> c;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Mat <span class="keyword">operator</span> ^ (Mat a,LL k)&#123;</div><div class="line"></div><div class="line">    Mat c;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(c.m,<span class="number">0</span>,<span class="keyword">sizeof</span>(c.m));</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line"></div><div class="line">            c.m[i][i] = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(k)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)</div><div class="line"></div><div class="line">            c = c * a;</div><div class="line"></div><div class="line">        a = a * a;</div><div class="line"></div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> c;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick_pow</span><span class="params">(LL a,LL n)</span></span>&#123;</div><div class="line"></div><div class="line">    LL tmp = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(n)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</div><div class="line"></div><div class="line">            tmp = tmp * a % MOD;</div><div class="line"></div><div class="line">        n &gt;&gt;= <span class="number">1</span>;</div><div class="line"></div><div class="line">        a = a * a % MOD;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> tmp;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line"></div><div class="line">	LL n,k;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>,&amp;n,&amp;k))</div><div class="line"></div><div class="line">	&#123;</div><div class="line"></div><div class="line">		LL mx = <span class="number">0</span>;</div><div class="line"></div><div class="line">		LL mxx = <span class="number">0</span>;</div><div class="line"></div><div class="line">		LL sum = <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;n;i++)</div><div class="line"></div><div class="line">		&#123;</div><div class="line"></div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;a[i]);</div><div class="line"></div><div class="line">			sum = (sum + a[i])%MOD;</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(a[i]&gt;mx)</div><div class="line"></div><div class="line">			&#123;</div><div class="line"></div><div class="line">				mxx = mx;</div><div class="line"></div><div class="line">				mx = a[i];</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;mxx)</div><div class="line"></div><div class="line">				mxx = a[i];</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		sort(a,a+n);</div><div class="line"></div><div class="line">		mx = a[n<span class="number">-1</span>]% MOD;</div><div class="line"></div><div class="line">		mxx = a[n<span class="number">-2</span>]% MOD;</div><div class="line"></div><div class="line">		<span class="comment">//cout&lt;&lt;mx&lt;&lt;" "&lt;&lt;mxx&lt;&lt;endl;</span></div><div class="line"></div><div class="line">		<span class="comment">//cout&lt;&lt;sum&lt;&lt;endl;</span></div><div class="line"></div><div class="line">		Mat base = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">        Mat mm = base ^ (k+<span class="number">2</span>);</div><div class="line"></div><div class="line">        LL c = mm.m[<span class="number">0</span>][<span class="number">1</span>]<span class="number">-1</span> % MOD;</div><div class="line"></div><div class="line">        LL d = mm.m[<span class="number">0</span>][<span class="number">0</span>]<span class="number">-2</span> % MOD;</div><div class="line"></div><div class="line">       <span class="comment">// LL ans = (mx * d% MOD + mxx*c% MOD + sum% MOD)%MOD;</span></div><div class="line"></div><div class="line">        <span class="comment">//cout&lt;&lt;c&lt;&lt;" "&lt;&lt;d&lt;&lt;endl;</span></div><div class="line"></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 4549 费马小定理 矩阵快速幂]]></title>
      <url>http://blog.jetmuffin.com/2015/02/04/hdu-4549-fermat-little-theorem/</url>
      <content type="html"><![CDATA[<p>题目是斐波那契的变式，F[n]=F[n-1]*F[n-2]，F[0]=a，F[1]=b。</p>
<p>可以推出最后的ans = a^x * b^y，然后x和y都是斐波那契相邻的两项，x=f(n-1)，y=f(n)。</p>
<p>斐波那契和求幂都可以用快速幂搞定，中间数字特别大，快速幂过程容易溢出，然后WA+TLE了好几发，看了看discuss，群巨建议用费马小定理，查阅了一下，当a和p互质且p是质数时，a^(p-1)≡1，然后变式就是a^p=a^(p%Euler(MOD))%MOD，至于为什么，我之后还会再研究研究。。最近看数论比较有效率。</p>
<a id="more"></a>
<p>这样的话，就很容易可以推出</p>
<p>c = a^(f(n-1)%1000000006)%1000000007;</p>
<p>d = b^(f(n)%1000000006)%1000000007;</p>
<p>ans = c*d;</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> MOD = <span class="number">1000000007</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Mat&#123;</div><div class="line"></div><div class="line">	LL m[N][N];</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">Mat <span class="keyword">operator</span> * (Mat a,Mat b)&#123;</div><div class="line"></div><div class="line">	Mat c;</div><div class="line"></div><div class="line">	<span class="built_in">memset</span>(c.m,<span class="number">0</span>,<span class="keyword">sizeof</span>(c.m));</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; N; i++)</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; N; j++)</div><div class="line"></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; N; k++)</div><div class="line"></div><div class="line">			&#123;</div><div class="line"></div><div class="line">				c.m[i][j] = (c.m[i][j] + a.m[i][k] * b.m[k][j]) % (MOD<span class="number">-1</span>);</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> c;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Mat <span class="keyword">operator</span> ^ (Mat a,LL k)&#123;</div><div class="line"></div><div class="line">	Mat c;</div><div class="line"></div><div class="line">	<span class="built_in">memset</span>(c.m,<span class="number">0</span>,<span class="keyword">sizeof</span>(c.m));</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line"></div><div class="line">			c.m[i][i] = <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(k)&#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(k&amp;<span class="number">1</span>)</div><div class="line"></div><div class="line">			c = c * a;</div><div class="line"></div><div class="line">		a = a * a;</div><div class="line"></div><div class="line">		k &gt;&gt;= <span class="number">1</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> c;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">quick_pow</span><span class="params">(LL a,LL n)</span></span>&#123;</div><div class="line"></div><div class="line">	LL tmp = <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(n)&#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>)</div><div class="line"></div><div class="line">			tmp = tmp * a % MOD;</div><div class="line"></div><div class="line">		n &gt;&gt;= <span class="number">1</span>;</div><div class="line"></div><div class="line">		a = a * a % MOD;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> tmp;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line"></div><div class="line">	LL a,b,n;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%I64d"</span>,&amp;a,&amp;b,&amp;n))</div><div class="line"></div><div class="line">	&#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(n==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,a);</div><div class="line"></div><div class="line">	    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,b);</div><div class="line"></div><div class="line">	    <span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">			Mat base = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">			base = base ^ (n<span class="number">-1</span>);</div><div class="line"></div><div class="line">			LL c = base.m[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line"></div><div class="line">			LL d = base.m[<span class="number">0</span>][<span class="number">1</span>];</div><div class="line"></div><div class="line">			LL ans = (quick_pow(a,d) * quick_pow(b,c))%MOD;</div><div class="line"></div><div class="line">	<span class="comment">//		cout&lt;&lt;c&lt;&lt;" "&lt;&lt;d&lt;&lt;endl;</span></div><div class="line"></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,ans);		    	</div><div class="line"></div><div class="line">	    &#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[蓝桥杯校内选拔赛第6题题解 poj 2676]]></title>
      <url>http://blog.jetmuffin.com/2015/02/03/poj-2676-blue-bridge-cup-training/</url>
      <content type="html"><![CDATA[<p>题目就是输入一个9*9的数独，然后解出数独的最终解。</p>
<p>大体思路还是搜索，dfs即可，写一个检查函数判断行、列、小方阵是否违规。</p>
<p>dfs的函数变量一开始考虑用x,y坐标进行处理，然后对于每个点，枚举1-9个数字中可用的数字，但是由于每次到一行的末尾需要换行到下一行比较麻烦，索性将二维数组一维化，仅使用一个变量k即可。</p>
<a id="more"></a>
<p>调试的时候出现各种错误，还是要细心的问题= =</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> m[<span class="number">9</span>][<span class="number">9</span>];</div><div class="line"><span class="keyword">char</span> buffer[<span class="number">9</span>]; </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> x = (k<span class="number">-1</span>)/<span class="number">9</span>;</div><div class="line">	<span class="keyword">int</span> y = k - x*<span class="number">9</span> <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; <span class="number">9</span>; i++)  <span class="comment">//column</span></div><div class="line">		<span class="keyword">if</span>(m[i][y] == v) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt; <span class="number">9</span>; j++)  <span class="comment">//row</span></div><div class="line">		<span class="keyword">if</span>(m[x][j] == v) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> a,b;   <span class="comment">//small square</span></div><div class="line">	a = x/<span class="number">3</span>*<span class="number">3</span>;</div><div class="line">	b = y/<span class="number">3</span>*<span class="number">3</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = a; i &lt; a+<span class="number">3</span>; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = b; j &lt; b+<span class="number">3</span> ; j++) &#123;</div><div class="line">			<span class="keyword">if</span>(m[i][j] == v)</div><div class="line">				<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	<span class="comment">//cout&lt;&lt;k&lt;&lt;endl;</span></div><div class="line">	<span class="keyword">if</span>(k &gt; <span class="number">81</span>) &#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">9</span>; j++)</div><div class="line">				<span class="built_in">cout</span>&lt;&lt;m[i][j]&lt;&lt;<span class="string">" "</span>;</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		&#125;		</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> x = (k<span class="number">-1</span>)/<span class="number">9</span>;</div><div class="line">	<span class="keyword">int</span> y = k - x*<span class="number">9</span> <span class="number">-1</span>;</div><div class="line">	<span class="keyword">if</span>(m[x][y] != <span class="number">0</span>) &#123;</div><div class="line">		dfs(k+<span class="number">1</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">int</span> i;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</div><div class="line">			<span class="keyword">if</span>(check(k,i)) &#123;</div><div class="line">			<span class="comment">//	cout&lt;&lt;k&lt;&lt;" "&lt;&lt;i&lt;&lt;endl;</span></div><div class="line">				m[x][y] = i;</div><div class="line">				<span class="keyword">if</span>(dfs(k+<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">				m[x][y] = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;	</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">	<span class="keyword">int</span> tmp;</div><div class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</div><div class="line">	<span class="built_in">memset</span>(r,<span class="number">0</span>,<span class="keyword">sizeof</span>(r));</div><div class="line">	<span class="built_in">memset</span>(m,<span class="number">0</span>,<span class="keyword">sizeof</span>(m));</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;<span class="number">9</span>; i++) &#123;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;buffer;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">9</span>;j++) &#123;</div><div class="line">			tmp = buffer[j] - <span class="string">'0'</span>;</div><div class="line">			m[i][j] = tmp;</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(tmp) &#123;</div><div class="line">				c[i][tmp<span class="number">-1</span>]++;</div><div class="line">				r[j][tmp<span class="number">-1</span>]++;</div><div class="line">				cnt++;				</div><div class="line">			&#125;				</div><div class="line">		&#125;</div><div class="line">	&#125; </div><div class="line">	dfs(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">005300000</div><div class="line"></div><div class="line">800000020</div><div class="line"></div><div class="line">070010500</div><div class="line"></div><div class="line">400005300</div><div class="line"></div><div class="line">010070006</div><div class="line"></div><div class="line">003200080</div><div class="line"></div><div class="line">060500009</div><div class="line"></div><div class="line">004000030</div><div class="line"></div><div class="line">000009700</div><div class="line"></div><div class="line">145327698</div><div class="line"></div><div class="line">839654127</div><div class="line"></div><div class="line">672918543</div><div class="line"></div><div class="line">496185372</div><div class="line"></div><div class="line">218473956</div><div class="line"></div><div class="line">753296481</div><div class="line"></div><div class="line">367542819</div><div class="line"></div><div class="line">984761235</div><div class="line"></div><div class="line">521839764</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[蓝桥杯校内选拔第四题解题报告]]></title>
      <url>http://blog.jetmuffin.com/2015/02/03/blu-bridge-cup-4/</url>
      <content type="html"><![CDATA[<p>题目：</p>
<p>今有7对数字：两个1，两个2，两个3，…两个7，把它们排成一行。</p>
<p>要求，两个1间有1个其它数字，两个2间有2个其它数字，以此类推，两个7之间有7个其它数字。如下就是一个符合要求的排列：</p>
<p>17126425374635</p>
<p>当然，如果把它倒过来，也是符合要求的。</p>
<p>请你找出另一种符合要求的排列法，并且这个排列法是以74开头的。</p>
<p>注意：只填写这个14位的整数，不能填写任何多余的内容，比如说明注释等。</p>
<p>思路：</p>
<p>题目是很简单的，去年蓝桥杯也有类似题目，当时不知道怎么写，现在会了= = 记录一下吧，思路就是纯搜索,dfs就OK了</p>
<a id="more"></a>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> f[<span class="number">15</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(v == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span> ; k &lt;= <span class="number">14</span>; k++ )</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;f[k];</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(i &gt; <span class="number">14</span>)</div><div class="line">		<span class="keyword">return</span>;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i+v+<span class="number">1</span>&lt;=<span class="number">14</span> ;i++ ) &#123;</div><div class="line">		<span class="keyword">if</span>(f[i] == <span class="number">0</span> &amp;&amp; f[i+v+<span class="number">1</span>] == <span class="number">0</span>) &#123;</div><div class="line">			f[i] = v;</div><div class="line">			f[i+v+<span class="number">1</span>] = v;</div><div class="line">			dfs(i,v<span class="number">-1</span>);</div><div class="line">			f[i] = <span class="number">0</span>;</div><div class="line">			f[i+v+<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">		&#125; 		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</div><div class="line">	dfs(<span class="number">1</span>,<span class="number">7</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BestCoder #28 1002 Fibonacci hdu 5167 解题报告]]></title>
      <url>http://blog.jetmuffin.com/2015/02/03/bestcoder-28-1002-fibonacci-hdu-5167-solution/</url>
      <content type="html"><![CDATA[<p>题目很简单，就是给出一个n，判断n能否由斐波那契数相乘得到，n范围为1e9。</p>
<p>先判断了一下，该范围大概有40来个数，先预处理保存这些数即可。</p>
<p>一开始的思路是对于每个数直接进行dfs，判断能否能够达到该n，但是写的太烂，加上case T的范围是1e5，结果TLE了。之后看了看别人代码的思路，找到了一种比较好的方法。</p>
<a id="more"></a>
<p>先预处理所有能达到的乘积，然后对于每次查询二分答案即可。测试了下，处理完所有范围的数，大概在80ms左右，看来还是不错的。</p>
<p>dfs的主体内容就是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for i:= t to cnt </div><div class="line"></div><div class="line">val *= f[i];</div><div class="line"></div><div class="line">dfs(i,val);</div></pre></td></tr></table></figure>
<p>其中t为当前搜索的index，val为当前乘积值，再加上一些限制条件就可以了。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1000000000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line">LL f[<span class="number">100</span>];</div><div class="line"><span class="keyword">int</span> vis[<span class="number">100</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> flag;</div><div class="line">LL now = <span class="number">1</span>;</div><div class="line">LL n;</div><div class="line"><span class="built_in">vector</span>&lt;LL&gt; v;</div><div class="line"><span class="built_in">vector</span>&lt;LL&gt;::iterator it;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t,LL val)</span> </span>&#123;</div><div class="line">	<span class="comment">//cout&lt;&lt;t&lt;&lt;" "&lt;&lt;val&lt;&lt;endl; </span></div><div class="line">	v.push_back(val);</div><div class="line">	<span class="keyword">if</span>(t &gt;= cnt)</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = t; i &lt; cnt; i++) &#123;</div><div class="line">		LL tmp = val * f[i];</div><div class="line">		<span class="keyword">if</span>(tmp &gt; INF)</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		dfs(i,tmp);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">	f[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">	f[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">	cnt = <span class="number">2</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;f[i] &lt; <span class="number">100</span>;i++) &#123;</div><div class="line">		f[i] = f[i<span class="number">-1</span>] + f[i<span class="number">-2</span>];</div><div class="line">		<span class="keyword">if</span>(f[i] &gt; INF) <span class="keyword">break</span>;</div><div class="line">		cnt++;</div><div class="line">	&#125;	</div><div class="line">	<span class="comment">//cnt = 5;</span></div><div class="line">    v.push_back(<span class="number">0</span>);	</div><div class="line">	dfs(<span class="number">3</span>,<span class="number">1</span>);</div><div class="line">	sort(v.begin(),v.end());</div><div class="line">	v.erase(unique(v.begin(),v.end()),v.end());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	 <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">        freopen(<span class="string">"out.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	init();</div><div class="line">	<span class="keyword">int</span> T;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;T;</div><div class="line">	<span class="keyword">while</span>(T--) &#123;</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">		flag = <span class="number">0</span>;</div><div class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">		it = lower_bound(v.begin(),v.end(),n);</div><div class="line">		<span class="keyword">if</span>( it!= v.end() &amp;&amp; *it== n) flag = <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span>(!flag)</div><div class="line">			<span class="built_in">puts</span>(<span class="string">"No"</span>);</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BestCoder #26 1002 Card  期望 解题报告]]></title>
      <url>http://blog.jetmuffin.com/2015/01/27/bestCoder-26-1002-card-expection-solution/</url>
      <content type="html"><![CDATA[<p>题目的意思是，从x张牌里抽1张牌，然后放回重复b次，Sj为每次抽出牌的积分之和，问Sj的期望。</p>
<p>一开始看这个题目的时候考虑用组合做，因为b最大为5，所以考虑Sj由5个数-1个数组成的情况，然后算概率，但是题目的a和T的范围太大，O(Tlog(a))都会T估计，这明摆着是要O(T)的节奏啊。。也就是说，给定一个x，一个b，就有公式可以推出答案。</p>
<p>然后从另一个方向考虑，如果从组合考虑，即使给定几个数被抽到，还得考虑顺序情况，相当复杂，于是可以考虑对于每个数，其实只有2种状态（选中OR未选中），根据这两种状态去求期望会方便很多。</p>
<p>每次抽牌，选中某一张牌的概率为1/x；</p>
<p>抽b次牌结束后，某张牌被抽中概率为p = 1-(1-1/x)^b，（转化为相反的事件再转化回来）。</p>
<p>因此抽中某一张牌对期望的贡献为 i <em> p ，因此总期望为 ∑(i=1~x) i </em> p ，即EX = (x + 1)<em>x</em> (1-(1-1/x)^b)。</p>
<a id="more"></a>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span> </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> T;  </div><div class="line">    <span class="built_in">cin</span>&gt;&gt;T;  </div><div class="line">    <span class="keyword">while</span>(T--) &#123;  </div><div class="line">        cnt++;  </div><div class="line">        <span class="keyword">double</span> x;  </div><div class="line">        <span class="keyword">int</span> b;  </div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%d"</span>,&amp;x,&amp;b);  </div><div class="line">        <span class="keyword">double</span> p = <span class="number">1.0</span>;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b; i++)  </div><div class="line">            p *= (<span class="number">1</span> - <span class="number">1</span>/x);  </div><div class="line">        <span class="keyword">double</span> ans = (<span class="number">1</span> - p) * (x + <span class="number">1</span>) * x / <span class="number">2</span>;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %.3f\n"</span>,cnt,ans);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces #285 C Misha and Forest 队列维护 解题报告]]></title>
      <url>http://blog.jetmuffin.com/2015/01/14/codeforces-285-C-Misha-and-Forest-solution/</url>
      <content type="html"><![CDATA[<p>题目大意为一个森林，对于每个节点记录它的度数degree和与它连接的点的异或和Sv。现在给出每个点的degree和Sv，求这个图有多少条边，并写出每条边的顶点。</p>
<p>分析：</p>
<p>首先从异或和出发，加入x^y^z = a，那么左右都异或x的话，(x^x)^y^z = a^x，即y^z = a^x，同理z = a^x^y。</p>
<p>其次由于是森林，肯定有叶子节点，找出这些叶子节点，他们的degree均为1，且Sv为父节点的编号，每遍历一个叶子节点，将其父节点度数-1，Sv异或叶子节点编号，直到找到最后一个节点即可。</p>
<p>最后，需要用队列维护，不然会T。</p>
<a id="more"></a>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"></div><div class="line"><span class="keyword">struct</span> node&#123;  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> degree,s,i;  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> vis;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;  </div><div class="line"></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;degree&lt;&lt;<span class="string">" "</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;   </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;v[<span class="number">70000</span>];  </div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;  </div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;PII&gt; edge;  </div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;PII&gt;::iterator it;  </div><div class="line"></div><div class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line"></div><div class="line">&#123;  </div><div class="line"></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> n;  </div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;  </div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n;i++)  </div><div class="line"></div><div class="line">    &#123;  </div><div class="line"></div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;v[i].degree,&amp;v[i].s);  </div><div class="line"></div><div class="line">        <span class="keyword">if</span>(v[i].degree == <span class="number">1</span>)  </div><div class="line"></div><div class="line">            q.push(i);  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="keyword">while</span>(!q.empty())  </div><div class="line"></div><div class="line">    &#123;  </div><div class="line"></div><div class="line">        <span class="keyword">int</span> i = q.front();  </div><div class="line"></div><div class="line">        q.pop();  </div><div class="line"></div><div class="line">        <span class="keyword">if</span>(v[i].degree == <span class="number">1</span>)  </div><div class="line"></div><div class="line">        &#123;  </div><div class="line"></div><div class="line">            <span class="keyword">int</span> fa = v[i].s;  </div><div class="line"></div><div class="line">            v[fa].s ^= i;  </div><div class="line"></div><div class="line">            v[fa].degree --;  </div><div class="line"></div><div class="line">            edge.push_back(make_pair(i,fa));  </div><div class="line"></div><div class="line">            <span class="keyword">if</span>(v[fa].degree == <span class="number">1</span>)  </div><div class="line"></div><div class="line">                q.push(fa);               </div><div class="line"></div><div class="line">        &#125;     </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;edge.size()&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line"></div><div class="line">    <span class="keyword">for</span>(it = edge.begin();it!=edge.end();it++)  </div><div class="line"></div><div class="line">    &#123;  </div><div class="line"></div><div class="line">        PII pb = *it;  </div><div class="line"></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;pb.first&lt;&lt;<span class="string">" "</span>&lt;&lt;pb.second&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line"></div><div class="line">    &#125;   </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CodeForces #285 B题Misha and Changing Handles解题报告]]></title>
      <url>http://blog.jetmuffin.com/2015/01/14/codeforces-285-B-Misha-and-Changing-Handles-solution/</url>
      <content type="html"><![CDATA[<p>本题的意思是，给定多个改名的查询，每个查询包括一个新名字和旧名字，一个人可以多次更改，最终得到一个新名字，求这些查询中一共有多少个人，并且输出他最初的名字和最后的名字。(1&lt;=q&lt;=100）</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">input</div><div class="line"></div><div class="line">5</div><div class="line"></div><div class="line">Misha ILoveCodeforces</div><div class="line"></div><div class="line">Vasya Petrov</div><div class="line"></div><div class="line">Petrov VasyaPetrov123</div><div class="line"></div><div class="line">ILoveCodeforces MikeMirzayanov</div><div class="line"></div><div class="line">Petya Ivanov</div><div class="line"></div><div class="line">output</div><div class="line"></div><div class="line">3</div><div class="line"></div><div class="line">Petya Ivanov</div><div class="line"></div><div class="line">Misha MikeMirzayanov</div><div class="line"></div><div class="line">Vasya VasyaPetrov123</div></pre></td></tr></table></figure>
<p>考虑到q比较小，所以可以瞎搞。。直接对于每个节点设置sid和pid分别连接下一个名字和上一个名字，对于每一个查询，维护它的前驱和后继，最后便利一遍找到没有sid和没有pid的就是最初和最末的名字，最后根据循环找出每个初始名的结束名即可。</p>
<p>比的时候居然没注意到要用2*q存储，结果RE了，这点要注意。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"></div><div class="line"><span class="keyword">struct</span> node&#123;  </div><div class="line"></div><div class="line">    <span class="built_in">string</span> v;  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> pid;  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> sid;  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;  </div><div class="line"></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;v&lt;&lt;<span class="string">" "</span>&lt;&lt;pid&lt;&lt;<span class="string">" "</span>&lt;&lt;sid&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;f[<span class="number">1001</span>];  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line"></div><div class="line">&#123;  </div><div class="line"></div><div class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> n;  </div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)  </div><div class="line"></div><div class="line">    &#123;  </div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)  </div><div class="line"></div><div class="line">        &#123;  </div><div class="line"></div><div class="line">            f[i].pid = <span class="number">-1</span>;  </div><div class="line"></div><div class="line">            f[i].sid = <span class="number">-1</span>;  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;  </div><div class="line"></div><div class="line">        <span class="keyword">int</span> tmp;  </div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; n; i++)  </div><div class="line"></div><div class="line">        &#123;  </div><div class="line"></div><div class="line">            <span class="built_in">string</span> a,b;  </div><div class="line"></div><div class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;  </div><div class="line"></div><div class="line">            <span class="keyword">int</span> j;  </div><div class="line"></div><div class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; cnt;j++)  </div><div class="line"></div><div class="line">                <span class="keyword">if</span>(a==f[j].v) <span class="keyword">break</span>;  </div><div class="line"></div><div class="line">            <span class="keyword">if</span>(j==cnt)  </div><div class="line"></div><div class="line">            &#123;  </div><div class="line"></div><div class="line">                f[cnt].v = a;  </div><div class="line"></div><div class="line">                f[cnt].pid = <span class="number">-1</span>;  </div><div class="line"></div><div class="line">                f[cnt].sid = cnt + <span class="number">1</span>;  </div><div class="line"></div><div class="line">                cnt++;  </div><div class="line"></div><div class="line">                f[cnt].v = b;  </div><div class="line"></div><div class="line">                f[cnt].pid = cnt<span class="number">-1</span>;  </div><div class="line"></div><div class="line">                f[cnt].sid = <span class="number">-1</span>;  </div><div class="line"></div><div class="line">                cnt++;  </div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line"></div><div class="line">                f[cnt].v = b;  </div><div class="line"></div><div class="line">                f[cnt].pid = j;  </div><div class="line"></div><div class="line">                f[j].sid = cnt;  </div><div class="line"></div><div class="line">                f[cnt].sid = <span class="number">-1</span>;  </div><div class="line"></div><div class="line">                cnt++;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line"></div><div class="line"><span class="comment">//      for(int i = 0 ; i &lt; cnt ;i++)  </span></div><div class="line"></div><div class="line"><span class="comment">//      &#123;  </span></div><div class="line"></div><div class="line"><span class="comment">//          f[i].output();  </span></div><div class="line"></div><div class="line"><span class="comment">//      &#125;  </span></div><div class="line"></div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;  </div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; cnt;i++)  </div><div class="line"></div><div class="line">        &#123;  </div><div class="line"></div><div class="line">            <span class="keyword">if</span>(f[i].pid == <span class="number">-1</span>)  </div><div class="line"></div><div class="line">            &#123;  </div><div class="line"></div><div class="line">                ans++;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; cnt;i++)  </div><div class="line"></div><div class="line">        &#123;  </div><div class="line"></div><div class="line">            <span class="keyword">if</span>(f[i].pid == <span class="number">-1</span>)  </div><div class="line"></div><div class="line">            &#123;  </div><div class="line"></div><div class="line">                <span class="keyword">int</span> si = f[i].sid;  </div><div class="line"></div><div class="line">                <span class="keyword">int</span> pi ;  </div><div class="line"></div><div class="line">                <span class="keyword">while</span>(si!=<span class="number">-1</span>)  </div><div class="line"></div><div class="line">                &#123;  </div><div class="line"></div><div class="line">                    pi = si;  </div><div class="line"></div><div class="line">                    si = f[si].sid;  </div><div class="line"></div><div class="line">                &#125;  </div><div class="line"></div><div class="line">                <span class="built_in">cout</span>&lt;&lt;f[i].v&lt;&lt;<span class="string">" "</span>&lt;&lt;f[pi].v&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        &#125;         </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2014 Facebook Hacker Cup 资格赛 第二题 二进制模拟]]></title>
      <url>http://blog.jetmuffin.com/2015/01/14/2014-Facebook-Hacker-Cup-qualification-B/</url>
      <content type="html"><![CDATA[<p>Facebook Hacker Cup资格赛的第二题，题目的意思问，给定的三个指标Ga,Gb,Gc，给定最多20种食物，能否任意组合刚刚好达到该指标。</p>
<p>范围不是很大，20的话怎么搞都行，于是敲了一个二进制模拟去枚举。。过了</p>
<p>思路类似容斥原理里的枚举因子，例如 i = 3 = ‘011’ 即选中第一个和第二个。</p>
<a id="more"></a>
<p>代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;  </div><div class="line">#include &lt;cstdio&gt;  </div><div class="line">#include &lt;cstring&gt;  </div><div class="line">#include &lt;string&gt;  </div><div class="line">#include &lt;algorithm&gt;  </div><div class="line">#include &lt;cmath&gt;  </div><div class="line">#include &lt;vector&gt;  </div><div class="line">#include &lt;map&gt;  </div><div class="line">#include &lt;queue&gt;  </div><div class="line">#include &lt;ctime&gt;  </div><div class="line">using namespace std;  </div><div class="line">#define LL long long  </div><div class="line">#define ULL unsigned long long  </div><div class="line">//#define mod 1000000007  </div><div class="line">#define eps 1e-8  </div><div class="line">#define MP make_pair  </div><div class="line">#define REP(i,a,b) for(int i = a; i &lt; b; ++i)  </div><div class="line">#define RREP(i,a,b) for(int i = b; i &gt; a ; --i)  </div><div class="line">#define RE freopen("in.txt","r",stdin)  </div><div class="line">//#define WE freopen("out.txt","w",stdout)   </div><div class="line"></div><div class="line">struct node &#123;  </div><div class="line">    int a,b,c;  </div><div class="line">    void output()&#123;  </div><div class="line">        cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;" "&lt;&lt;c&lt;&lt;endl;  </div><div class="line">    &#125;  </div><div class="line">&#125;;   </div><div class="line"></div><div class="line">node g;  </div><div class="line">node f[21];  </div><div class="line">int cnt = 0;  </div><div class="line"></div><div class="line">int solve(int count)&#123;    </div><div class="line">    for(int i = 1; i &lt; (int)1&lt;&lt;count; i++)&#123;    </div><div class="line">        int a,b,c;  </div><div class="line">        a=b=c=0;    </div><div class="line">        for(int j = 0; j &lt; count; j++)&#123;    </div><div class="line">            if(i &amp; (1&lt;&lt;j))&#123;    </div><div class="line">                a += f[j].a;  </div><div class="line">                b += f[j].b;  </div><div class="line">                c += f[j].c;  </div><div class="line">            &#125;    </div><div class="line">            if(a==g.a&amp;&amp;b==g.b&amp;&amp;c==g.c) return 1;  </div><div class="line">            else if(a&gt;g.a||b&gt;g.b||c&gt;g.c) break;  </div><div class="line">        &#125;    </div><div class="line">    &#125;    </div><div class="line">    return 0;  </div><div class="line">&#125;    </div><div class="line"></div><div class="line">int main() &#123;  </div><div class="line">    freopen("in.txt","r",stdin);  </div><div class="line">    int T;  </div><div class="line">    cin&gt;&gt;T;  </div><div class="line">    while(T--) &#123;  </div><div class="line">        cnt++;  </div><div class="line">        int n;  </div><div class="line">        scanf("%d%d%d",&amp;g.a,&amp;g.b,&amp;g.c);  </div><div class="line">        scanf("%d",&amp;n);  </div><div class="line">        for(int i = 0 ; i &lt; n;i++) &#123;</div><div class="line">            scanf("%d%d%d",&amp;f[i].a,&amp;f[i].b,&amp;f[i].c);  </div><div class="line">        &#125;  </div><div class="line">        int flag = 0;  </div><div class="line">        flag = solve(n);  </div><div class="line">        if(flag)  </div><div class="line">            cout&lt;&lt;"Case #"&lt;&lt;cnt&lt;&lt;": yes"&lt;&lt;endl;  </div><div class="line">        else  </div><div class="line">            cout&lt;&lt;"Case #"&lt;&lt;cnt&lt;&lt;": no"&lt;&lt;endl;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5124 BestCoder #20 1002 lines 解题报告]]></title>
      <url>http://blog.jetmuffin.com/2014/11/30/hdu-5124-BestCoder-20-1002-lines-solution/</url>
      <content type="html"><![CDATA[<p>这道题和以前做过的一道很像，然后哗啦哗啦就敲了提交了，然后pretest pass了 ，交了以后发现有问题，我的方法只是对一维数组进行标记然后扫描一遍，但是对于1e9的数据不仅爆数组又会T。想了一会儿怎么改进，最后还是卡这了。</p>
<p>赛后想了想，做一个简单的映射就行了，在原来的数组上相当于再加一层数组，对当前数组的index也就是上层数组的value进行标记扫描，就好过了。。。</p>
<p>将线段的x和y都放在一个数组v里，然后对2*n大小的v数组排序，然后对于每一个x，二分查找v数组的lower_bound，然后标记++，对于每一个y,二分查找v数组的lower_bound，然后标记–，最后扫描一遍OK了。。</p>
<a id="more"></a>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[maxn],b[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[maxn * <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> v[maxn * <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">   freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> T;</div><div class="line"></div><div class="line">    <span class="built_in">cin</span>&gt;&gt;T;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(T--)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> n;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));</div><div class="line"></div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;n ; i++)</div><div class="line"></div><div class="line">        &#123;</div><div class="line"></div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i],&amp;b[i]);</div><div class="line"></div><div class="line">            f[i] = a[i];</div><div class="line"></div><div class="line">            f[i+n] = b[i];</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sort(f,f+n*<span class="number">2</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</div><div class="line"></div><div class="line">        &#123;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> aa = lower_bound(f, f+<span class="number">2</span>*n,a[i])-f;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> bb = lower_bound(f, f+<span class="number">2</span>*n, b[i])-f;</div><div class="line"></div><div class="line">                v[aa]++;</div><div class="line"></div><div class="line">                v[bb+<span class="number">1</span>]--;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>,ans= <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n*<span class="number">2</span>;i++)</div><div class="line"></div><div class="line">        &#123;</div><div class="line"></div><div class="line">            tmp += v[i];</div><div class="line"></div><div class="line">            ans = max(ans,tmp);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://blog.jetmuffin.com/2014/11/28/hdu-5072-Coprime-2014-anshan-reigion-C/</url>
      <content type="html"><![CDATA[<p>鞍山赛区比赛的时候这题没有任何思路，比赛结束后clj提到了单色三角，后来在做白书的训练指南时候看到了这点，然后就把这题写一写。</p>
<p>用到的几个知识点：</p>
<ol>
<li><p>单色三角</p>
<p> 平面中n个点没有三点共线，每两个点染白边或者染黑边，求单色三角形的数量。</p>
<p> 事实上只要求非单色三角形，因为一个公共点的两条异色边总是唯一且对应一个非单色三角形，因此第i个点连接了a条白边，n-1-a条黑边，这些边属于a<em>(n-1-a)个非单色三角形，因此答案是C(3,n)-sigma(ai</em>(n-1-ai))。</p>
</li>
<li><p>容斥原理</p>
<p> 这里用的容斥原理和hdu4135的题目相似。即求1-n中有多少个数与k互质。</p>
<p> 求法就是将k分解质因数，然后对于其质因数的每一个组合，求多少个数可以被整除，最后用容斥原理相加可得不互质的数量，也就能得到答案了。</p>
 <a id="more"></a>
<p> 如n=20,k=30。质因数为2,3,5，所以依次求20/2,20/3,20/5,20/6,20/10,20/15,20/35，用到偶数个因数为减，奇数个加。</p>
</li>
<li><p>打素数表</p>
<p> 这个就不用提了，作用是用来分解质因数。</p>
</li>
<li><p>提前处理</p>
<p> 这一点比较重要，因为是要算这n个不同的数中与x互质的数。所以事先处理这些数中与（1-100000）中数不互质的数的个数。num[i]表示数列中，能被i整除的数的个数。</p>
</li>
</ol>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// #define LL __int64</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> LL INF = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="keyword">int</span> prime[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> factor[maxn][<span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPrime</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="built_in">memset</span>(prime,<span class="number">0</span>,<span class="keyword">sizeof</span>(prime));</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=maxn; i++)</div><div class="line"></div><div class="line">	&#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(!prime[i]) prime[++prime[<span class="number">0</span>]]=i;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=prime[<span class="number">0</span>]&amp;&amp;prime[j]&lt;=maxn/i; j++)</div><div class="line"></div><div class="line">		&#123;</div><div class="line"></div><div class="line">			prime[prime[j] * i] =<span class="number">1</span>;</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(i%prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getFactor</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> tmp = val;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= prime[<span class="number">0</span>] &amp;&amp;prime[i]* prime[i] &lt;= tmp; i++)</div><div class="line"></div><div class="line">	&#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(tmp % prime[i] == <span class="number">0</span>)</div><div class="line"></div><div class="line">		&#123;</div><div class="line"></div><div class="line">			factor[pos][cnt[pos]++] = prime[i];</div><div class="line"></div><div class="line">			<span class="keyword">while</span>(tmp % prime[i] == <span class="number">0</span>)</div><div class="line"></div><div class="line">				tmp /= prime[i];</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(tmp == <span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(tmp &gt; <span class="number">1</span>)</div><div class="line"></div><div class="line">		factor[pos][cnt[pos]++] = tmp;</div><div class="line"></div><div class="line">	<span class="comment">// cout&lt;&lt;val&lt;&lt;": ";</span></div><div class="line"></div><div class="line">	<span class="comment">// for(int i = 0;i&lt;cnt[pos];i++)&#123;</span></div><div class="line"></div><div class="line">	<span class="comment">// 	cout&lt;&lt;factor[pos][i]&lt;&lt;" ";</span></div><div class="line"></div><div class="line">	<span class="comment">// &#125;</span></div><div class="line"></div><div class="line">	<span class="comment">// cout&lt;&lt;endl;</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">2</span>; i&lt;<span class="number">100000</span>; i++)</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j= i+i;j &lt; <span class="number">100000</span>; j+=i)</div><div class="line"></div><div class="line">		&#123;</div><div class="line"></div><div class="line">			num[i] += num[j]; </div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//	freopen("data2","r",stdin);</span></div><div class="line"></div><div class="line">	getPrime();</div><div class="line"></div><div class="line">	<span class="keyword">int</span> T;</div><div class="line"></div><div class="line">	<span class="built_in">cin</span>&gt;&gt;T;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(T--)&#123;</div><div class="line"></div><div class="line">		<span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));	</div><div class="line"></div><div class="line">		<span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</div><div class="line"></div><div class="line">		<span class="keyword">int</span> n;</div><div class="line"></div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line"></div><div class="line">		&#123;</div><div class="line"></div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line"></div><div class="line">			num[a[i]]++;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		init();</div><div class="line"></div><div class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line"></div><div class="line">		&#123;</div><div class="line"></div><div class="line">			getFactor(a[i],i);</div><div class="line"></div><div class="line">			<span class="keyword">int</span> ansNow = <span class="number">0</span>;</div><div class="line"></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">1</span>&lt;&lt;cnt[i]; j++)</div><div class="line"></div><div class="line">			&#123;</div><div class="line"></div><div class="line">				<span class="keyword">int</span> flag = <span class="number">0</span>, tmp = <span class="number">1</span>;</div><div class="line"></div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cnt[i]; k++)</div><div class="line"></div><div class="line">				&#123;</div><div class="line"></div><div class="line">					<span class="keyword">if</span>(j&amp;(<span class="number">1</span>&lt;&lt;k))</div><div class="line"></div><div class="line">					&#123;</div><div class="line"></div><div class="line">						flag ++;</div><div class="line"></div><div class="line">						tmp *= factor[i][k];</div><div class="line"></div><div class="line">					&#125;</div><div class="line"></div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">if</span>(flag &amp;<span class="number">1</span>)</div><div class="line"></div><div class="line">					ansNow += num[tmp] <span class="number">-1</span>;</div><div class="line"></div><div class="line">				<span class="keyword">else</span></div><div class="line"></div><div class="line">					ansNow -= num[tmp] <span class="number">-1</span>;</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">			ans += ansNow*(n<span class="number">-1</span>-ansNow);</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ans = n*(n<span class="number">-1</span>)*(n<span class="number">-2</span>)/<span class="number">6</span>-ans/<span class="number">2</span>;</div><div class="line"></div><div class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 4135 Co-prime 容斥原理]]></title>
      <url>http://blog.jetmuffin.com/2014/11/28/hdu-4135-Co-prime/</url>
      <content type="html"><![CDATA[<p><span style="white-space:pre"></span>最近在看容斥原理的题目，这道题目是很典型的。</p>
<p><span style="white-space:pre"></span>题目要求求[L,R]区间内与k互斥的数有多少个。</p>
<p><span style="white-space:pre"></span>可以用容斥原理求[1,R]中与k互斥的个数，再减去[1,L-1]中与k互斥的个数。</p>
<p><span style="white-space:pre"></span>容斥原求[1,n]中与k互斥的数的思路是：对于k，先分解质因数，放在prime[i]里，然后对于每个因数的各个组合，求[1,n]中能被其整除的个数，即n/prime[i]，然后不能直接相加。</p>
<p><span style="white-space:pre"></span>比如说30的因数是2,3,5。求[1,20]中与30互斥的数，先要求20/2,20/3,20/5，然后求20/6,20/10,20/15，最后求20/30。</p>
<p><span style="white-space:pre"></span>由2个因数组成的除数，要减，一个因数组成的，则加。</p>
<p><span style="white-space:pre"></span>再讲怎么取到这每一个组合。用位运算表示最方便了。如i=3用011表示，就是要取prime[0]，prime[1]。</p>
<p><span style="white-space:pre"></span>因此只要循环i := 1 -&gt; 2^cnt (因数个数) ，j := 0 -&gt; cnt -1 ，若 (1&lt;&lt;(j+1)) &amp; 1 不为0，则要取到该数。如i = 3,要取到prime[0]和prime[1]，1&lt;&lt;1 = “ 001”， 1&lt;&lt;2 = “010”，则符合。</p>
<p><span style="white-space:pre"></span>最后说一下题目里的坑，因为a,b，n都是long long 范围，所以循环变量i需要也为long long ，且函数返回也为long long ，prime[]数组也是long long ，总之精度不能有错。</p>
<p><span style="white-space:pre"></span>然后是long long 的问题，hdoj long long 用%lld居然会WA，然后卡了我好几次，最后改为%I64d过了。。</p>
<a id="more"></a>
<p>代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">#include &lt;cstdio&gt;</div><div class="line"></div><div class="line">#include &lt;cstring&gt;</div><div class="line"></div><div class="line">#include &lt;string&gt;</div><div class="line"></div><div class="line">#include &lt;algorithm&gt;</div><div class="line"></div><div class="line">#include &lt;cmath&gt;</div><div class="line"></div><div class="line">#include &lt;vector&gt;</div><div class="line"></div><div class="line">#include &lt;map&gt;</div><div class="line"></div><div class="line">#include &lt;queue&gt;</div><div class="line"></div><div class="line">#include &lt;ctime&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">#define LL long long</div><div class="line"></div><div class="line">#define ULL unsigned long long</div><div class="line"></div><div class="line">//#define mod 1000000007</div><div class="line"></div><div class="line">#define eps 1e-8</div><div class="line"></div><div class="line">#define MP make_pair</div><div class="line"></div><div class="line">#define REP(i,a,b) for(int i = a; i &lt; b; ++i)</div><div class="line"></div><div class="line">#define RREP(i,a,b) for(int i = b; i &gt; a ; --i)</div><div class="line"></div><div class="line">#define RE freopen("in.txt","r",stdin)</div><div class="line"></div><div class="line">//#define WE freopen("out.txt","w",stdout) </div><div class="line"></div><div class="line">const int maxn = 70;</div><div class="line"></div><div class="line">LL prime[maxn];</div><div class="line"></div><div class="line">LL a,b,n;</div><div class="line"></div><div class="line">int cnt;</div><div class="line"></div><div class="line">int t = 0;</div><div class="line"></div><div class="line">LL solve(LL num)&#123;</div><div class="line"></div><div class="line">	LL ans = 0;</div><div class="line"></div><div class="line">	for(LL i = 1; i &lt; (LL)1&lt;&lt;cnt; i++)&#123;</div><div class="line"></div><div class="line">		LL flag = 0, tmp = 1;</div><div class="line"></div><div class="line">		for(LL j = 0; j &lt; cnt; j++)&#123;</div><div class="line"></div><div class="line">			if(i &amp; (1&lt;&lt;j))&#123;</div><div class="line"></div><div class="line">				tmp *= prime[j];</div><div class="line"></div><div class="line">				flag ++; </div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		if(flag &amp; 1)&#123;</div><div class="line"></div><div class="line">			ans += num/tmp;</div><div class="line"></div><div class="line">		&#125; else&#123;		</div><div class="line"></div><div class="line">			ans -= num/tmp;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	return num - ans;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	int T;</div><div class="line"></div><div class="line">	cin&gt;&gt;T;</div><div class="line"></div><div class="line">	while(T--)&#123;</div><div class="line"></div><div class="line">		t++;</div><div class="line"></div><div class="line">		scanf("%I64d%I64d%I64d",&amp;a,&amp;b,&amp;n);</div><div class="line"></div><div class="line">		cnt = 0;</div><div class="line"></div><div class="line">		for(LL i = 2; i*i &lt;= n;i++)&#123;</div><div class="line"></div><div class="line">			if(n&amp;&amp;n%i == 0)&#123;</div><div class="line"></div><div class="line">				prime[cnt++] = i;</div><div class="line"></div><div class="line">					while(n&amp;&amp;n%i == 0)&#123;</div><div class="line"></div><div class="line">					n /= i;</div><div class="line"></div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		if(n &gt; 1)&#123;</div><div class="line"></div><div class="line">			prime[cnt++] = n;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		printf("Case #%d: %I64d\n",t,solve(b)-solve(a-1));	</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	return 0;	</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Codeforces #279 A Team Olympiad 瞎搞]]></title>
      <url>http://blog.jetmuffin.com/2014/11/25/codeforces-279-A-Team-Olympiad/</url>
      <content type="html"><![CDATA[<p><span style="white-space:pre"></span>难得一场CF在下午5点打，果断参加，涨了100多分～</p>
<p><span style="white-space:pre"></span>A题比较水，说的是n个学生，分别擅长体育，数学， 编程，要求把他们分成几组，每组里必须有会编程，会体育，会数学的各一人，求最多分多少组。</p>
<p><span style="white-space:pre"></span>其实就是将三类学生分类，找到人数最少的一类，瞎搞搞就过了。</p>
<a id="more"></a>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5001</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> b[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ax = <span class="number">0</span>, bx = <span class="number">0</span>, cx = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> tmp;</div><div class="line"></div><div class="line">        <span class="built_in">cin</span>&gt;&gt;tmp;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(tmp == <span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">            a[ax++] = i;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(tmp == <span class="number">2</span>)&#123;</div><div class="line"></div><div class="line">            b[bx++] = i;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(tmp == <span class="number">3</span>)&#123;</div><div class="line"></div><div class="line">            c[cx++] = i;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(ax==<span class="number">0</span>||bx==<span class="number">0</span>||cx==<span class="number">0</span>)&#123;</div><div class="line"></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"></div><div class="line">    ans = min(ax,bx);</div><div class="line"></div><div class="line">    ans = min(ans,cx);</div><div class="line"></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans; i++)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;b[i]+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;c[i]+<span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5105 Math Problem BestCoder#18 1002 求最大值]]></title>
      <url>http://blog.jetmuffin.com/2014/11/19/hdu-5105-Math-Problem-BestCoder-18-1002-solution/</url>
      <content type="html"><![CDATA[<p><span style="white-space:pre"></span>f(x) = ax^3+bx^2+cx+d，最大&#20540;只会出现在几个地方：左端点，右端点，极&#20540;点。</p>
<p><span style="white-space:pre"></span>求导后是个二次函数，可以求根，然后判断根是否在(L,R)范围内，若在范围内，直接求max(f(x),f(L),f(R))就是最大&#20540;了。</p>
<p><span style="white-space:pre"></span>PS：要考虑a=0，b=0的情况，WA了一次ORZ</p>
<a id="more"></a>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">#include &lt;cstdio&gt;</div><div class="line"></div><div class="line">#include &lt;cstring&gt;</div><div class="line"></div><div class="line">#include &lt;string&gt;</div><div class="line"></div><div class="line">#include &lt;algorithm&gt;</div><div class="line"></div><div class="line">#include &lt;cmath&gt;</div><div class="line"></div><div class="line">#include &lt;vector&gt;</div><div class="line"></div><div class="line">#include &lt;map&gt;</div><div class="line"></div><div class="line">#include &lt;queue&gt;</div><div class="line"></div><div class="line">#include &lt;ctime&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">#define LL long long</div><div class="line"></div><div class="line">#define ULL unsigned long long</div><div class="line"></div><div class="line">//#define mod 1000000007</div><div class="line"></div><div class="line">#define eps 1e-8</div><div class="line"></div><div class="line">#define MP make_pair</div><div class="line"></div><div class="line">#define REP(i,a,b) for(int i = a; i &lt; b; ++i)</div><div class="line"></div><div class="line">#define RREP(i,a,b) for(int i = b; i &gt; a ; --i)</div><div class="line"></div><div class="line">#define RE freopen("in.txt","r",stdin)</div><div class="line"></div><div class="line">//#define WE freopen("out.txt","w",stdout) </div><div class="line"></div><div class="line">const double INF = 99999;</div><div class="line"></div><div class="line">double a,b,c,d,L,R;</div><div class="line"></div><div class="line">double max(double a,double b)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	return a&gt;b?a:b;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">double fun(double x)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	return fabs(a*x*x*x+b*x*x+c*x+d);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	while(~scanf("%lf %lf %lf %lf %lf %lf",&amp;a,&amp;b,&amp;c,&amp;d,&amp;L,&amp;R))</div><div class="line"></div><div class="line">	&#123;</div><div class="line"></div><div class="line">		double ans;</div><div class="line"></div><div class="line">		double left = fun(L);</div><div class="line"></div><div class="line">		double right = fun(R);</div><div class="line"></div><div class="line">		double sans = max(left,right);</div><div class="line"></div><div class="line">		if(a==0)</div><div class="line"></div><div class="line">		&#123;</div><div class="line"></div><div class="line">			if(b == 0)&#123;</div><div class="line"></div><div class="line">				ans = sans;</div><div class="line"></div><div class="line">			&#125;else&#123;</div><div class="line"></div><div class="line">				double x = -c/(2*b);</div><div class="line"></div><div class="line">				if(x&lt;=R&amp;&amp;x&gt;=L)</div><div class="line"></div><div class="line">					ans = fun(x);</div><div class="line"></div><div class="line">				else </div><div class="line"></div><div class="line">					ans = 0;</div><div class="line"></div><div class="line">				ans = max(ans,sans);				</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		else&#123;</div><div class="line"></div><div class="line">			double deta = 4*b*b - 12*a*c;</div><div class="line"></div><div class="line">			if(deta &lt; 0)&#123;</div><div class="line"></div><div class="line">				ans = 0;</div><div class="line"></div><div class="line">				ans = max(ans,sans);</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">			else&#123;</div><div class="line"></div><div class="line">				double x1 = (sqrt(deta)-2*b)/(6*a);</div><div class="line"></div><div class="line">				double x2 = (-sqrt(deta)-2*b)/(6*a);</div><div class="line"></div><div class="line">				double k1,k2;</div><div class="line"></div><div class="line">				if(x1&lt;=R&amp;&amp;x1&gt;=L)</div><div class="line"></div><div class="line">					k1 = fun(x1);</div><div class="line"></div><div class="line">				else</div><div class="line"></div><div class="line">					k1 = 0;</div><div class="line"></div><div class="line">				if(x2&lt;=R&amp;&amp;x2&gt;=L)</div><div class="line"></div><div class="line">					k2 = fun(x2);</div><div class="line"></div><div class="line">				else</div><div class="line"></div><div class="line">					k2 = 0;	</div><div class="line"></div><div class="line">				ans = max(k1,k2);</div><div class="line"></div><div class="line">				ans = max(ans,sans);</div><div class="line"></div><div class="line">			&#125;					</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		printf("%.2lf\n",ans);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDU 5104 BestCoder #18 1001 Primes Problem 水题]]></title>
      <url>http://blog.jetmuffin.com/2014/11/19/hdu-5104-Primes-Problem/</url>
      <content type="html"><![CDATA[<p><span style="white-space:pre"></span>题意为对于每个n，求有多少种组合(a,b,c),a&lt;=b&lt;=c，a、b、c都是素数</p>
<p><span style="white-space:pre"></span>事先打个1-10000的素数表，然后穷举a和b判断c是否为素数即可</p>
<a id="more"></a>
<p><span style="white-space:pre"></span>代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">#include &lt;cstdio&gt;</div><div class="line"></div><div class="line">#include &lt;cstring&gt;</div><div class="line"></div><div class="line">#include &lt;string&gt;</div><div class="line"></div><div class="line">#include &lt;algorithm&gt;</div><div class="line"></div><div class="line">#include &lt;cmath&gt;</div><div class="line"></div><div class="line">#include &lt;vector&gt;</div><div class="line"></div><div class="line">#include &lt;map&gt;</div><div class="line"></div><div class="line">#include &lt;queue&gt;</div><div class="line"></div><div class="line">#include &lt;ctime&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">#define LL long long</div><div class="line"></div><div class="line">#define ULL unsigned long long</div><div class="line"></div><div class="line">//#define mod 1000000007</div><div class="line"></div><div class="line">#define eps 1e-8</div><div class="line"></div><div class="line">#define MP make_pair</div><div class="line"></div><div class="line">#define REP(i,a,b) for(int i = a; i &lt; b; ++i)</div><div class="line"></div><div class="line">#define RREP(i,a,b) for(int i = b; i &gt; a ; --i)</div><div class="line"></div><div class="line">#define RE freopen("in.txt","r",stdin)</div><div class="line"></div><div class="line">//#define WE freopen("out.txt","w",stdout) </div><div class="line"></div><div class="line">const int maxn = 10000;</div><div class="line"></div><div class="line">int notprime[maxn+1];</div><div class="line"></div><div class="line">int prime[maxn+1];</div><div class="line"></div><div class="line">int cnt = 0; </div><div class="line"></div><div class="line">void init()</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    memset(notprime,0,sizeof(prime));</div><div class="line"></div><div class="line">    notprime[0] = notprime[1] = true;</div><div class="line"></div><div class="line">    for(int i = 2; i &lt; maxn; i++)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        if(!notprime[i])</div><div class="line"></div><div class="line">        &#123;</div><div class="line"></div><div class="line">            if(i &gt; maxn / i) continue;</div><div class="line"></div><div class="line">            for(int j = i * i; j &lt; maxn; j+=i)</div><div class="line"></div><div class="line">                notprime[j] = 1;</div><div class="line"></div><div class="line">        &#125; </div><div class="line"></div><div class="line">    &#125; </div><div class="line"></div><div class="line">&#125; </div><div class="line"></div><div class="line">void getPrime()</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    for(int i = 2; i &lt; maxn; i++)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        if(!notprime[i])</div><div class="line"></div><div class="line">        &#123;</div><div class="line"></div><div class="line">            prime[cnt++] = i;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; </div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    init();</div><div class="line"></div><div class="line">    getPrime();</div><div class="line"></div><div class="line">    int n;</div><div class="line"></div><div class="line">    while(cin&gt;&gt;n)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        int ans = 0;</div><div class="line"></div><div class="line">        for(int i = 0;prime[i] &lt;= n / 3;i++)</div><div class="line"></div><div class="line">            for(int j = i ;n-prime[i]-prime[j]&gt;=prime[j];j++)</div><div class="line"></div><div class="line">            &#123;</div><div class="line"></div><div class="line">                int tmp = n - prime[i] - prime[j];</div><div class="line"></div><div class="line">                if(!notprime[tmp])</div><div class="line"></div><div class="line">                &#123;</div><div class="line"></div><div class="line">                    ans++;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        cout&lt;&lt;ans&lt;&lt;endl;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx 配置图片缓存服务器，nginx.conf的配置]]></title>
      <url>http://blog.jetmuffin.com/2014/11/19/use-nginx-to-configurate-a-picture-cache-server/</url>
      <content type="html"><![CDATA[<p><span style="white-space:pre"></span>最近在搞云计算，弄了一个图片缓存服务器服务器，搭了一阵子，做个笔记。</p>
<p><span style="white-space:pre"></span>教程转自<span style="font-family:Helvetica,Tahoma,Arial,sans-serif; line-height:18px; text-align:center"><strong>Hermit_Macx，</strong></span><span style="font-family:Helvetica,Tahoma,Arial,sans-serif; line-height:18px; text-align:center">感谢作者，地址<a href="http://hermit-macx.iteye.com/blog/1697375" target="_blank" rel="external">http://hermit-macx.iteye.com/blog/1697375</a></span></p>
<p><span style="white-space:pre"></span>PS：proxy_cache_purge 需要另外下载包，不然报错，先注释了把</p>
<a id="more"></a>
<p><span style="white-space:pre"></span>nginx.conf:</p>
<p><span style="white-space:pre"></span><pre name="code" class="delphi">user  had;<br>worker_processes  8;  </pre></p>
<p>error_log  /usr/local/nginx/nginx8011/logs/error.log crit;  </p>
<p>pid  /usr/local/nginx/nginx8011/logs/nginx.pid;  </p>
<p>events {<br>    use epoll;<br>    worker_connections  65535;<br>}  </p>
<p>http {<br>    include       mime.types;<br>    default_type  application/octet-stream;  </p>
<pre><code>charset  utf-8;            
server_names_hash_bucket_size 128;     
client_header_buffer_size 32k;     
large_client_header_buffers 4 32k;     
client_max_body_size 300m;            
sendfile on;     
tcp_nopush     on;  

keepalive_timeout 60;  
tcp_nodelay on;      
client_body_buffer_size  512k;     
proxy_connect_timeout    5;     
proxy_read_timeout       60;     
proxy_send_timeout       5;     
proxy_buffer_size        16k;     
proxy_buffers            4 64k;     
proxy_busy_buffers_size 128k;     
proxy_temp_file_write_size 128k;      

gzip on;     
gzip_min_length  1k;     
gzip_buffers 4 16k;     
gzip_http_version 1.1;     
gzip_comp_level 2;     
gzip_types text/plain application/x-javascript text/css application/xml;     
gzip_vary on;  

#注：images_temp和images_cache指定的路径必须在同一分区  
proxy_temp_path   /usr/local/nginx/nginx8011/html/tmp;  
#设置Web缓存区名称为cache_one，内存缓存空间大小为200MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。  
proxy_cache_path  /usr/local/nginx/nginx8011/html/cache  levels=1:2   keys_zone=cache_one:200m inactive=1d max_size=30g;  

server {  
    listen       80;  
    server_name  localhost;  
    location / {  
            proxy_cache cache_one;  
            #对不同的HTTP状态码设置不同的缓存时间  
            proxy_cache_valid  200 304 12h;  
            #以域名、URI、参数组合成Web缓存的Key值，Nginx根据Key值哈希，存储缓存内容到二级缓存目录内  
            proxy_cache_key $host$uri$is_args$args;  
            proxy_set_header Host  $host;  
            proxy_set_header X-Forwarded-For  $remote_addr;  
            proxy_pass http://localhost:8080;  
        log_format cache &amp;#39;***$time_local &amp;#39;  &amp;#39;***$upstream_cache_status &amp;#39;  &amp;#39;***Cache-Control: $upstream_http_cache_control &amp;#39; &amp;#39;***Expires: $upstream_http_expires &amp;#39; &amp;#39;***&quot;$request&quot; ($status) &amp;#39; &amp;#39;***&quot;$http_user_agent&quot; &amp;#39;;  
        access_log  /usr/local/nginx/nginx8011/logs/cache.log cache;  
            expires      1d;  
            }  

        #用于清除缓存，假设一个URL为http://localhost/test.txt，通过访问http://localhost/purge/test.txt就可以清除该URL的缓存。  
location ~ /purge(/.*) {  
            #设置只允许指定的IP或IP段才可以清除URL缓存。  
        allow       127.0.0.1;  
        allow       192.168.0.0/16;  
        deny    all;  
        #proxy_cache_purge    cache_one   $host$1$is_args$args;  
}   

        #扩展名以.php、.jsp、.cgi结尾的动态应用程序不缓存。  
location ~ .*\.(php|jsp|cgi)?$ {  
            proxy_set_header Host  $host;  
            proxy_set_header X-Forwarded-For  $remote_addr;  
            proxy_pass http://localhost:8080;  
    }  
    access_log  off;  
}  

server{  
listen 8080;   
        server_name localhost;   

    location / {
        root   html;
        index  index.html index.htm;
    }
    access_log off;  
 }  
</code></pre><p>}  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hadoop java api ，HDFS文件操作，便于Web开发的集合]]></title>
      <url>http://blog.jetmuffin.com/2014/11/06/hadoop-java-api-hdfs/</url>
      <content type="html"><![CDATA[<p><span style="white-space:pre"></span>最近在搞一个云计算比赛，要开发HDFS存储云，根据一个博客给的API写了一个完整的JAVA文件集成所有的HDFS文件操作，后期用JSP开发时只要导入这个包就OK了。</p>
<a id="more"></a>
<p><span style="white-space:pre"></span>感谢原作者：<a href="http://www.cnblogs.com/xuqiang/archive/2011/06/03/2042526.html" target="_blank" rel="external">http://www.cnblogs.com/xuqiang/archive/2011/06/03/2042526.html</a></p>
<p><span style="white-space:pre"></span>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.net.URI;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.BlockLocation;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileStatus;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HadoopFileUtil</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line"> * 	HDFS文件访问API</div><div class="line"></div><div class="line"> * 	<span class="doctag">@author</span> Jet-Muffin</div><div class="line"></div><div class="line"> */</div><div class="line"></div><div class="line">	  <span class="keyword">public</span> <span class="keyword">static</span> String hdfsUrl = <span class="string">"hdfs://localhost:9000"</span>;</div><div class="line"></div><div class="line">	  <span class="comment">/**</span></div><div class="line"></div><div class="line">	   * create HDFS folder 创建一个文件夹</div><div class="line"></div><div class="line">	   * <span class="doctag">@param</span> dirPath</div><div class="line"></div><div class="line">	   * <span class="doctag">@return</span></div><div class="line"></div><div class="line">	   */</div><div class="line"></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createDir</span><span class="params">(String dirPath)</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line"></div><div class="line">	       Configuration conf= <span class="keyword">new</span> Configuration();</div><div class="line"></div><div class="line">	       FileSystem hdfs = FileSystem.get(URI.create(hdfsUrl),conf);</div><div class="line"></div><div class="line">	       Path path = <span class="keyword">new</span> Path(dirPath);</div><div class="line"></div><div class="line">	       hdfs.mkdirs(path);</div><div class="line"></div><div class="line">	       hdfs.close();</div><div class="line"></div><div class="line">	    &#125;</div><div class="line"></div><div class="line">	    <span class="comment">/**</span></div><div class="line"></div><div class="line">	     * delete HDFS folder 删除一个文件夹</div><div class="line"></div><div class="line">	     * <span class="doctag">@param</span> dirPath</div><div class="line"></div><div class="line">	     * <span class="doctag">@return</span></div><div class="line"></div><div class="line">	     */</div><div class="line"></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteDir</span><span class="params">(String dirPath)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"></div><div class="line">	        Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line"></div><div class="line">	        FileSystem hdfs = FileSystem.get(URI.create(hdfsUrl),conf); </div><div class="line"></div><div class="line">	        hdfs.delete(<span class="keyword">new</span> Path(dirPath));        </div><div class="line"></div><div class="line">	        hdfs.close();</div><div class="line"></div><div class="line">	    &#125;</div><div class="line"></div><div class="line">	    <span class="comment">/**</span></div><div class="line"></div><div class="line">	     * create a file  创建一个文件</div><div class="line"></div><div class="line">	     * <span class="doctag">@param</span> filePath</div><div class="line"></div><div class="line">	     * <span class="doctag">@return</span></div><div class="line"></div><div class="line">	     */</div><div class="line"></div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createFile</span><span class="params">(String filePath,String content)</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line"></div><div class="line">		      Configuration conf= <span class="keyword">new</span> Configuration();</div><div class="line"></div><div class="line">		      FileSystem hdfs = FileSystem.get(URI.create(hdfsUrl),conf);</div><div class="line"></div><div class="line">		      Path path = <span class="keyword">new</span> Path(filePath);</div><div class="line"></div><div class="line">		      FSDataOutputStream out = hdfs.create(path);</div><div class="line"></div><div class="line">		      out.write(content.getBytes());</div><div class="line"></div><div class="line">		      out.close();</div><div class="line"></div><div class="line">		      hdfs.close();</div><div class="line"></div><div class="line">	    &#125;</div><div class="line"></div><div class="line">	    <span class="comment">/**</span></div><div class="line"></div><div class="line">	     * rename a file 重命名一个文件</div><div class="line"></div><div class="line">	     * <span class="doctag">@param</span> oldPath</div><div class="line"></div><div class="line">	     * <span class="doctag">@param</span> newPath</div><div class="line"></div><div class="line">	     * <span class="doctag">@return</span></div><div class="line"></div><div class="line">	     */</div><div class="line"></div><div class="line">	     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">renameFile</span><span class="params">(String oldPath,String newPath)</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line"></div><div class="line">	       Configuration conf= <span class="keyword">new</span> Configuration();</div><div class="line"></div><div class="line">	       FileSystem hdfs = FileSystem.get(URI.create(hdfsUrl),conf);</div><div class="line"></div><div class="line">	       Path path = <span class="keyword">new</span> Path(oldPath);</div><div class="line"></div><div class="line">	       Path nPath = <span class="keyword">new</span> Path(newPath);</div><div class="line"></div><div class="line">	       hdfs.close();</div><div class="line"></div><div class="line">	       System.out.println(hdfs.rename(path, nPath));</div><div class="line"></div><div class="line">	     &#125;</div><div class="line"></div><div class="line">	     <span class="comment">/**</span></div><div class="line"></div><div class="line">	      * delete a file 删除一个文件</div><div class="line"></div><div class="line">	      * <span class="doctag">@param</span> hadoopFile</div><div class="line"></div><div class="line">	      * <span class="doctag">@return</span> isDeleted</div><div class="line"></div><div class="line">	      */</div><div class="line"></div><div class="line">	     <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteFile</span><span class="params">(String hadoopFile)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"></div><div class="line">	    	 Configuration conf=<span class="keyword">new</span> Configuration();</div><div class="line"></div><div class="line">	    	 FileSystem hdfs = FileSystem.get(URI.create(hdfsUrl),conf);</div><div class="line"></div><div class="line">	    	 Path path = <span class="keyword">new</span> Path(hadoopFile);</div><div class="line"></div><div class="line">	    	 <span class="keyword">boolean</span> isDeleted = hdfs.delete(path);</div><div class="line"></div><div class="line">	    	 hdfs.close();</div><div class="line"></div><div class="line">	    	 <span class="keyword">return</span> isDeleted;</div><div class="line"></div><div class="line">	    &#125;</div><div class="line"></div><div class="line">	     <span class="comment">/**</span></div><div class="line"></div><div class="line">	      * upload a local file 上传文件</div><div class="line"></div><div class="line">	      * <span class="doctag">@param</span> localPath</div><div class="line"></div><div class="line">	      * <span class="doctag">@param</span> hadoopPath</div><div class="line"></div><div class="line">	      * <span class="doctag">@return</span></div><div class="line"></div><div class="line">	      */</div><div class="line"></div><div class="line">	     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uploadLocalFile</span><span class="params">(String localPath,String hadoopPath)</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line"></div><div class="line">	       Configuration conf= <span class="keyword">new</span> Configuration();</div><div class="line"></div><div class="line">	       FileSystem hdfs = FileSystem.get(URI.create(hdfsUrl),conf);</div><div class="line"></div><div class="line">	       Path src = <span class="keyword">new</span> Path(localPath);</div><div class="line"></div><div class="line">	       Path dst = <span class="keyword">new</span> Path(hadoopPath);</div><div class="line"></div><div class="line">	       hdfs.copyFromLocalFile(src, dst);</div><div class="line"></div><div class="line">	       hdfs.close();</div><div class="line"></div><div class="line">	     &#125;</div><div class="line"></div><div class="line">	     <span class="comment">/**</span></div><div class="line"></div><div class="line">	      * 读取文件于字节缓冲数组</div><div class="line"></div><div class="line">	      * <span class="doctag">@param</span> hadoopFile</div><div class="line"></div><div class="line">	      * <span class="doctag">@return</span> buffer</div><div class="line"></div><div class="line">	      */</div><div class="line"></div><div class="line">	     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] readFile(String hadoopFile) <span class="keyword">throws</span> Exception</div><div class="line"></div><div class="line">	     &#123;</div><div class="line"></div><div class="line">	         Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line"></div><div class="line">	         FileSystem hdfs = FileSystem.get(URI.create(hdfsUrl),conf);       </div><div class="line"></div><div class="line">	         Path path = <span class="keyword">new</span> Path(hadoopFile);</div><div class="line"></div><div class="line">	         <span class="keyword">if</span> ( hdfs.exists(path) )</div><div class="line"></div><div class="line">	         &#123;</div><div class="line"></div><div class="line">	             FSDataInputStream in = hdfs.open(path);</div><div class="line"></div><div class="line">	             FileStatus stat = hdfs.getFileStatus(path);       </div><div class="line"></div><div class="line">	             <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[Integer.parseInt(String.valueOf(stat.getLen()))];</div><div class="line"></div><div class="line">	             in.readFully(<span class="number">0</span>, buffer);</div><div class="line"></div><div class="line">	             in.close();</div><div class="line"></div><div class="line">	             hdfs.close();             </div><div class="line"></div><div class="line">	             <span class="keyword">return</span> buffer;</div><div class="line"></div><div class="line">	         &#125;</div><div class="line"></div><div class="line">	         <span class="keyword">else</span></div><div class="line"></div><div class="line">	         &#123;</div><div class="line"></div><div class="line">	             <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"the file is not found ."</span>);</div><div class="line"></div><div class="line">	         &#125;</div><div class="line"></div><div class="line">	     &#125;</div><div class="line"></div><div class="line">	     <span class="comment">/**</span></div><div class="line"></div><div class="line">	      * list files under folder 列出文件夹中所有文件</div><div class="line"></div><div class="line">	      * <span class="doctag">@param</span> hadoopPath</div><div class="line"></div><div class="line">	      * <span class="doctag">@return</span> fileString</div><div class="line"></div><div class="line">	      */</div><div class="line"></div><div class="line">	       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">listFiles</span><span class="params">(String hadoopPath)</span> <span class="keyword">throws</span> Exception</span>&#123; </div><div class="line"></div><div class="line">	               Configuration conf= <span class="keyword">new</span> Configuration();</div><div class="line"></div><div class="line">	               FileSystem hdfs = FileSystem.get(URI.create(hdfsUrl),conf);</div><div class="line"></div><div class="line">	               Path dst = <span class="keyword">new</span> Path(<span class="string">"/test"</span>);</div><div class="line"></div><div class="line">	               FileStatus[] files = hdfs.listStatus(dst);</div><div class="line"></div><div class="line">	               String fileString = <span class="string">""</span>;</div><div class="line"></div><div class="line">	               <span class="keyword">for</span>(FileStatus file: files)&#123;</div><div class="line"></div><div class="line">	            	   System.out.println(file.getPath().toString());</div><div class="line"></div><div class="line">	            	   fileString += file.getPath().toString() + <span class="string">" "</span>;</div><div class="line"></div><div class="line">	               &#125;</div><div class="line"></div><div class="line">	               hdfs.close();</div><div class="line"></div><div class="line">	               <span class="keyword">return</span> fileString;</div><div class="line"></div><div class="line">	       &#125;</div><div class="line"></div><div class="line">	       <span class="comment">/**</span></div><div class="line"></div><div class="line">	        * list block info of file 查找文件所在的数据块</div><div class="line"></div><div class="line">	        * <span class="doctag">@param</span> hadoopPath</div><div class="line"></div><div class="line">	        * <span class="doctag">@return</span> blockString</div><div class="line"></div><div class="line">	        */</div><div class="line"></div><div class="line">	       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getBlockInfo</span><span class="params">(String hadoopPath)</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line"></div><div class="line">	         Configuration conf= <span class="keyword">new</span> Configuration();</div><div class="line"></div><div class="line">	         FileSystem hdfs = FileSystem.get(URI.create(hdfsUrl),conf);</div><div class="line"></div><div class="line">	         Path dst = <span class="keyword">new</span> Path(hadoopPath);</div><div class="line"></div><div class="line">	         FileStatus fileStatus = hdfs.getFileStatus(dst);                                                    </div><div class="line"></div><div class="line">	         BlockLocation[] blkloc=hdfs.getFileBlockLocations(fileStatus,<span class="number">0</span>,fileStatus.getLen()); <span class="comment">//查找文件所在数据块</span></div><div class="line"></div><div class="line">	         String blockString = <span class="string">""</span>;</div><div class="line"></div><div class="line">	         <span class="keyword">for</span>(BlockLocation loc: blkloc)&#123;</div><div class="line"></div><div class="line">	             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; loc.getHosts().length;i++)</div><div class="line"></div><div class="line">	                 System.out.println(loc.getHosts()[i]);</div><div class="line"></div><div class="line">	  <span class="comment">//           	 blockString += loc.getHosts()[i] + " ";</span></div><div class="line"></div><div class="line">	              &#125;</div><div class="line"></div><div class="line">	         hdfs.close();</div><div class="line"></div><div class="line">	         <span class="keyword">return</span> blockString;</div><div class="line"></div><div class="line">	          &#125;</div><div class="line"></div><div class="line">	       <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></div><div class="line"></div><div class="line">	       &#123;</div><div class="line"></div><div class="line">	    	   <span class="comment">//createDir("/test2");</span></div><div class="line"></div><div class="line">	    	   <span class="comment">//deleteDir("/test2");</span></div><div class="line"></div><div class="line">	    	   <span class="comment">//createFile("/test/helloworld.txt");</span></div><div class="line"></div><div class="line">	    	   <span class="comment">//renameFile("/test/a.txt","/test/b.txt");</span></div><div class="line"></div><div class="line">	    	   <span class="comment">//uploadLocalFile("/home/had/in","/test");</span></div><div class="line"></div><div class="line">	    	   <span class="comment">//listFiles("/test");</span></div><div class="line"></div><div class="line">	    	   <span class="comment">//getBlockInfo("/test/b.txt");</span></div><div class="line"></div><div class="line">	    	   <span class="comment">//deleteFile("/test/hellwo.txt");</span></div><div class="line"></div><div class="line">	    	   <span class="comment">/*</span></div><div class="line"></div><div class="line">	    	   byte[] buffer = readFile("/test/in");</div><div class="line"></div><div class="line">	    	   String out = new String(buffer);</div><div class="line"></div><div class="line">	    	   System.out.println(out);</div><div class="line"></div><div class="line">	    	   */</div><div class="line"></div><div class="line">	       &#125;</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最短加法链问题，POJ2248，BFS，搜索]]></title>
      <url>http://blog.jetmuffin.com/2014/10/30/poj-2248-shortest-addition-chain/</url>
      <content type="html"><![CDATA[<p>该题也是算法导论的结课作业，看了一下貌似在POJ上有原题。</p>
<p>宽搜<code>BFS</code>，因为要找到的是最短的加法链，宽搜是最快速的方法。算法的设计上，因为需要保存路径，所以用结构体<code>node（intid,int val, int pre)，保存每个节点，根据</code>pre<code>和</code>id`的映射关系使得路径成为链式，再宽搜路径即可</p>
<a id="more"></a>
<p>核心代码代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</div><div class="line">    q.push(node(<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>));</div><div class="line">    path[cnt++] = node(<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>);</div><div class="line">    node now,next;</div><div class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</div><div class="line">        now = q.front();</div><div class="line">        q.pop();</div><div class="line">        <span class="comment">//now.print();</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = now.id; i!=<span class="number">-1</span>; i = path[i].pre) &#123;</div><div class="line">            <span class="keyword">int</span> tmp = now.val + path[i].val;</div><div class="line">            <span class="keyword">if</span>(tmp == n) &#123;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;countPath(now.id)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">" "</span>;</div><div class="line">                output(now.id);</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(tmp &lt; n) &#123;</div><div class="line">                next = node(cnt, tmp, now.id);</div><div class="line">                path[cnt++] = next;</div><div class="line">                q.push(next);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最少费用购物问题，裸DP，动态规划]]></title>
      <url>http://blog.jetmuffin.com/2014/10/30/least-cost-shopping-dp/</url>
      <content type="html"><![CDATA[<p>算法导论结课题目。</p>
<p>题目很长，大义是给出每个商品的编码和费用，再给出某些商品的组合价，求买了所需商品的最少费用。</p>
<a id="more"></a>
<p>样例输入：</p>
<p>2</p>
<p>7  3  2</p>
<p>8  2  5</p>
<p>2</p>
<p>1  7  3  5</p>
<p>2  7  1  8  2  10</p>
<p>样例输出：</p>
<p>14</p>
<p>样例解释：</p>
<p>第一行2代表有2个商品，之后两行中，第一个数字是商品编码，第二个数字是商品所需购买数量，第三个数字是商品单价。</p>
<p>第二行2代表优惠组合数，第一个数字代表有多少商品的组合，之后每一对数字代表组合的商品的编码和数量，该行最后一个数字代表优惠组合优惠价格。</p>
<p>题目看起来很复杂，读起来更复杂- -。</p>
<p>第一眼看上去很像背包，刚开始试着用多重背包的思想去做，发现二维完全解决不了（因为需要各个商品的数量作为状态）。仔细看发现商品数量最大为5，果断使用普通的裸DP，不过维数较多，有5维，也就意味着有至少5个for循环，蛋疼至极。打算试试状态压缩，发现不好办，最后还是老老实实编码了。</p>
<p>注意点：优惠商品数量不能大于需求数量，同时注意商品编码和输入的i、j的关系要处理好。</p>
<p>PS：写完后雪林哥给了一组数据，我的程序跪了，发现就是商品编码没处理好，ORZ～</p>
<p>分享该数据：</p>
<p>输入：</p>
<p>5</p>
<p>1 1 2</p>
<p>2 1 3</p>
<p>3 1 4 </p>
<p>4 1 5</p>
<p>5 1 6</p>
<p>6</p>
<p>1 2 1 3 </p>
<p>2 1 1 2 1 5</p>
<p>5 1 1 2 1 3 1 4 1 5 1 3</p>
<p>3 1 1 3 1 4 1 1</p>
<p>2 2 1 5 1 1</p>
<p>1 1 1 3</p>
<p>输出：2</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"></div><div class="line"><span class="keyword">int</span> sale[<span class="number">1000</span>][<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;    <span class="comment">//分别表示每个优惠中每个商品数量   </span></div><div class="line"><span class="keyword">int</span> saleprice[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;  <span class="comment">//优惠总价   </span></div><div class="line"><span class="keyword">int</span> salelength[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">//优惠总共有几个商品   </span></div><div class="line"><span class="keyword">int</span> salenumber[<span class="number">1000</span>][<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;   <span class="comment">//优惠商品的ID   </span></div><div class="line"><span class="keyword">int</span> good[<span class="number">6</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;       <span class="comment">//1 -&gt; number   2 -&gt; price  3 -&gt; last num  </span></div><div class="line"><span class="keyword">int</span> num[<span class="number">1000</span>];              <span class="comment">//商品ID   </span></div><div class="line"><span class="keyword">int</span> dp[<span class="number">6</span>][<span class="number">6</span>][<span class="number">6</span>][<span class="number">6</span>][<span class="number">6</span>];    </div><div class="line"><span class="keyword">int</span> n,m;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i  &lt;= n; i++) &#123;  </div><div class="line">        <span class="built_in">cin</span>&gt;&gt;good[i][<span class="number">1</span>]&gt;&gt;good[i][<span class="number">3</span>]&gt;&gt;good[i][<span class="number">2</span>];  </div><div class="line">        num[i] = good[i][<span class="number">1</span>];  </div><div class="line">    &#125;  </div><div class="line">    </div><div class="line">    <span class="built_in">cin</span>&gt;&gt;m;  </div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;  </div><div class="line">        <span class="built_in">cin</span>&gt;&gt;salelength[i];  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= salelength[i]; j++) &#123;  </div><div class="line">            <span class="built_in">cin</span>&gt;&gt;salenumber[i][j];</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;sale[i][salenumber[i][j]];  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">cin</span>&gt;&gt;saleprice[i];  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i  &lt;= n; i++)  </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"goodnum: "</span>&lt;&lt;good[i][<span class="number">1</span>]&lt;&lt;<span class="string">" goodprice: "</span>&lt;&lt;good[i][<span class="number">2</span>]&lt;&lt;<span class="string">" goodlast: "</span>&lt;&lt;good[i][<span class="number">3</span>]&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i  &lt;= m; i++) &#123;  </div><div class="line">        <span class="comment">//cout&lt;&lt;salelength[i]&lt;&lt;endl;  </span></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"sale"</span>&lt;&lt;i&lt;&lt;<span class="string">" : "</span>;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= salelength[i]; j++)  </div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"num: "</span>&lt;&lt;salenumber[i][j]&lt;&lt;<span class="string">" count: "</span>&lt;&lt;sale[i][salenumber[i][j]]&lt;&lt;<span class="string">" "</span>;  </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">" price: "</span>&lt;&lt;saleprice[i]&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//freopen("in2","r",stdin);  </span></div><div class="line">    input();  </div><div class="line">    <span class="comment">// output();  </span></div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= good[<span class="number">1</span>][<span class="number">3</span>]; i++)  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j= <span class="number">0</span>; j &lt;= good[<span class="number">2</span>][<span class="number">3</span>]; j++)  </div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= good[<span class="number">3</span>][<span class="number">3</span>] ;k++)  </div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>; l &lt;= good[<span class="number">4</span>][<span class="number">3</span>]; l++)  </div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>; p &lt;= good[<span class="number">5</span>][<span class="number">3</span>]; p++) &#123;</div><div class="line">                        <span class="keyword">int</span> minx = i * good[<span class="number">1</span>][<span class="number">2</span>] + j * good[<span class="number">2</span>][<span class="number">2</span>] + k * good[<span class="number">3</span>][<span class="number">2</span>] + l * good[<span class="number">4</span>][<span class="number">2</span>] + p * good[<span class="number">5</span>][<span class="number">2</span>];  </div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> q = <span class="number">1</span>; q &lt;= m; q++) &#123;</div><div class="line">                            <span class="keyword">if</span>(i -sale[q][num[<span class="number">1</span>]]&lt;<span class="number">0</span> || i - sale[q][num[<span class="number">2</span>]]&lt;<span class="number">0</span> ||   i-sale[q][num[<span class="number">3</span>]]&lt;<span class="number">0</span> || i-sale[q][num[<span class="number">4</span>]]&lt;<span class="number">0</span> ||i-sale[q][num[<span class="number">5</span>]]&lt;<span class="number">0</span>)</div><div class="line">                                <span class="keyword">continue</span>;  </div><div class="line">                            <span class="keyword">int</span> t = dp[i - sale[q][num[<span class="number">1</span>]]][j - sale[q][num[<span class="number">2</span>]]][k - sale[q][num[<span class="number">3</span>]]][l - sale[q][num[<span class="number">4</span>]]][p - sale[q][num[<span class="number">5</span>]]] + saleprice[q];  </div><div class="line">                            <span class="keyword">if</span>(t &lt; minx) minx = t;  </div><div class="line">                        &#125;</div><div class="line">                        dp[i][j][k][l][p] = minx;  </div><div class="line">                    &#125;  </div><div class="line"></div><div class="line">                    <span class="built_in">cout</span>&lt;&lt;dp[good[<span class="number">1</span>][<span class="number">3</span>]][good[<span class="number">2</span>][<span class="number">3</span>]][good[<span class="number">3</span>][<span class="number">3</span>]][good[<span class="number">4</span>][<span class="number">3</span>]][good[<span class="number">5</span>][<span class="number">3</span>]]&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2014 ACM-ICPC 亚洲地区赛 西安站小结]]></title>
      <url>http://blog.jetmuffin.com/2014/10/28/2014-ACM-ICPC-xian-region-conclusion/</url>
      <content type="html"><![CDATA[<p><span style="white-space:pre"></span>弱菜第二次参加地区赛，继续流水帐记录下。</p>
<p><span style="white-space:pre"></span>西安赛区举办很隆重，西工大校园也是够大，只是长安校区太远，从火车站打的到友谊校区再坐公交到长安校区花了2个多小时ORZ～本来以为赶不上热身赛，结果热身赛是15：30开始，时间很够。</p>
<p><span style="white-space:pre"></span>热身赛1个小时半，4道题。3分钟就看到有人出了D，仔细看是map计数，统计单词出现次数，大小写不区分，输出为大写。以前做过这种题，当时死活想不起怎么用STL里的MAP，无奈先让老范和纪存写其他题先。老范写的C，多边形的面积和周长计算，几何模板套用，打完代码发现有点小问题，接着思考去了。纪存写的A的模拟，是要写一个类&#20284;JAVA中的String to (Integer、Double、String)的模拟，目测坑多，写到一半纪存又思考去了。这时我才有点想起如何用MAP，立即code，打完测试，提交1Y</p>
<ul>
<li><ul>
<li>。交完老范也想到哪儿出问题了，改完提交C，1Y。之后时间不是很多了，我们继续思考A，后来发现A一个队伍都没过，还是果断放弃了。热身赛结束2题排在120左右，铜牌区，还行～</li>
</ul>
</li>
</ul>
<a id="more"></a>
<p><span style="white-space:pre"></span>其间先吐槽下住宿问题，本来以为住宿很高大上，后来发现房间差的很，插座除了电视外只有厕所一个，全部灯只有一个壁灯好的，床单枕头发黄恶心，电视小的可怜。不过除了住宿外，西工大其他都安排的很好～</p>
<p><span style="white-space:pre"></span>第二天正赛，上来我先看的F，纪存K，老范D。几分钟后刷榜有人过了A，开始看A。A题干长的让人想吐，具体是讲的老罗的锤子手机和他的情怀，以及锤子官网访问次数始终是3的倍数的问题被人发现等等等等。最后要求一个“情怀数列”，全文就一句话讲了这东西，就是所有数都是3的倍数。刚要打代码老范提醒hint里提示到数字过小不是情怀什么的，仔细一看貌&#20284;是这样。但是再往下看居然看到一句话，说本题的陈述和提示，全部都是joke，不要太在意- -，实在给跪ORZ～提交1Y，看了下排名110+。</p>
<p><span style="white-space:pre"></span>回来再次看K，K大概讲的是一个无限数列，S1=A，S2=B，此后每个数都是前两个数做差取绝对&#20540;。最后会发现数会循环在某两个数。我简单的打了个代码测试停止的数，发现最后停的都是两个数的最大公约数。这时老范想到了方法，将类别分为A%B==0以及A%B！=0两种，算法类&#20284;gcd，大体是这样的：</p>
<p><span style="white-space:pre"></span></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">while(x%y!=0) &#123;</div><div class="line">    ans += x / y;</div><div class="line">    int z =  x % y;</div><div class="line">    x = y;</div><div class="line">    y = z;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><span style="white-space:pre"></span>最后这种类别的会转化为A%B==0的，ans再加上A/B+1就OK了。要提的一点是题干上貌&#20284;没说A&gt;B，所以要先交换下。</p>
<p><span style="white-space:pre"><span style="white-space:pre"></span>写完提交，发现WA，当时就慌了，忽然发现当A=0或B=0时会出现/0的RE，修改后提交依然WA。这才发现前两次提交交到A题上了ORZ，不过A题已经AC，不算次数，再次提交K的时候1Y，真是运气好。。查看一下排名60左右，很有希望。</span></p>
<p><span style="white-space:pre"><span style="white-space:pre"></span>之后看的F，是个染色问题，纪存写了一个DP，发现时间复杂度过大，空间复杂度也过大。后来又写了个压缩路径，空间复杂度能过，但是依然会TLE。之后我拿纪存的程序检验n m k的数字关系，最后写出一条地推公式，然后写了一个用矩阵加速的矩阵快速幂加打表阶乘，可以用o(log(k)<em>log(n))，但是空间复杂度是o(k</em>k)，最后他们一致认为会爆，就没实现了。</span></p>
<p><span style="white-space:pre"><span style="white-space:pre"></span>我们再次转移 到老范看的I，是个模拟IP的问题，a.b.c.d/e，e是子网掩码。题目给出了部分IP，相当于一些IP区域段，需要我们求这些区域段相对全网的补。我们始终无法搞定算法，最后没办法也放弃了。</span></p>
<p><span style="white-space:pre"><span style="white-space:pre"></span>直到结束都没出第三题。。封榜前是排在107,最后出的结果排在130，拿到了铜牌，还不错，哈哈～</span></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[extjs 解决rowEditing不满足allowBlank时，无法save的问题]]></title>
      <url>http://blog.jetmuffin.com/2014/10/22/solution-to-cannot-save-on-row-editing/</url>
      <content type="html"><![CDATA[<p><span style="white-space:pre"></span>最近一个项目使用了extjs，在用rowEditing的时候遇到了棘手的问题，当某一column的editor使用了属性allowBlank:true时，启用编辑时会报错（“该行不能为空”），这时save按钮是灰色的无法提交。然而填了该行，save仍然无法提交。</p>
<p><span style="white-space:pre"></span>经过google之后发现这是个bug，最好的解决方法就是重写rowEditing~ORZ</p>
<a id="more"></a>
<p>JS如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">Ext.override(Ext.grid.RowEditor, &#123;</div><div class="line"></div><div class="line">    addFieldsForColumn: function(column, initial) &#123;</div><div class="line"></div><div class="line">        var me = this,</div><div class="line"></div><div class="line">        i, length, field;</div><div class="line"></div><div class="line">        if (Ext.isArray(column)) &#123;</div><div class="line"></div><div class="line">            for (i = 0, length = column.length; i &lt; length; i++) &#123;</div><div class="line"></div><div class="line">                me.addFieldsForColumn(column[i], initial);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            return;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (column.getEditor) &#123;</div><div class="line"></div><div class="line">            field = column.getEditor(null, &#123;</div><div class="line"></div><div class="line">                xtype: &amp;#39;displayfield&amp;#39;,</div><div class="line"></div><div class="line">                getModelData: function() &#123;</div><div class="line"></div><div class="line">                    return null;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            if (column.align === &amp;#39;right&amp;#39;) &#123;</div><div class="line"></div><div class="line">                field.fieldStyle = &amp;#39;text-align:right&amp;#39;;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (column.xtype === &amp;#39;actioncolumn&amp;#39;) &#123;</div><div class="line"></div><div class="line">                field.fieldCls += &amp;#39; &amp;#39; + Ext.baseCSSPrefix + &amp;#39;form-action-col-field&amp;#39;;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (me.isVisible() &amp;&amp; me.context) &#123;</div><div class="line"></div><div class="line">                if (field.is(&amp;#39;displayfield&amp;#39;)) &#123;</div><div class="line"></div><div class="line">                    me.renderColumnData(field, me.context.record, column);</div><div class="line"></div><div class="line">                &#125; else &#123;</div><div class="line"></div><div class="line">                    field.suspendEvents();</div><div class="line"></div><div class="line">                    field.setValue(me.context.record.get(column.dataIndex));</div><div class="line"></div><div class="line">                    field.resumeEvents();</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (column.hidden) &#123;</div><div class="line"></div><div class="line">                me.onColumnHide(column);</div><div class="line"></div><div class="line">            &#125; else if (column.rendered &amp;&amp; !initial) &#123;</div><div class="line"></div><div class="line">                me.onColumnShow(column);</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // -- start edit</div><div class="line"></div><div class="line">            me.mon(field, &amp;#39;change&amp;#39;, me.onFieldChange, me);</div><div class="line"></div><div class="line">            // -- end edit</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">//重写RowEditor</div></pre></td></tr></table></figure>
<p>如果大家有遇到该问题的，只要在js文件里添加该段代码即可～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[stl set和map应用记录]]></title>
      <url>http://blog.jetmuffin.com/2014/10/22/usage-of-set-and-map-in-stl/</url>
      <content type="html"><![CDATA[<p><span style="white-space:pre"></span>无聊水题，发现map容器使用的一块儿知识欠缺，就是很水的用map进行计数，赶紧补上。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#include&lt;iostream&gt;</div><div class="line">#include&lt;map&gt;</div><div class="line">using namespace std;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    map&lt;int,int&gt; s;</div><div class="line">    int n;</div><div class="line">    while(scanf(&quot;%d&quot;,&amp;n)&amp;&amp;n)</div><div class="line">    &#123;</div><div class="line">        s.clear();</div><div class="line">        while(n--)</div><div class="line">        &#123;</div><div class="line">            int x;</div><div class="line">            scanf(&quot;%d&quot;,&amp;x);</div><div class="line">            s[x]++;</div><div class="line">        &#125;</div><div class="line">        map&lt;int,int&gt;::iterator i;</div><div class="line">        for(i=s.begin();i!=s.end();i++)</div><div class="line">        &#123;</div><div class="line">        	cout&lt;&lt;i-&gt;first&lt;&lt;&quot; &quot;&lt;&lt;i-&gt;second&lt;&lt;endl;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2014ACM-ICPC 地区赛鞍山站小结]]></title>
      <url>http://blog.jetmuffin.com/2014/10/21/2014-ACM-ICPC-anshan-region-conclusion/</url>
      <content type="html"><![CDATA[<p><span style="white-space:pre"></span>第一次参加ACM地区赛，感受挺深，以下用流水帐的形式记录一下这次的经历。</p>
<p><span style="white-space:pre"></span>从出发开始说起，学校给定的火车票，从南京到鞍山，23小时车程，早上5点从学校出发，也是不容易，上车后发现南航的就在隔壁，压力甚大。报道时没有教练在，都由我们自己处理，有一点印象比较深，当志愿者问我们来自什么学校时，回答“河海大学”让边上天津大学的教练惊讶了一番，不知是学校太不出名还是太弱的原因。。感慨ORZ。主办方辽宁科技大学很周到，一个队伍配了一个志愿者，从开始引导到结束，这点很好～XD。</p>
<p><span style="white-space:pre"></span>第一天下午参加了热身赛，4道题目。一开始场地的交换机出问题了，不能交题不能看scoreboard，而且problem set三人只能有一份，我们只好每人一张开始切题。我开始看的是A题（不记得了），是要计算一个长度最大为28的全排列中符合条件（即任意一个数与前后两个数都互质）。出于范围比较小，全排列范围是28！，我想了一个搜索+剪枝方法，开始打代码，纪存和范仕良在看其他题。码完题测试下速度，发现当数据到达13的规模时时间超过1秒，果断放弃。这时候切出去看了一下scoreboard，发现好多人做出了D（不记得了），然后范仕良和我交流了一下思路，觉得可行，我花了2分钟打完代码，交了，1Y。随后看其他题，一道概率DP，实在太难找出递推公式，无奈放弃。时间过了2小时时看了一下scoreboad发现AC2道的队伍不超过10支，然后我们就开始很随意聊天了XD～比赛结束看了一下排名，97,铜牌最后一名，还是很不错的～</p>
<a id="more"></a>
<p><span style="white-space:pre"></span>吃完晚饭，闲着无聊我们队3人跑到附近的网吧休闲一番～发现有队伍居然在网吧打BC。。给大神跪了OTZ～</p>
<p><span style="white-space:pre"></span>第二天早上正赛，赛前有点紧张，比赛时发现更紧张。开始时我切的是C，纪存看I，范仕良看的K（不记得了）。3分钟左右看一下排名，I有人出了，立马转战I，了解题意后还是由我主打代码，打完后稍微检查一番决定交，结果WA，当时就蒙了，再次审查一遍，认为是sqrt中double的问题，修改再交，依然WA。当时真是整个情绪有点崩溃，毕竟这只是道签到题。再次审查，把该改的地方再完善，依然WA。最后发现错误错在一个平时都不注意的地方。大概是：</p>
<p><span style="white-space:pre"></span></p>
<pre code_snippet_id="490578" snippet_file_name="blog_20141021_1_3526745" name="code" class="cpp">double dis = (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)</pre>

<p>其中x1,x2,y1,y2都是1e5的范围，当时我们一直觉得这样赋&#20540;，计算后的结果范围1e10肯定不会超double，但是居然是这儿出错了，原因是该语句先计算结果后转换精度，而结果爆int了。修改后AC，这时候看一下排行，120+，有些崩溃。</p>
<p><span style="white-space:pre"></span>转战E题，我认为这题只要弄清楚各个情况即可，于是我开始打代码，写完发现测试数据都过不了。这时范仕良已经整理思路，换他来写了一个DP，1Y。</p>
<p><span style="white-space:pre"></span>这时我们看了下排行，110+，而3题的大概只有30队。迅速看完D题，讨论，想出思路时大概50支队伍3题，赛后发现如果这时候1Y很有希望拿铜。</p>
<p><span style="white-space:pre"></span>E题题意大概是有n个点，去掉k个点使得剩下的点方差最小。</p>
<p><span style="white-space:pre"></span>一开始范仕良的思路是：最后得到的一定是个连续的区间，所以枚举各个长度为n-k的区间即可，但是被我和纪存否定了，原因是我们认为对于每次枚举要重新计算方差，整体复杂度为o(n*k)，会超时。之后纪存想出了一个方法，每次删去离重心最远的点，更新重心，复杂度o(n)，讨论后我们都觉得此方法可行，由我打代码，打完交后WA，再次找错误，改精度，依然WA，最后卡题到结束。没能拿到牌都挺郁闷。</p>
<p><span style="white-space:pre"></span>返程的火车上和南理工的同学讨论了下，他们指出了错误。当一堆数据中有一部分密集无效数据和有效数据距离太远时，我们的算法结果是删后的数据重心在有效和无效数据之间，而正确的结果应该是删除无效的数据。之后我随机生成数据进行测试，发现错误所在。</p>
<p><span style="white-space:pre"></span>以下为我们的错误代码：</p>
<p><span style="white-space:pre"></span></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">double</span> p[<span class="number">50005</span>];</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;T;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(T--) &#123;</div><div class="line">        <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p));</div><div class="line">        <span class="keyword">int</span> n,k;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</div><div class="line"></div><div class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;p[i];</div><div class="line">            sum+= p[i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</div><div class="line">        <span class="keyword">double</span> avp = sum/(<span class="keyword">double</span>)n;</div><div class="line">        <span class="keyword">int</span> fst = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> lst = n;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; k; i++) &#123;</div><div class="line">                <span class="keyword">double</span> fstv = avp - p[fst];</div><div class="line">                <span class="keyword">double</span> lstv = p[lst] - avp;</div><div class="line">                <span class="built_in">cout</span> &lt;&lt; p[fst]&lt;&lt;<span class="string">" : "</span>&lt;&lt;fstv &lt;&lt; <span class="string">" "</span>&lt;&lt;p[lst]&lt;&lt;<span class="string">" : "</span>&lt;&lt;lstv&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">if</span>(fstv &gt; lstv) &#123;</div><div class="line">                sum -= p[fst];</div><div class="line">                fst ++;</div><div class="line">                avp = sum/(<span class="keyword">double</span>)(n-i<span class="number">-1</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                sum -= p[lst];</div><div class="line">                lst --;</div><div class="line">                avp = sum/(<span class="keyword">double</span>)(n-i<span class="number">-1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=fst;i&lt;=lst;i++) &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;p[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=fst;i&lt;=lst;i++) &#123;</div><div class="line">            ans += (p[i] - avp)*(p[i] - avp);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><span style="white-space:pre"></span>当该算法碰到如下数据时：</p>
<p><span style="white-space:pre"></span>1</p>
<p>13 4</p>
<p>1 1 1 1 5 6 7 8 9 10 11 12 13</p>
<p>会将10 11 12 13删除得道错误答案90</p>
<p>而正确答案则是删去4个1得到60.</p>
<p>再次思考原范仕良的思路是对的，只要事先处理一下方差公式:</p>
<p>(xi - x平均)^2 = xi^2 + x平均^2 - 2<em>xi</em>x平均</p>
<p>所以方差 = ∑xi^2 + n<em>x平均 - 2</em>∑xi*x平均</p>
<p>事先计算∑xi^2和∑xi，便可以以o(n)扫一遍得出结果。</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span>  </span></div><div class="line"><span class="keyword">double</span> p[<span class="number">50005</span>];  </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> T;  </div><div class="line">    <span class="built_in">cin</span>&gt;&gt;T;  </div><div class="line"></div><div class="line">    <span class="keyword">while</span>(T--) &#123;  </div><div class="line">        <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p));  </div><div class="line">        <span class="keyword">int</span> n,k;  </div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;  </div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)  </div><div class="line">            <span class="built_in">cin</span>&gt;&gt;p[i];  </div><div class="line"></div><div class="line">        <span class="keyword">if</span>(n==k) &#123;  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%.9f\n"</span>,<span class="number">0</span>);   </div><div class="line">            <span class="keyword">continue</span>;      </div><div class="line">        &#125;   </div><div class="line"></div><div class="line">        sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>);  </div><div class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;  </div><div class="line">        <span class="keyword">double</span> sqrsum = <span class="number">0</span>;  </div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n-k;i++) &#123;  </div><div class="line">            sum += p[i];  </div><div class="line">            sqrsum += p[i] * p[i];  </div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        <span class="keyword">double</span> avg  = sum/(<span class="keyword">double</span>) (n-k);  </div><div class="line">        <span class="keyword">double</span> min = sqrsum + (n-k)*avg*avg - <span class="number">2</span>*sum*avg;  </div><div class="line">       <span class="comment">// cout&lt;&lt;sum&lt;&lt;" "&lt;&lt;sqrsum&lt;&lt;" "&lt;&lt;avg&lt;&lt;" "&lt;&lt;min&lt;&lt;endl;  </span></div><div class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;  </div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ;i &lt;= k; i++) &#123;  </div><div class="line">            sum = sum + p[n-k+i] - p[i];  </div><div class="line">            sqrsum = sqrsum + p[n-k+i]*p[n-k+i] - p[i]*p[i];  </div><div class="line">            avg = sum/(<span class="keyword">double</span>) (n-k);  </div><div class="line">            <span class="keyword">double</span> now  = sqrsum + (n-k)*avg*avg - <span class="number">2</span>*sum*avg;  </div><div class="line">              <span class="comment">//     cout&lt;&lt;i&lt;&lt;" "&lt;&lt;sum&lt;&lt;" "&lt;&lt;sqrsum&lt;&lt;" "&lt;&lt;avg&lt;&lt;" "&lt;&lt;min&lt;&lt;endl;  </span></div><div class="line">            <span class="keyword">if</span>(now &lt; min) &#123;  </div><div class="line">                    min = now;  </div><div class="line">                    flag = i;  </div><div class="line">            &#125;</div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>,min);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>鞍山赛区失利，不过没有关系，西安争取拿牌～</p>
<p>最后感谢一下比赛期间一直引导我们的志愿者粘微微（姓很奇怪XD～）</p>
<p>文章流水帐，无所谓啦～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 2080 夹角有多大II]]></title>
      <url>http://blog.jetmuffin.com/2014/10/15/hdu-2080-how-large-is-the-include-angle-II/</url>
      <content type="html"><![CDATA[<p><span style="white-space:pre"></span>这是一题水题，至于为什么放在这儿。。因为要借鉴一下做法。。</p>
<p><span style="white-space:pre"></span>地区赛的时候一道题之中要用到该题的结论，当时的做法是算(x轴-该点与原点连线)，再求其arctan算出角度，取两个角度求差。</p>
<p><span style="white-space:pre"></span>这种做法的弊端就是，如果角度大于90度，大于180度，大于270度，得做相应处理，同时如果某点在坐标轴上也得处理，非常的繁琐。</p>
<p><span style="white-space:pre"></span>今天做到这道水题才发现问题所在，原来直接用余弦定理一步搞定，cosA = (a^2 + b^2 - c^2)/(2<em>a</em>b)，同时也不用处理180度的问题。以后就不会犯这种错了。</p>
<p><span style="white-space:pre"></span>需要提的一点是，x,y都是double，没发现这点用int，WA了数次。。不够细心</p>
<a id="more"></a>
<p><span style="white-space:pre"></span>代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">#include &lt;cstdio&gt;</div><div class="line"></div><div class="line">#include &lt;cstring&gt;</div><div class="line"></div><div class="line">#include &lt;string&gt;</div><div class="line"></div><div class="line">#include &lt;algorithm&gt;</div><div class="line"></div><div class="line">#include &lt;cmath&gt;</div><div class="line"></div><div class="line">#include &lt;vector&gt;</div><div class="line"></div><div class="line">#include &lt;map&gt;</div><div class="line"></div><div class="line">#include &lt;queue&gt;</div><div class="line"></div><div class="line">#include &lt;ctime&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">#define LL long long</div><div class="line"></div><div class="line">#define ULL unsigned long long</div><div class="line"></div><div class="line">//#define mod 1000000007</div><div class="line"></div><div class="line">#define eps 1e-8</div><div class="line"></div><div class="line">#define MP make_pair</div><div class="line"></div><div class="line">#define REP(i,a,b) for(int i = a; i &lt; b; ++i)</div><div class="line"></div><div class="line">#define RREP(i,a,b) for(int i = b; i &gt; a ; --i)</div><div class="line"></div><div class="line">#define RE freopen("in.txt","r",stdin)</div><div class="line"></div><div class="line">#define WE freopen("out.txt","w",stdout) </div><div class="line"></div><div class="line">#define PI 3.141592654</div><div class="line"></div><div class="line">int main()</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	int T;</div><div class="line"></div><div class="line">	cin&gt;&gt;T;</div><div class="line"></div><div class="line">	while(T--)</div><div class="line"></div><div class="line">	&#123;</div><div class="line"></div><div class="line">		double x1,x2,y1,y2;</div><div class="line"></div><div class="line">		cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</div><div class="line"></div><div class="line">		double a=(double)sqrt((double)(x1*x1+y1*y1));</div><div class="line"></div><div class="line">		double b=(double)sqrt((double)(x2*x2+y2*y2));</div><div class="line"></div><div class="line">		double c=(double)sqrt((double)((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)));</div><div class="line"></div><div class="line">		double arc=acos((a*a+b*b-c*c)/(2*a*b));</div><div class="line"></div><div class="line">		arc=arc*180/PI;</div><div class="line"></div><div class="line">		printf("%.2f\n",arc);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 3076 ssworld VS DDD 概率dp]]></title>
      <url>http://blog.jetmuffin.com/2014/10/14/hdu-3076-ssworld-VS-DDD/</url>
      <content type="html"><![CDATA[<p>题意应该很明显，甩骰子决定谁扣血，输的扣血，赢的不变，平局双方都不变。</p>
<p>解题时有好几个地方想错了：</p>
<ol>
<li><p>原本以为dp[i][j]表示当前A和B的血量，结果想反了，整个思路貌似有点偏</p>
</li>
<li><p>以为平局的概率也要加入，事实上也是错误1引起的，修改为dp[i][j]表示A和B赢的次数就好理解了，简化问题，去掉平局，p1 = win/(win+lose) ; p2 = lose/(win+lose)</p>
</li>
<li><p>最后的答案不是dp数组中的一个，而是A赢了hp2次的概率，就是dp[hp2-1][j(j从0到hp1-1求和)]*win </p>
</li>
</ol>
<p>解决了这几个问题，结果提交还是WA，后来看了discuss才发现数据错了，两人血量反了，所以把其中的i和j互换。</p>
<a id="more"></a>
<p>代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;  </div><div class="line"></div><div class="line">#include &lt;cstdio&gt;  </div><div class="line"></div><div class="line">#include &lt;cstring&gt;  </div><div class="line"></div><div class="line">#include &lt;string&gt;  </div><div class="line"></div><div class="line">#include &lt;algorithm&gt;  </div><div class="line"></div><div class="line">#include &lt;cmath&gt;  </div><div class="line"></div><div class="line">#include &lt;vector&gt;  </div><div class="line"></div><div class="line">#include &lt;map&gt;  </div><div class="line"></div><div class="line">#include &lt;queue&gt;  </div><div class="line"></div><div class="line">#include &lt;ctime&gt;  </div><div class="line"></div><div class="line">using namespace std;  </div><div class="line"></div><div class="line">#define LL long long  </div><div class="line"></div><div class="line">#define ULL unsigned long long  </div><div class="line"></div><div class="line">//#define mod 1000000007  </div><div class="line"></div><div class="line">#define eps 1e-8  </div><div class="line"></div><div class="line">#define MP make_pair  </div><div class="line"></div><div class="line">#define REP(i,a,b) for(int i = a; i &lt; b; ++i)  </div><div class="line"></div><div class="line">#define RREP(i,a,b) for(int i = b; i &gt; a ; --i)  </div><div class="line"></div><div class="line">#define RE freopen("in.txt","r",stdin)  </div><div class="line"></div><div class="line">#define WE freopen("out.txt","w",stdout)   </div><div class="line"></div><div class="line">#define N 2001  </div><div class="line"></div><div class="line">double a[7],b[7];   </div><div class="line"></div><div class="line">double dp[N][N];  //dp[i][j]表示A赢了i局，B赢了j局，最后求A赢了hp2局的概率   </div><div class="line"></div><div class="line">int main()  </div><div class="line"></div><div class="line">&#123;  </div><div class="line"></div><div class="line">    RE;  </div><div class="line"></div><div class="line">    int hp1,hp2;  </div><div class="line"></div><div class="line">    while(cin&gt;&gt;hp1&gt;&gt;hp2)  </div><div class="line"></div><div class="line">    &#123;  </div><div class="line"></div><div class="line">        memset(dp,0,sizeof(dp));  </div><div class="line"></div><div class="line">        double win,lose,draw;  </div><div class="line"></div><div class="line">        win = lose = draw = 0;  </div><div class="line"></div><div class="line">        for(int i=1;i&lt;=6;i++)  </div><div class="line"></div><div class="line">            cin&gt;&gt;a[i];  </div><div class="line"></div><div class="line">        for(int i=1;i&lt;=6;i++)  </div><div class="line"></div><div class="line">            cin&gt;&gt;b[i];  </div><div class="line"></div><div class="line">        for(int i=2;i&lt;=6;i++)  </div><div class="line"></div><div class="line">            for(int j=1;j&lt;i;j++)  </div><div class="line"></div><div class="line">                win += a[i]*b[j];  </div><div class="line"></div><div class="line">        for(int i=1;i&lt;=5;i++)  </div><div class="line"></div><div class="line">            for(int j=i+1;j&lt;=6;j++)  </div><div class="line"></div><div class="line">                lose += a[i]*b[j];  </div><div class="line"></div><div class="line">        draw = 1-win-lose;  </div><div class="line"></div><div class="line">        double win_p = (win)/(1-draw);  </div><div class="line"></div><div class="line">        double lose_p = lose/(1-draw);                        </div><div class="line"></div><div class="line">        dp[0][0] = 1;   </div><div class="line"></div><div class="line">        for(int j=0;j&lt;=hp1-1;j++)  </div><div class="line"></div><div class="line">            for(int i=0;i&lt;=hp2;i++)  </div><div class="line"></div><div class="line">            &#123;  </div><div class="line"></div><div class="line">                if(i+j&gt;0)  </div><div class="line"></div><div class="line">                &#123;  </div><div class="line"></div><div class="line">                    if(i&gt;0)  </div><div class="line"></div><div class="line">                            dp[i][j] += dp[i-1][j]*lose_p;                    </div><div class="line"></div><div class="line">                    if(j&gt;0)  </div><div class="line"></div><div class="line">                        dp[i][j] += dp[i][j-1]*win_p;         </div><div class="line"></div><div class="line">                &#125;  </div><div class="line"></div><div class="line">            &#125;  </div><div class="line"></div><div class="line">        //cout&lt;&lt;dp[hp2-1][hp1-1]&lt;&lt;endl;   </div><div class="line"></div><div class="line">        double ans = 0;  </div><div class="line"></div><div class="line">        for(int i=0;i&lt;=hp2-1;i++)  </div><div class="line"></div><div class="line">            ans += dp[i][hp1-1] * win_p;  </div><div class="line"></div><div class="line">        if(ans&gt;1) ans=1;  </div><div class="line"></div><div class="line">        printf("%.6f\n",ans);  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CodeForces 148D Bags of mice 概率dp]]></title>
      <url>http://blog.jetmuffin.com/2014/10/14/codeforces-148D-Bags-of-mice-probability-dp/</url>
      <content type="html"><![CDATA[<p>开始看概率dp的内容，碰到算期望的题目，一般就要用概率dp了。这是道入门的概率dp，弄清楚每一步发生的事件和对应的概率，求出递推公式就OK了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dp[i][j][0]表示轮到公主取，还剩下i只白鼠，j只黑鼠；</div><div class="line"></div><div class="line">dp[i][j][1]表示轮到龙取，还剩下i只白鼠，j只黑鼠；</div></pre></td></tr></table></figure></p>
<p>获胜的期望就是dp[w][b][0]。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dp[i][j][0] = p1  //公主抽到的是白鼠概率p1，结束</div><div class="line"></div><div class="line">dp[i][j][0] += dp[i][j-1][1] * p2 //公主抽到的是黑鼠概率p2</div><div class="line"></div><div class="line">dp[i][j][1] += dp[i-1][j-1][0] * p3 // 龙抽到的是黑鼠，吓跑一只白鼠概率p3</div><div class="line"></div><div class="line">dp[i][j][1] += dp[i][j-2][0] * p4 //龙抽到黑鼠，吓跑一只黑鼠概率p4</div></pre></td></tr></table></figure></p>
<p>再依次算概率 就OK了。</p>
<a id="more"></a>
<p>代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">#include &lt;cstdio&gt;</div><div class="line"></div><div class="line">#include &lt;cstring&gt;</div><div class="line"></div><div class="line">#include &lt;string&gt;</div><div class="line"></div><div class="line">#include &lt;algorithm&gt;</div><div class="line"></div><div class="line">#include &lt;cmath&gt;</div><div class="line"></div><div class="line">#include &lt;vector&gt;</div><div class="line"></div><div class="line">#include &lt;map&gt;</div><div class="line"></div><div class="line">#include &lt;queue&gt;</div><div class="line"></div><div class="line">#include &lt;ctime&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">#define LL long long</div><div class="line"></div><div class="line">#define ULL unsigned long long</div><div class="line"></div><div class="line">//#define mod 1000000007</div><div class="line"></div><div class="line">#define eps 1e-8</div><div class="line"></div><div class="line">#define MP make_pair</div><div class="line"></div><div class="line">#define REP(i,a,b) for(int i = a; i &lt; b; ++i)</div><div class="line"></div><div class="line">#define RREP(i,a,b) for(int i = b; i &gt; a ; --i)</div><div class="line"></div><div class="line">#define RE freopen("in.txt","r",stdin)</div><div class="line"></div><div class="line">#define WE freopen("out.txt","w",stdout) </div><div class="line"></div><div class="line">#define N 1005</div><div class="line"></div><div class="line">double dp[N][N][2]; </div><div class="line"></div><div class="line">int main()</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	int w,b;</div><div class="line"></div><div class="line">	cin&gt;&gt;w&gt;&gt;b;</div><div class="line"></div><div class="line">	memset(dp,0,sizeof(dp));</div><div class="line"></div><div class="line">	for(int i=0;i&lt;=w;i++)</div><div class="line"></div><div class="line">		for(int j=0;j&lt;=b;j++)</div><div class="line"></div><div class="line">		&#123;</div><div class="line"></div><div class="line">			if(i&gt;0)</div><div class="line"></div><div class="line">				dp[i][j][0] = i/(double)(i+j);</div><div class="line"></div><div class="line">			if(j&gt;0)</div><div class="line"></div><div class="line">				dp[i][j][0] += j/(double)(i+j) * dp[i][j-1][1]  ;</div><div class="line"></div><div class="line">			if(i&gt;=1&amp;&amp;j&gt;=1)</div><div class="line"></div><div class="line">				dp[i][j][1] += j/(double)(i+j) *i/(double)(i+j-1) * dp[i-1][j-1][0]  ;</div><div class="line"></div><div class="line">			if(j&gt;=2)</div><div class="line"></div><div class="line">				dp[i][j][1] += j/(double)(i+j) * (j-1)/(double)(i+j-1) * dp[i][j-2][0]  ;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	  printf("%.9lf\n",dp[w][b][0]);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu 2098 分拆素数和 水题]]></title>
      <url>http://blog.jetmuffin.com/2014/10/12/hdu-2098-solution/</url>
      <content type="html"><![CDATA[<p>偶尔一水，打个素数表，再正向打ans表。</p>
<a id="more"></a>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1231  </span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"></div><div class="line"><span class="keyword">int</span> prime[N];   </div><div class="line"></div><div class="line"><span class="keyword">int</span> ans[N*N];  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeprime</span><span class="params">()</span>  </span></div><div class="line"></div><div class="line">&#123;  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> j,n=<span class="number">29</span>,i=<span class="number">9</span>,sqrtn;  </div><div class="line"></div><div class="line">    prime[<span class="number">0</span>]=<span class="number">2</span>;  </div><div class="line"></div><div class="line">    prime[<span class="number">1</span>]=<span class="number">3</span>;  </div><div class="line"></div><div class="line">    prime[<span class="number">2</span>]=<span class="number">5</span>;  </div><div class="line"></div><div class="line">    prime[<span class="number">3</span>]=<span class="number">7</span>;  </div><div class="line"></div><div class="line">    prime[<span class="number">4</span>]=<span class="number">11</span>;  </div><div class="line"></div><div class="line">    prime[<span class="number">5</span>]=<span class="number">13</span>;  </div><div class="line"></div><div class="line">    prime[<span class="number">6</span>]=<span class="number">17</span>;  </div><div class="line"></div><div class="line">    prime[<span class="number">7</span>]=<span class="number">19</span>;  </div><div class="line"></div><div class="line">    prime[<span class="number">8</span>]=<span class="number">23</span>;  </div><div class="line"></div><div class="line">    <span class="keyword">while</span> (i&lt;N)   </div><div class="line"></div><div class="line">    &#123;  </div><div class="line"></div><div class="line">        j=<span class="number">0</span>;   </div><div class="line"></div><div class="line">        sqrtn=(<span class="keyword">double</span>)<span class="built_in">sqrt</span>((<span class="keyword">double</span>)n);  </div><div class="line"></div><div class="line">        <span class="keyword">while</span> (prime[j]&lt;=sqrtn)  </div><div class="line"></div><div class="line">        &#123;  </div><div class="line"></div><div class="line">            <span class="keyword">if</span> (n%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;   </div><div class="line"></div><div class="line">            j++;  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (prime[j]&gt;sqrtn)  </div><div class="line"></div><div class="line">        &#123;  </div><div class="line"></div><div class="line">            prime[i]=n;   </div><div class="line"></div><div class="line">            i++;  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        n+=<span class="number">2</span>;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line"></div><div class="line">&#123;  </div><div class="line"></div><div class="line">    makeprime();  </div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)  </div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;N;j++)  </div><div class="line"></div><div class="line">        &#123;  </div><div class="line"></div><div class="line">            <span class="keyword">if</span>(prime[i] == prime[j]) <span class="keyword">continue</span>;  </div><div class="line"></div><div class="line">            <span class="keyword">else</span>  </div><div class="line"></div><div class="line">                ans[prime[i]+prime[j]]++;  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> n;  </div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)  </div><div class="line"></div><div class="line">    &#123;  </div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!n) <span class="keyword">break</span>;  </div><div class="line"></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans[n]&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line"></div><div class="line">    &#125;             </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[遗传算法求x^2+y^2的最大值，C++实现]]></title>
      <url>http://blog.jetmuffin.com/2014/10/08/genetic-algorithm/</url>
      <content type="html"><![CDATA[<p>最近和学院的教授开始学习数据挖掘和机器学习的课程，第一步就是学习简单的遗传算法。</p>
<p>在网上找了篇教程，于是将其实现。文章地址<a href="http://blog.csdn.net/b2b160/article/details/4680853/" target="_blank" rel="external">非常好的理解遗传算法的例子</a>。</p>
<p>内容是求求f(x1,x2)=x1^2+x2^2的最大值 ，x1∈{1,2,3,4,5,6,7} , x2∈{1,2,3,4,5,6,7} 。</p>
<p>选择样本数量为8，经过100代的迭代，效果还不错</p>
<a id="more"></a>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"></div><div class="line">**		遗传算法求f(x1,x2)=x1^2+x2^2的最大值 </div><div class="line"></div><div class="line">**		x1∈&#123;1,2,3,4,5,6,7&#125; , x2∈&#123;1,2,3,4,5,6,7&#125; </div><div class="line"></div><div class="line">**		@Jet-Muffin</div><div class="line"></div><div class="line">*/ </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SAMPLE_NUM 8     <span class="comment">//样本数量 </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EVOLVE_NUM 300   <span class="comment">//进化代数 </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> random(x) (rand()%x)   <span class="comment">//随机函数 </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VARIATE_RATE 10  <span class="comment">//变异率 </span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cross</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cross_change</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//样本node </span></div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> bin[<span class="number">6</span>];</div><div class="line">	<span class="keyword">int</span> x1,x2;</div><div class="line">	<span class="keyword">int</span> f;</div><div class="line">	<span class="keyword">double</span> pct;</div><div class="line">&#125;group[SAMPLE_NUM];</div><div class="line"></div><div class="line"><span class="comment">//样本集合group </span></div><div class="line">node temp[SAMPLE_NUM];    <span class="comment">//操作中间变量数组 </span></div><div class="line"><span class="keyword">int</span> choosen[SAMPLE_NUM];  <span class="comment">//概率分布区域数组 </span></div><div class="line"></div><div class="line"><span class="comment">//初始化，随机生成样本 </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_NUM; i++) &#123;</div><div class="line">		<span class="comment">//随机生成bin数组 </span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++) &#123;</div><div class="line">			<span class="keyword">int</span> pct = random(<span class="number">100</span>);  </div><div class="line">			<span class="keyword">if</span>(pct &gt;= <span class="number">50</span>) </div><div class="line">				group[i].bin[j] = <span class="number">1</span>;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				group[i].bin[j] = <span class="number">0</span>; </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//计算相应数值 </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calcu</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_NUM; i++) &#123;</div><div class="line">		<span class="comment">//生成相应x1、x2</span></div><div class="line">		<span class="keyword">int</span> base = <span class="number">1</span>;</div><div class="line">		group[i].x1 = group[i].x2 = <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">6</span> / <span class="number">2</span> - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">			group[i].x1 += base * group[i].bin[j];	</div><div class="line">			base *= <span class="number">2</span>;</div><div class="line">		&#125; </div><div class="line"></div><div class="line">		base = <span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">6</span> - <span class="number">1</span>; j &gt;= <span class="number">6</span> / <span class="number">2</span>; j--) &#123;</div><div class="line">			group[i].x2 += base * group[i].bin[j];	</div><div class="line">			base *= <span class="number">2</span>;</div><div class="line">		&#125; </div><div class="line"></div><div class="line">		<span class="comment">//计算相应适值</span></div><div class="line">		group[i].f = group[i].x1 * group[i].x1 + group[i].x2 * group[i].x2;</div><div class="line">		</div><div class="line">		<span class="comment">//计算占总数百分比 </span></div><div class="line">		<span class="keyword">int</span> totf = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_NUM; i++)</div><div class="line">			totf += group[i].f;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_NUM; i++)</div><div class="line">			group[i].pct = group[i].f / (<span class="keyword">double</span>)totf; </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//选择过程 </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">choose</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"Choosen:......."</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">memset</span>(choosen,<span class="number">0</span>,<span class="keyword">sizeof</span>(choosen));</div><div class="line"></div><div class="line">	<span class="comment">//计算概率区域 </span></div><div class="line">	choosen[<span class="number">0</span>] = <span class="built_in">floor</span>(group[<span class="number">0</span>].pct * <span class="number">100</span> + <span class="number">0.5</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; SAMPLE_NUM - <span class="number">1</span>; i++) &#123;</div><div class="line">		choosen[i] = choosen[i<span class="number">-1</span>] + <span class="built_in">floor</span>(group[i].pct * <span class="number">100</span> + <span class="number">0.5</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	choosen[SAMPLE_NUM - <span class="number">1</span>] = <span class="number">100</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"Posibility Area: "</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_NUM; i++)</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;choosen[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	<span class="comment">//生成随机数以模拟选择 </span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_NUM; i++) &#123;</div><div class="line">		<span class="keyword">int</span> pct = random(<span class="number">100</span>);</div><div class="line">		<span class="keyword">int</span> choosen_node;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; SAMPLE_NUM; j++) </div><div class="line">			<span class="keyword">if</span>(pct &lt; choosen[j]) &#123;</div><div class="line">				choosen_node = j;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"seed:"</span>&lt;&lt;pct&lt;&lt;<span class="string">", "</span>;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"node "</span>&lt;&lt;choosen_node + <span class="number">1</span>&lt;&lt;<span class="string">" was choosen"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		temp[i] = group[choosen_node];	</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//输出选择结果 </span></div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"choosen result:"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_NUM; i++) &#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"temp["</span>&lt;&lt;i + <span class="number">1</span>&lt;&lt;<span class="string">"]: "</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;temp[i].bin[j]&lt;&lt;<span class="string">" "</span>;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;	 </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//交叉运算 </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cross</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"Crossing:...."</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"Matching:..."</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	<span class="comment">//用vector的random_shuffle实现随机乱序配对，从vector中取两个node就进行运算，实现随机交叉 </span></div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; seeds;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_NUM; i++)  </div><div class="line">        seeds.push_back(i + <span class="number">1</span>);  </div><div class="line"></div><div class="line">    random_shuffle(seeds.begin(), seeds.end());  </div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> pair_fst,pair_sec;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = seeds.begin(); it != seeds.end(); it++) &#123;</div><div class="line">    	cnt++;</div><div class="line">    	<span class="keyword">if</span>(cnt&amp;<span class="number">1</span>)</div><div class="line">			pair_fst = *it;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			pair_sec = *it;</div><div class="line">		<span class="keyword">if</span>(cnt == <span class="number">2</span>) &#123;</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Matching result: "</span>&lt;&lt;pair_fst&lt;&lt;<span class="string">"-"</span>&lt;&lt;pair_sec&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">			cnt = <span class="number">0</span>;</div><div class="line">			cross_change(pair_fst - <span class="number">1</span>,pair_sec - <span class="number">1</span>);</div><div class="line">		&#125;			</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//输出交换结果 </span></div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"cross result:"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_NUM; i++) &#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"temp["</span>&lt;&lt;i + <span class="number">1</span>&lt;&lt;<span class="string">"]: "</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;temp[i].bin[j]&lt;&lt;<span class="string">" "</span>;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;	 </div><div class="line">	&#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//交叉运算过程 </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cross_change</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	<span class="comment">//生成交叉点 </span></div><div class="line">	<span class="keyword">int</span> cross_seed = random(<span class="number">4</span>) + <span class="number">1</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"cross position:"</span>&lt;&lt;cross_seed&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">	<span class="comment">//输出交换前串信息 </span></div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"temp["</span>&lt;&lt;a + <span class="number">1</span>&lt;&lt;<span class="string">"]: "</span>;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span>(i == cross_seed) <span class="built_in">cout</span>&lt;&lt;<span class="string">"| "</span>;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;temp[a].bin[i]&lt;&lt;<span class="string">" "</span>;		</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"temp["</span>&lt;&lt;b + <span class="number">1</span>&lt;&lt;<span class="string">"]: "</span>;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">		<span class="keyword">if</span>(i == cross_seed) <span class="built_in">cout</span>&lt;&lt;<span class="string">"| "</span>;	</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;temp[b].bin[i]&lt;&lt;<span class="string">" "</span>;		</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	<span class="comment">//进行交换 </span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = cross_seed; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">		<span class="keyword">int</span> tmp;</div><div class="line">		tmp = temp[a].bin[i];</div><div class="line">		temp[a].bin[i] = temp[b].bin[i];</div><div class="line">		temp[b].bin[i] = tmp; </div><div class="line">	&#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">//变异运算 </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">variation</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"Variation:"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_NUM; i++) &#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"temp["</span>&lt;&lt;i&lt;&lt;<span class="string">"]:"</span>	;</div><div class="line">		<span class="keyword">int</span> position_seed = random(<span class="number">5</span>);</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"variate pos: "</span>&lt;&lt;position_seed&lt;&lt;<span class="string">","</span>;</div><div class="line">		<span class="keyword">int</span> var_seed = random(<span class="number">100</span>);</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(var_seed &lt; VARIATE_RATE) &#123;</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">" success"</span>;</div><div class="line">			<span class="keyword">if</span>(temp[i].bin[position_seed]) </div><div class="line">				temp[i].bin[position_seed] = <span class="number">0</span>;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				temp[i].bin[position_seed] = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;	</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="comment">//输出变异结果 </span></div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"variate result:"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_NUM; i++) &#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"temp["</span>&lt;&lt;i + <span class="number">1</span>&lt;&lt;<span class="string">"]: "</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;temp[i].bin[j]&lt;&lt;<span class="string">" "</span>;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;	 </div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//将运算的temp数组赋值给group数组以方便下一次迭代运算 </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">trans</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_NUM; i++)</div><div class="line">		group[i] = temp[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出信息 </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_NUM; i++) &#123;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"node["</span>&lt;&lt;i + <span class="number">1</span>&lt;&lt;<span class="string">"]: "</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</div><div class="line">			<span class="built_in">cout</span>&lt;&lt;group[i].bin[j]&lt;&lt;<span class="string">" "</span>;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">" x1: "</span>&lt;&lt;group[i].x1;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">" x2: "</span>&lt;&lt;group[i].x2;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">" f: "</span>&lt;&lt;group[i].f;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">" percent:"</span>&lt;&lt;group[i].pct&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">//总函数接口 </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">evolution</span><span class="params">()</span> </span>&#123;</div><div class="line">	init();</div><div class="line">	calcu(); </div><div class="line">	output();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; EVOLVE_NUM; i++) &#123;</div><div class="line">		choose();</div><div class="line">		cross(); </div><div class="line">		variation();</div><div class="line">		trans();</div><div class="line">		calcu(); </div><div class="line">		output();		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	srand((<span class="keyword">int</span>)time(<span class="number">0</span>));</div><div class="line">	evolution();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：<br><img src="http://img.blog.csdn.net/20141008123929000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hlbjk0MzQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>该函数最大值为98，有7个样本进化到了该数值，还有1个样本为次大值，效果不错。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算m点问题，深搜解决]]></title>
      <url>http://blog.jetmuffin.com/2014/10/08/using-dfs-to-solute-m-points-problem/</url>
      <content type="html"><![CDATA[<p>算法导论课后的一道题。</p>
<p>题目：给定k个正整数，用算数运算符+,-,*,/将这k个正整数链接起来，使最终的得数恰为m。</p>
<p>样例输入：</p>
<p>5 125</p>
<p>7 2 2 12 3</p>
<p>样例输出：</p>
<p>7 <em> 3 = 21; 21 </em> 12 = 252 ; 252 - 2 = 250; 250 / 2 = 125</p>
<p>简单的用深搜解决了，不考虑优化什么的了，数据多的话会超时，不过这不是A题就这样吧~XD</p>
<a id="more"></a>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span>  </span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100  </span></div><div class="line"><span class="keyword">int</span> data[maxn],vis[maxn],num[maxn];  </div><div class="line"><span class="keyword">char</span> op[maxn];  </div><div class="line"><span class="keyword">int</span> n,m;  </div><div class="line"><span class="keyword">int</span> value = <span class="number">0</span>;  </div><div class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> tmp = num[<span class="number">0</span>];  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n ; i++) &#123;  </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;tmp&lt;&lt;<span class="string">" "</span>;  </div><div class="line">        <span class="keyword">if</span>(op[i] == <span class="string">'+'</span>) &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"+"</span>&lt;&lt;<span class="string">" "</span>;  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;num[i]&lt;&lt;<span class="string">" = "</span>;  </div><div class="line">            tmp += num[i];  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;tmp&lt;&lt;<span class="string">";"</span>;  </div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        <span class="keyword">if</span>(op[i] == <span class="string">'-'</span>) &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"-"</span>&lt;&lt;<span class="string">" "</span>;  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;num[i]&lt;&lt;<span class="string">" = "</span>;  </div><div class="line">            tmp -= num[i];  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;tmp&lt;&lt;<span class="string">";"</span>;  </div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        <span class="keyword">if</span>(op[i] == <span class="string">'*'</span>) &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"*"</span>&lt;&lt;<span class="string">" "</span>;  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;num[i]&lt;&lt;<span class="string">" = "</span>;  </div><div class="line">            tmp *= num[i];  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;tmp&lt;&lt;<span class="string">";"</span>;  </div><div class="line">        &#125;  </div><div class="line"></div><div class="line">        <span class="keyword">if</span>(op[i] == <span class="string">'/'</span>) &#123;  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"/"</span>&lt;&lt;<span class="string">" "</span>;  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;num[i]&lt;&lt;<span class="string">" = "</span>;  </div><div class="line">            tmp /= num[i];  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;tmp&lt;&lt;<span class="string">";"</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;  </div><div class="line">    <span class="comment">//cout&lt;&lt;t&lt;&lt;" "&lt;&lt;value&lt;&lt;" "&lt;&lt;endl;  </span></div><div class="line">    <span class="keyword">if</span>(t &gt;= n) &#123;</div><div class="line">        <span class="keyword">if</span>(value == m) &#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"found!"</span>&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">            output();  </div><div class="line">            flag = <span class="number">1</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(t == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(!vis[i]) &#123;</div><div class="line">                    value = data[i];  </div><div class="line">                    num[t] = data[i];  </div><div class="line">                    vis[i] = <span class="number">1</span>;  </div><div class="line">                    dfs(t + <span class="number">1</span>);  </div><div class="line">                    vis[i] = <span class="number">0</span>;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line"></div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>(!vis[i]) &#123;</div><div class="line">                    vis[i] = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">int</span> tmp = value;</div><div class="line">                    op[t] = <span class="string">'+'</span>;</div><div class="line">                    num[t] = data[i];</div><div class="line">                    value = tmp + data[i];</div><div class="line">                    dfs(t + <span class="number">1</span>);</div><div class="line">                    <span class="keyword">if</span>(flag) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">                    op[t] = <span class="string">'-'</span>;</div><div class="line">                    num[t] = data[i];</div><div class="line">                    value = tmp - data[i];</div><div class="line">                    dfs(t + <span class="number">1</span>);</div><div class="line">                    <span class="keyword">if</span>(flag) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">                    op[t] = <span class="string">'*'</span>;</div><div class="line">                    num[t] = data[i];</div><div class="line">                    value = tmp * data[i];</div><div class="line">                    dfs(t + <span class="number">1</span>);</div><div class="line">                    <span class="keyword">if</span>(flag) <span class="keyword">return</span> ;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>(data[i] != <span class="number">0</span>) &#123;</div><div class="line">                        op[t] = <span class="string">'/'</span>;</div><div class="line">                        num[t] = data[i];</div><div class="line">                        value = tmp / data[i];</div><div class="line">                        dfs(t + <span class="number">1</span>);</div><div class="line">                        <span class="keyword">if</span>(flag) <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    value = tmp;</div><div class="line">                    vis[i] = <span class="number">0</span>;</div><div class="line">                &#125; </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="comment">// freopen("in","r",stdin);  </span></div><div class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;data[i];  </div><div class="line">    </div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</div><div class="line">    <span class="built_in">memset</span>(op, <span class="number">0</span>, <span class="keyword">sizeof</span>(op));</div><div class="line">    dfs(<span class="number">0</span>);  </div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!flag) <span class="built_in">cout</span>&lt;&lt;<span class="string">"not found!"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[8个8通过加减乘除得到1000 深搜+剪枝 算法实现]]></title>
      <url>http://blog.jetmuffin.com/2014/09/22/using-eight-eights-and-four-arithmetic-operation-to-get-1000/</url>
      <content type="html"><![CDATA[<p>算法导论的作业，编程使得8个8通过加减乘除得到1000。该题类似24点，但数据规模远大于24点的算法。具体思路参考24点的算法，在编程之美中有提到过。</p>
<p>深搜，然后用map 进行对2个操作数的判重进行剪枝，但是该方法仍然会得到大量的重复算式，想了想用set进行筛选重复的expression，虽然稍微影响效率，但是也没事，最终能在20秒左右搜出结果。</p>
<a id="more"></a>
<p>代码：<br>```cpp</p>
<p>#include <string>  </string></p>
<p>#include <cstdlib>  </cstdlib></p>
<p>#include <ctime>  </ctime></p>
<p>#include <cmath></cmath></p>
<p>#include <map></map></p>
<p>#include <set><br>using namespace std;<br>const double EPS = 1e-6;<br>const int NUM = 8;<br>const int RES = 1000;<br>double A[NUM];<br>string res_str[NUM];<br>set<string> ans;<br>set<string>::iterator it;<br>int times = 0;  </string></string></set></p>
<p>bool dfs(int n) {<br>    // 退出条件<br>    if (n==1) {  </p>
<pre><code>if (fabs(A[0]-RES)&lt;EPS) {  
</code></pre><p>//            cout &lt;&lt; res_str[0] &lt;&lt; endl;<br>            ans.insert(res_str[0]);<br>        }<br>    }  </p>
<pre><code>double a, b;  
string expa, expb;  
map&lt;int ,int&gt; hash;
hash.clear();
for (int i=0; i&lt;n; i++)  
    for (int j=i+1; j&lt;n; j++) {                 
        times++;  

        // 保存状态（操作数i,j）  
        a = A[i];  
        b = A[j];  
        expa = res_str[i];  
        expb = res_str[j];  

          //hash判重 
        if(hash[a] == b) continue;
        if(hash[b] == a) continue;
        hash[a] = b;

        // 改变状态  
        A[j] = A[n-1];  
        res_str[j] = res_str[n-1];  

        // + 
        A[i] = a+b;  
        res_str[i] = &apos;(&apos; + expa + &apos;+&apos; + expb + &apos;)&apos;;  
        if (dfs(n-1))  
            return true;  

        // -    
        A[i] = a-b;  
        res_str[i] = &apos;(&apos; + expa + &apos;-&apos; + expb + &apos;)&apos;;  
        if (dfs(n-1))  
            return true;

        // - 反方向  
        A[i] = b-a;  
        res_str[i] = &apos;(&apos; + expb + &apos;-&apos; + expa + &apos;)&apos;;  
        if (dfs(n-1))  
            return true;  

        // *
        A[i] = a*b;  
        res_str[i] = &apos;(&apos; + expa + &apos;*&apos; + expb + &apos;)&apos;;  
        if (dfs(n-1))  
            return true;  

        // /
        if (b!=0) {  
            A[i] = a/b;  
            res_str[i] = &apos;(&apos; + expa + &apos;/&apos; + expb + &apos;)&apos;;  
            if (dfs(n-1))  
                return true;  
        }  

        // /反方向 
        if (a!=0) {  
            A[i] = b/a;  
            res_str[i] = &apos;(&apos; + expb + &apos;/&apos; + expa + &apos;)&apos;;  
            if (dfs(n-1))  
                return true;  
        }  
        // 恢复状态  
        A[i] = a;  
        A[j] = b;  
        res_str[i] = expa;  
        res_str[j] = expb;  
    }  
return false;  
</code></pre><p>}  </p>
<p>int main() {<br>    for (int i=0; i&lt;NUM; i++) {<br>        A[i] = 8;<br>        char c[10];<br>        sprintf(c,”%.0f”,A[i]);<br>        res_str[i] = c;<br>    }  </p>
<pre><code>cout&lt;&lt;&quot;start searching....&quot;&lt;&lt;endl;
clock_t start = clock();
dfs(NUM);  
for(it = ans.begin(); it != ans.end();it ++){
    cout&lt;&lt;*it&lt;&lt;endl;
} 

clock_t duration = clock() - start;  
cout&lt;&lt; &quot;found : &quot; &lt;&lt;ans.size()&lt;&lt;&quot; expressions!&quot;&lt;&lt;endl;
cout &lt;&lt; &quot;spend : &quot;&lt;&lt;duration &lt;&lt; &quot; ms&quot;&lt;&lt;endl;  
</code></pre><p>}</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu5012 ACM-ICPC 西安赛区E题 Dice]]></title>
      <url>http://blog.jetmuffin.com/2014/09/14/hdu-5012-ACM-ICPC-Xian-region-E-Dice/</url>
      <content type="html"><![CDATA[<p>题目的意思是给定骰子的一个开始状态（六个面的数字），再给定另一个结束状态，问从初始到结束状态最少要走几步，只能前后左右翻滚。</p>
<p>一开始做题想简单了，以为模拟所有方案就可以了，后来发现模拟的越多越乱，结果没A出来。</p>
<p>比赛结束后尝试BFS+Hash(记忆化搜索)，先确定四种操作各改变的数组元素，然后搜索，便可以A了。</p>
<p>代码不够优美，毕竟菜鸟：</p>
<a id="more"></a>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></div><div class="line"></div><div class="line"><span class="comment">//#define mod 1000000007</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> RE freopen(<span class="meta-string">"in.txt"</span>,<span class="meta-string">"r"</span>,stdin)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> WE freopen(<span class="meta-string">"out.txt"</span>,<span class="meta-string">"w"</span>,stdout) </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10000</span>;</div><div class="line"></div><div class="line"><span class="built_in">string</span> a,b;</div><div class="line"></div><div class="line"><span class="keyword">char</span> tmp[<span class="number">100</span>],tmp2[<span class="number">100</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> hash[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">L</span><span class="params">(<span class="built_in">string</span> c)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">char</span> t = c[<span class="number">2</span>];</div><div class="line"></div><div class="line">	c[<span class="number">2</span>] = c[<span class="number">0</span>];</div><div class="line"></div><div class="line">	c[<span class="number">0</span>] = c[<span class="number">3</span>];</div><div class="line"></div><div class="line">	c[<span class="number">3</span>] = c[<span class="number">1</span>];</div><div class="line"></div><div class="line">	c[<span class="number">1</span>] = t;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> c;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">R</span><span class="params">(<span class="built_in">string</span> c)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">char</span> t = c[<span class="number">1</span>];</div><div class="line"></div><div class="line">	c[<span class="number">1</span>] = c[<span class="number">3</span>];</div><div class="line"></div><div class="line">	c[<span class="number">3</span>] = c[<span class="number">0</span>];</div><div class="line"></div><div class="line">	c[<span class="number">0</span>] = c[<span class="number">2</span>];</div><div class="line"></div><div class="line">	c[<span class="number">2</span>] = t;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> c;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">F</span><span class="params">(<span class="built_in">string</span> c)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">char</span> t = c[<span class="number">0</span>];</div><div class="line"></div><div class="line">	c[<span class="number">0</span>] = c[<span class="number">5</span>];</div><div class="line"></div><div class="line">	c[<span class="number">5</span>] = c[<span class="number">1</span>];</div><div class="line"></div><div class="line">	c[<span class="number">1</span>] = c[<span class="number">4</span>];</div><div class="line"></div><div class="line">	c[<span class="number">4</span>] = t;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> c;</div><div class="line"></div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">B</span><span class="params">(<span class="built_in">string</span> c)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">char</span> t = c[<span class="number">4</span>];</div><div class="line"></div><div class="line">	c[<span class="number">4</span>] = c[<span class="number">1</span>];</div><div class="line"></div><div class="line">	c[<span class="number">1</span>] = c[<span class="number">5</span>];</div><div class="line"></div><div class="line">	c[<span class="number">5</span>] = c[<span class="number">0</span>];</div><div class="line"></div><div class="line">	c[<span class="number">0</span>] = t;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> c;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line"></div><div class="line">	<span class="built_in">string</span> s;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> step;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></div><div class="line"></div><div class="line">	&#123;</div><div class="line"></div><div class="line">		<span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">APHash</span><span class="params">()</span></span></div><div class="line"></div><div class="line">	&#123;</div><div class="line"></div><div class="line">	    <span class="keyword">unsigned</span> <span class="keyword">int</span> key = <span class="number">0</span>;</div><div class="line"></div><div class="line">	    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">	    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;s.length(); i++)</div><div class="line"></div><div class="line">	    &#123;</div><div class="line"></div><div class="line">	        <span class="keyword">if</span> ((i &amp; <span class="number">1</span>) == <span class="number">0</span>)</div><div class="line"></div><div class="line">	            key ^= ((key &lt;&lt; <span class="number">7</span>) ^ (s[i]) ^ (key &gt;&gt; <span class="number">3</span>));</div><div class="line"></div><div class="line">	        <span class="keyword">else</span></div><div class="line"></div><div class="line">	            key ^= (~((key &lt;&lt; <span class="number">11</span>) ^ (s[i]) ^ (key &gt;&gt; <span class="number">5</span>)));</div><div class="line"></div><div class="line">	    &#125;</div><div class="line"></div><div class="line">	    <span class="keyword">return</span> (key &amp; <span class="number">0x7FFFFFFF</span>)%maxn;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> i,node &amp;p,node q)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(i==<span class="number">1</span>) p.s = L(q.s);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(i==<span class="number">2</span>) p.s = R(q.s);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(i==<span class="number">3</span>) p.s = F(q.s);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(i==<span class="number">4</span>) p.s = B(q.s);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">node p;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	<span class="built_in">cout</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;  </div><div class="line"></div><div class="line">	<span class="built_in">memset</span>(hash,<span class="number">0</span>,<span class="keyword">sizeof</span>(hash));</div><div class="line"></div><div class="line">    <span class="keyword">int</span> j,key;  </div><div class="line"></div><div class="line">    <span class="built_in">queue</span>&lt;node&gt; q;</div><div class="line"></div><div class="line">    q.push(p); </div><div class="line"></div><div class="line">    <span class="keyword">while</span>(!q.empty()) &#123;  </div><div class="line"></div><div class="line">        node p = q.front();</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(p.s == b)</div><div class="line"></div><div class="line">		&#123;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> p.step;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		node l,r,f,b;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> ll,rr,ff,bb;</div><div class="line"></div><div class="line">		rotate(<span class="number">1</span>,l,p);ll=l.APHash();</div><div class="line"></div><div class="line">		rotate(<span class="number">2</span>,r,p);rr=r.APHash();</div><div class="line"></div><div class="line">		rotate(<span class="number">3</span>,f,p);ff=f.APHash();</div><div class="line"></div><div class="line">		rotate(<span class="number">4</span>,b,p);bb=b.APHash();</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(!hash[ll])&#123;</div><div class="line"></div><div class="line">			l.step=p.step+<span class="number">1</span>;</div><div class="line"></div><div class="line">			hash[ll] = <span class="number">1</span>;</div><div class="line"></div><div class="line">			q.push(l);</div><div class="line"></div><div class="line">		&#125;   </div><div class="line"></div><div class="line">		<span class="keyword">if</span>(!hash[rr])&#123;</div><div class="line"></div><div class="line">			r.step=p.step+<span class="number">1</span>;</div><div class="line"></div><div class="line">			hash[rr] = <span class="number">1</span>;</div><div class="line"></div><div class="line">			q.push(r);</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(!hash[ff])&#123;</div><div class="line"></div><div class="line">			f.step=p.step+<span class="number">1</span>;</div><div class="line"></div><div class="line">			hash[ff] = <span class="number">1</span>;</div><div class="line"></div><div class="line">			q.push(f);</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(!hash[bb])&#123;</div><div class="line"></div><div class="line">			b.step=p.step+<span class="number">1</span>;</div><div class="line"></div><div class="line">			hash[bb] = <span class="number">1</span>;</div><div class="line"></div><div class="line">			q.push(b);</div><div class="line"></div><div class="line">		&#125;	</div><div class="line"></div><div class="line"><span class="comment">//		cout&lt;&lt;"bfs: "&lt;&lt;p.s&lt;&lt;" hashKey:"&lt;&lt;p.APHash()&lt;&lt;" depth:"&lt;&lt;p.step&lt;&lt;endl;</span></div><div class="line"></div><div class="line">		q.pop();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="comment">//RE;</span></div><div class="line"></div><div class="line">	<span class="keyword">while</span>(gets(tmp)&amp;&amp;gets(tmp2))</div><div class="line"></div><div class="line">	&#123;</div><div class="line"></div><div class="line">		a=<span class="string">""</span>;</div><div class="line"></div><div class="line">		b=<span class="string">""</span>;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(tmp);i++)</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(tmp[i]!=<span class="string">' '</span>) a+=	tmp[i];</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(tmp2);i++)</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(tmp2[i]!=<span class="string">' '</span>) b+=	tmp2[i];		</div><div class="line"></div><div class="line">		p.s=a;</div><div class="line"></div><div class="line">		p.step=<span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="built_in">cout</span>&lt;&lt;bfs()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu5011 西安邀请赛E题 Game 博弈论]]></title>
      <url>http://blog.jetmuffin.com/2014/09/14/hdu-5011-xian-invitation-Game-game-theory/</url>
      <content type="html"><![CDATA[<p>比赛前没有看过博弈论，也不知道Nim问题，这题写了一个多小时，做出来一个错误的结论。。硬伤。。</p>
<p>事实上只要把每个数求异或就可以出结果了。</p>
<a id="more"></a>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> n;</div><div class="line"></div><div class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</div><div class="line"></div><div class="line">	&#123;</div><div class="line"></div><div class="line">		<span class="keyword">long</span> <span class="keyword">long</span> a;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> ans;</div><div class="line"></div><div class="line">		<span class="built_in">cin</span>&gt;&gt;ans;</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line"></div><div class="line">		&#123;</div><div class="line"></div><div class="line">			<span class="built_in">cin</span>&gt;&gt;a;</div><div class="line"></div><div class="line">			ans ^= a;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(ans) <span class="built_in">puts</span>(<span class="string">"Win"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Lose"</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu5007 ACM-ICPC 西安赛区网赛A题 水题]]></title>
      <url>http://blog.jetmuffin.com/2014/09/14/hdu-5007-ACM-ICPC-xian-online-a/</url>
      <content type="html"><![CDATA[<p>题意为 只要文章中出现相应词语，就输出语句。第一眼看这题想用字典树，想想不对，后来果断拉了一段KMP代码AC了，后来才发现根本不需要这么复杂KMP，直接每碰到一个‘A’，’i’，‘S’,进行相应判断就好了，不过用KMP直接码一小段代码就可以快速AC也是不错的！</p>
<p>代码：<a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100000</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> next[maxn];</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[maxn],p[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeNext</span><span class="params">(<span class="keyword">char</span> *p,<span class="keyword">int</span> *next)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> q,k;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> m = <span class="built_in">strlen</span>(p);</div><div class="line"></div><div class="line">    next[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(q=<span class="number">1</span>,k=<span class="number">0</span>;q&lt;m;q++)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(k&gt;<span class="number">0</span>&amp;&amp;p[q]!=p[k])</div><div class="line"></div><div class="line">            k = next[k<span class="number">-1</span>];</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(p[q]==p[k])</div><div class="line"></div><div class="line">            k++;</div><div class="line"></div><div class="line">        next[q]=k;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">char</span> *p,<span class="keyword">int</span> *next)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">     <span class="keyword">int</span> n,m;</div><div class="line"></div><div class="line">     <span class="keyword">int</span> i,q;</div><div class="line"></div><div class="line">     <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">     n = <span class="built_in">strlen</span>(s);</div><div class="line"></div><div class="line">     m = <span class="built_in">strlen</span>(p);</div><div class="line"></div><div class="line">     makeNext(p,next);</div><div class="line"></div><div class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>,q = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line"></div><div class="line">     &#123;</div><div class="line"></div><div class="line">         <span class="keyword">while</span>(q &gt; <span class="number">0</span> &amp;&amp; p[q] != s[i])</div><div class="line"></div><div class="line">             q = next[q<span class="number">-1</span>];</div><div class="line"></div><div class="line">         <span class="keyword">if</span> (p[q] == s[i])</div><div class="line"></div><div class="line">         &#123;</div><div class="line"></div><div class="line">             q++;</div><div class="line"></div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">if</span> (q == m)</div><div class="line"></div><div class="line">         &#123;</div><div class="line"></div><div class="line">             count++;</div><div class="line"></div><div class="line">         &#125;</div><div class="line"></div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">return</span> count;    </div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">check1</span><span class="params">(<span class="keyword">char</span> *s)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(kmp(s,<span class="string">"Apple"</span>,next)||kmp(s,<span class="string">"iPhone"</span>,next)||kmp(s,<span class="string">"iPod"</span>,next)||kmp(s,<span class="string">"iPad"</span>,next))</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">check2</span><span class="params">(<span class="keyword">char</span> *s)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(kmp(s,<span class="string">"Sony"</span>,next)) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(check1(s)) <span class="built_in">cout</span>&lt;&lt;<span class="string">"MAI MAI MAI!"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(check2(s)) <span class="built_in">cout</span>&lt;&lt;<span class="string">"SONY DAFA IS GOOD!"</span>&lt;&lt;<span class="built_in">endl</span>;    </div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2014 Multi-University Training Contest 2 1011 ZCC Loves Codefires 解题报告]]></title>
      <url>http://blog.jetmuffin.com/2014/07/24/2014-Multi-University-Training-Contest-2-1011-ZCC-Loves-Codefires-solution/</url>
      <content type="html"><![CDATA[<p>暑期联训第二场。</p>
<p>高中被镇海虐了3年，大学继续被镇海虐，刚入ACM这条路不久，基础不够扎实，镇海还出这么变态的题目= =，就AC了最后一题。。</p>
<p>题目如上，总结就是类似分顺序取数，每个数大小不同，但是取出顺序会累加从而影响最后的结果，为了使最后结果最小，要找到最优解。</p>
<p>第一下看到这个题目，第一反应就是用动态规划去做，但是琢磨半天很难想出状态方程，因为它每个状态点无法比较状态对应的值大小（即使比较了也无意义）。</p>
<p>多次尝试之后，开始寻求其他方法，想了一种最朴素的方法，</p>
<a id="more"></a>
<p>定义结构体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">point&#123;  </div><div class="line"></div><div class="line">    int E;  </div><div class="line"></div><div class="line">    int K;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先用快速排序将按分值将point从大到小排序，然后依次从大到小进行冒泡，每次冒泡能保证前几次会使函数值减小，当再冒泡函数值增加时就停止该数的冒泡，换第二大的数进行冒泡。但是该算法每进行一次冒泡需要计算一次函数值，且n过大，最后导致TLE。</p>
<p>之后开始寻找变换的规律，</p>
<p>写出一组数据：</p>
<p>10 10 20 30</p>
<p>1     2   3   4</p>
<p>totEi    30     50    60    70</p>
<p>Ki    4    3    2    1</p>
<p>交换3 和 4 后得到</p>
<p>totEi    20    50    60    70</p>
<p>Ki    3    4    2    1 </p>
<p>可以看出，3和4的交换，对于其他项是不会有影响的，对值的影响来源于30<em>4+50</em>3与20<em>3+50</em>4的大小变换。</p>
<p>用常规变量表示的话就是，point(i)&gt;point(i+1) 的充要条件是  Ei+1<em>Ki+1+(Ei+Ei+1)</em>Ki&lt;Ei<em>Ki+(Ei+1+Ei)</em>Ki+1</p>
<p>化简得 Ei<em>Ki+1&lt;Ei+1</em>Ki 即Ei/Ki &gt; Ei+1/Ki+1</p>
<p>所以只要该条件满足，交换point(i)与point(i+1）就能得到最优解。</p>
<p>因而在point结构体中加入变量double s  // s=E/K;</p>
<p>根据s对 point进行快速排序，排序得到的就是最优解，求和就是要出的结果了。</p>
<p>代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> point&#123;</div><div class="line">	<span class="keyword">int</span> E;</div><div class="line">	<span class="keyword">int</span> K;</div><div class="line">	<span class="keyword">double</span> s;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> point p[<span class="number">100001</span>]; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(point p1,point p2)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> p1.s&lt;p2.s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">	<span class="keyword">int</span> i,j,N;</div><div class="line">	<span class="keyword">int</span> min;</div><div class="line"></div><div class="line">	__int64 sum=<span class="number">0</span>;</div><div class="line">	__int64 totE=<span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="built_in">cin</span>&gt;&gt;N;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;p[i].E;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)</div><div class="line">		<span class="built_in">cin</span>&gt;&gt;p[i].K;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)</div><div class="line">		p[i].s = p[i].E/(<span class="keyword">double</span>)p[i].K;</div><div class="line">	sort(p+<span class="number">1</span>,p+N+<span class="number">1</span>,cmp);</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++) &#123;</div><div class="line">		totE+=p[i].E;</div><div class="line">		sum+= totE*p[i].K;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hdu4828 Grids 百度之星初赛1002解题报告]]></title>
      <url>http://blog.jetmuffin.com/2014/07/21/hdu-4828-Grids-Astar-1002-solution/</url>
      <content type="html"><![CDATA[<p>搞ACM起步比较晚，但是对这方面兴趣很大，第一次参加百度之星，资格赛水过一道题进入初赛，结果初赛被一道题难倒了。</p>
<p>初赛分两场，每场筛选500人（赛程规定），而之后的结果上看，只有约250人A出题，而大多数人都是通过这道题拿到复赛入场券。这道题我一直觉得非常接近结果了，但是在最重要的环节，也就是取模上出了很大的问题，导致没有A出该题，下面是该题的分析。</p>
<p>题干上，大多数人可以看出看出规律，即求卡特兰数，HDOJ上有相类似的题目，但是这道题的数据量非常大，有100万之多，因而题目上要求对1000000007取模。</p>
<p>卡特兰数有很多递推公式，我选择的是h(n)=h(n-1)<em>(4</em>n-2)/(n+1);这条。</p>
<p>由于数据量比较大，因而我选择用打表的方式，但是这里出现了一个问题，卡特兰数的数据在不断的增大，因而一定要在取模的基础上进行递推，然而简单地进行取模会造成递推公式出错，即不能在原结果上直接取模。</p>
<p>比赛时就卡在这点上了，怎么想都想不出改进的方法。</p>
<p>直到后来做到HDOJ的拓展欧几里德的题目（HDOJ 1576），才直到这道题的解法。</p>
<p>除法的取模需要用extgcd的算法进行取逆，这是该题的关键。</p>
<a id="more"></a>
<p>该题代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">__int64 h[<span class="number">1000001</span>];</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span>  MOD=<span class="number">1000000007</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">extgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</div><div class="line"></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        x=<span class="number">1</span>;</div><div class="line"></div><div class="line">        y=<span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> a;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> r=extgcd(b,a%b,x,y);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t=x;</div><div class="line"></div><div class="line">    x=y;</div><div class="line"></div><div class="line">    y=t-a/b*y;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> r;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> T;</div><div class="line"></div><div class="line">	<span class="keyword">int</span> n,i,j,x,y;</div><div class="line"></div><div class="line">	h[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">1000000</span>;i++)</div><div class="line"></div><div class="line">	&#123;</div><div class="line"></div><div class="line">		h[i]=(<span class="number">4</span>*i<span class="number">-2</span>)%MOD;</div><div class="line"></div><div class="line">		h[i]=(h[i]*h[i<span class="number">-1</span>])%MOD;</div><div class="line"></div><div class="line">		extgcd(i+<span class="number">1</span>,MOD,x,y);</div><div class="line"></div><div class="line">		h[i]=(h[i]*(x+MOD)%MOD)%MOD;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">cin</span>&gt;&gt;T;</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=T;i++)</div><div class="line"></div><div class="line">	&#123;</div><div class="line"></div><div class="line">		<span class="built_in">cin</span>&gt;&gt;n;</div><div class="line"></div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">		<span class="built_in">cout</span>&lt;&lt;h[n]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
  
  
</search>
